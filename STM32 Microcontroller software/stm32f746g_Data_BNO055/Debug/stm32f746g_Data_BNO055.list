
stm32f746g_Data_BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007504  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  080076d8  080076d8  000176d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007afc  08007afc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007afc  08007afc  00017afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b04  08007b04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  200001dc  08007ce8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08007ce8  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f258  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002155  00000000  00000000  0002f464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  000315c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a90  00000000  00000000  00032148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b189  00000000  00000000  00032bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003b70  00000000  00000000  0003dd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000418d1  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004050  00000000  00000000  00041924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080076bc 	.word	0x080076bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	080076bc 	.word	0x080076bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <bno055_assignHandel>:
#include "bno055_acc.h"
#include "i2c_master.h"

I2C_HandleTypeDef  bno055_i2c_port;

void bno055_assignHandel(I2C_HandleTypeDef hi2c_device) {
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	f107 0c08 	add.w	ip, r7, #8
 8000f96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  bno055_i2c_port = hi2c_device;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <bno055_assignHandel+0x2c>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2254      	movs	r2, #84	; 0x54
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f003 fc9d 	bl	80048e4 <memcpy>
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200001f8 	.word	0x200001f8

08000fbc <bno055_setPageID>:

void bno055_setPageID(uint8_t pageID){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b097      	sub	sp, #92	; 0x5c
 8000fc0:	af14      	add	r7, sp, #80	; 0x50
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]

	I2C_transmitData(bno055_i2c_port, PAGE_ID, pageID);
 8000fc6:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <bno055_setPageID+0x34>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	9312      	str	r3, [sp, #72]	; 0x48
 8000fcc:	2307      	movs	r3, #7
 8000fce:	9311      	str	r3, [sp, #68]	; 0x44
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f104 0310 	add.w	r3, r4, #16
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f003 fc83 	bl	80048e4 <memcpy>
 8000fde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fe2:	f000 f8a0 	bl	8001126 <I2C_transmitData>
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001f8 	.word	0x200001f8

08000ff4 <bno055_setOperationMode>:

void bno055_setOperationMode(uint8_t mode){
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b097      	sub	sp, #92	; 0x5c
 8000ff8:	af14      	add	r7, sp, #80	; 0x50
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	bno055_setPageID(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ffdc 	bl	8000fbc <bno055_setPageID>

	I2C_transmitData(bno055_i2c_port, OPERATION_MODE, mode);
 8001004:	4c0e      	ldr	r4, [pc, #56]	; (8001040 <bno055_setOperationMode+0x4c>)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	9312      	str	r3, [sp, #72]	; 0x48
 800100a:	233d      	movs	r3, #61	; 0x3d
 800100c:	9311      	str	r3, [sp, #68]	; 0x44
 800100e:	4668      	mov	r0, sp
 8001010:	f104 0310 	add.w	r3, r4, #16
 8001014:	2244      	movs	r2, #68	; 0x44
 8001016:	4619      	mov	r1, r3
 8001018:	f003 fc64 	bl	80048e4 <memcpy>
 800101c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001020:	f000 f881 	bl	8001126 <I2C_transmitData>

	// Operating mode switching time
	if(mode == CONFIGMODE){
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <bno055_setOperationMode+0x3e>
		HAL_Delay(19);
 800102a:	2013      	movs	r0, #19
 800102c:	f000 fe2c 	bl	8001c88 <HAL_Delay>
	}else{
		HAL_Delay(7);
	}
}
 8001030:	e002      	b.n	8001038 <bno055_setOperationMode+0x44>
		HAL_Delay(7);
 8001032:	2007      	movs	r0, #7
 8001034:	f000 fe28 	bl	8001c88 <HAL_Delay>
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	200001f8 	.word	0x200001f8

08001044 <bno055_readUnit>:

uint8_t bno055_readUnit(){
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b097      	sub	sp, #92	; 0x5c
 8001048:	af14      	add	r7, sp, #80	; 0x50
	uint8_t unit[1];
	I2C_readData(bno055_i2c_port, UNIT_SEL, unit, 1);
 800104a:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <bno055_readUnit+0x34>)
 800104c:	2301      	movs	r3, #1
 800104e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	9312      	str	r3, [sp, #72]	; 0x48
 8001054:	233b      	movs	r3, #59	; 0x3b
 8001056:	9311      	str	r3, [sp, #68]	; 0x44
 8001058:	4668      	mov	r0, sp
 800105a:	f104 0310 	add.w	r3, r4, #16
 800105e:	2244      	movs	r2, #68	; 0x44
 8001060:	4619      	mov	r1, r3
 8001062:	f003 fc3f 	bl	80048e4 <memcpy>
 8001066:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800106a:	f000 f83d 	bl	80010e8 <I2C_readData>
	return unit[0];
 800106e:	793b      	ldrb	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	200001f8 	.word	0x200001f8

0800107c <bno055_setUnit>:

uint8_t bno055_setUnit(){
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b095      	sub	sp, #84	; 0x54
 8001080:	af14      	add	r7, sp, #80	; 0x50
	I2C_transmitData(bno055_i2c_port, UNIT_SEL, 0x80);
 8001082:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <bno055_setUnit+0x30>)
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	9312      	str	r3, [sp, #72]	; 0x48
 8001088:	233b      	movs	r3, #59	; 0x3b
 800108a:	9311      	str	r3, [sp, #68]	; 0x44
 800108c:	4668      	mov	r0, sp
 800108e:	f104 0310 	add.w	r3, r4, #16
 8001092:	2244      	movs	r2, #68	; 0x44
 8001094:	4619      	mov	r1, r3
 8001096:	f003 fc25 	bl	80048e4 <memcpy>
 800109a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800109e:	f000 f842 	bl	8001126 <I2C_transmitData>

	return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3704      	adds	r7, #4
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	200001f8 	.word	0x200001f8

080010b0 <readSensorValues>:
	*x = bno055_getRegValue(GYR_DATA_X_LSB);
	*y = bno055_getRegValue(GYR_DATA_Y_LSB);
	*z = bno055_getRegValue(GYR_DATA_Z_LSB);
}

void readSensorValues(uint8_t* dataBuffer){
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b097      	sub	sp, #92	; 0x5c
 80010b4:	af14      	add	r7, sp, #80	; 0x50
 80010b6:	6078      	str	r0, [r7, #4]

	// Read all ACC and GYR register values
	I2C_readData(bno055_i2c_port, ACC_DATA_X_LSB, dataBuffer, 0x18);
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <readSensorValues+0x34>)
 80010ba:	2318      	movs	r3, #24
 80010bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	9312      	str	r3, [sp, #72]	; 0x48
 80010c2:	2308      	movs	r3, #8
 80010c4:	9311      	str	r3, [sp, #68]	; 0x44
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0310 	add.w	r3, r4, #16
 80010cc:	2244      	movs	r2, #68	; 0x44
 80010ce:	4619      	mov	r1, r3
 80010d0:	f003 fc08 	bl	80048e4 <memcpy>
 80010d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d8:	f000 f806 	bl	80010e8 <I2C_readData>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	200001f8 	.word	0x200001f8

080010e8 <I2C_readData>:
#include "i2c_master.h"


#define I2C_ADDR_ACC 0x28

void I2C_readData(I2C_HandleTypeDef hi2c, uint8_t reg, uint8_t *data, uint8_t len){
 80010e8:	b084      	sub	sp, #16
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af04      	add	r7, sp, #16
 80010f0:	f107 0c08 	add.w	ip, r7, #8
 80010f4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_I2C_Mem_Read(&hi2c, I2C_ADDR_ACC << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80010f8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001102:	b29b      	uxth	r3, r3
 8001104:	2164      	movs	r1, #100	; 0x64
 8001106:	9102      	str	r1, [sp, #8]
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2301      	movs	r3, #1
 8001110:	2150      	movs	r1, #80	; 0x50
 8001112:	f107 0008 	add.w	r0, r7, #8
 8001116:	f001 fa23 	bl	8002560 <HAL_I2C_Mem_Read>

}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001122:	b004      	add	sp, #16
 8001124:	4770      	bx	lr

08001126 <I2C_transmitData>:
	HAL_I2C_Master_Receive(&hi2c, I2C_ADDR_ACC << 1, data, len, HAL_MAX_DELAY);
	HAL_Delay(100);

}

void I2C_transmitData(I2C_HandleTypeDef hi2c, uint8_t reg, uint8_t data){
 8001126:	b084      	sub	sp, #16
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	f107 0c18 	add.w	ip, r7, #24
 8001132:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t txdata[2] = {reg, data};
 8001136:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 800113a:	713b      	strb	r3, [r7, #4]
 800113c:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001140:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR_ACC << 1, txdata, sizeof(txdata), 10);
 8001142:	1d3a      	adds	r2, r7, #4
 8001144:	230a      	movs	r3, #10
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2302      	movs	r3, #2
 800114a:	2150      	movs	r1, #80	; 0x50
 800114c:	f107 0018 	add.w	r0, r7, #24
 8001150:	f001 f912 	bl	8002378 <HAL_I2C_Master_Transmit>
 8001154:	4603      	mov	r3, r0
 8001156:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f000 fd95 	bl	8001c88 <HAL_Delay>

	if(status == HAL_OK){
 800115e:	7bfb      	ldrb	r3, [r7, #15]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d104      	bne.n	800116e <I2C_transmitData+0x48>
		int z = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
		z = z + 1;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
	}

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001178:	b004      	add	sp, #16
 800117a:	4770      	bx	lr

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001180:	b0ff      	sub	sp, #508	; 0x1fc
 8001182:	af1e      	add	r7, sp, #120	; 0x78

	float accX, accY, accZ;
	float gyrX, gyrY, gyrZ;

	char str[300];
	uint16_t counter = 1;
 8001184:	2301      	movs	r3, #1
 8001186:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 fd20 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f969 	bl	8001464 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 fa43 	bl	800161c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001196:	f000 fa11 	bl	80015bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800119a:	f000 f9cf 	bl	800153c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Reset sequence -> bno055 can be configured
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2108      	movs	r1, #8
 80011a2:	48a8      	ldr	r0, [pc, #672]	; (8001444 <main+0x2c8>)
 80011a4:	f001 f83e 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80011a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80011ac:	f000 fd6c 	bl	8001c88 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2108      	movs	r1, #8
 80011b4:	48a3      	ldr	r0, [pc, #652]	; (8001444 <main+0x2c8>)
 80011b6:	f001 f835 	bl	8002224 <HAL_GPIO_WritePin>
  HAL_Delay(600);
 80011ba:	f44f 7016 	mov.w	r0, #600	; 0x258
 80011be:	f000 fd63 	bl	8001c88 <HAL_Delay>

  UART_assignHandel(huart1);
 80011c2:	4ca1      	ldr	r4, [pc, #644]	; (8001448 <main+0x2cc>)
 80011c4:	4668      	mov	r0, sp
 80011c6:	f104 0310 	add.w	r3, r4, #16
 80011ca:	2278      	movs	r2, #120	; 0x78
 80011cc:	4619      	mov	r1, r3
 80011ce:	f003 fb89 	bl	80048e4 <memcpy>
 80011d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d6:	f000 fc87 	bl	8001ae8 <UART_assignHandel>
  bno055_assignHandel(hi2c1);
 80011da:	4c9c      	ldr	r4, [pc, #624]	; (800144c <main+0x2d0>)
 80011dc:	4668      	mov	r0, sp
 80011de:	f104 0310 	add.w	r3, r4, #16
 80011e2:	2244      	movs	r2, #68	; 0x44
 80011e4:	4619      	mov	r1, r3
 80011e6:	f003 fb7d 	bl	80048e4 <memcpy>
 80011ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ee:	f7ff fecd 	bl	8000f8c <bno055_assignHandel>

  bno055_setOperationMode(ACCGYRO);
 80011f2:	2005      	movs	r0, #5
 80011f4:	f7ff fefe 	bl	8000ff4 <bno055_setOperationMode>

  unit = bno055_readUnit();
 80011f8:	f7ff ff24 	bl	8001044 <bno055_readUnit>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 317d 	strb.w	r3, [r7, #381]	; 0x17d

  // Check if the unit of the sensor values is m/s^2 and Deg./sec
  if(unit != 0x80){
 8001202:	f897 317d 	ldrb.w	r3, [r7, #381]	; 0x17d
 8001206:	2b80      	cmp	r3, #128	; 0x80
 8001208:	d001      	beq.n	800120e <main+0x92>
	  bno055_setUnit();
 800120a:	f7ff ff37 	bl	800107c <bno055_setUnit>
  }

  // Clear Terminal
  UARTprintf("\033[2J\033[H");
 800120e:	4890      	ldr	r0, [pc, #576]	; (8001450 <main+0x2d4>)
 8001210:	f000 fc82 	bl	8001b18 <UARTprintf>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Gather 251 Sensor data samples of a motion for a gesture when the Button B1 was pressed
	  userButton = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 8001214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001218:	488a      	ldr	r0, [pc, #552]	; (8001444 <main+0x2c8>)
 800121a:	f000 ffeb 	bl	80021f4 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b8c      	ldr	r3, [pc, #560]	; (8001454 <main+0x2d8>)
 8001224:	701a      	strb	r2, [r3, #0]

	  if(userButton == GPIO_PIN_SET){
 8001226:	4b8b      	ldr	r3, [pc, #556]	; (8001454 <main+0x2d8>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b01      	cmp	r3, #1
 800122c:	f040 8106 	bne.w	800143c <main+0x2c0>

		  while(counter != 251){
 8001230:	e0fe      	b.n	8001430 <main+0x2b4>

			  // Read in the raw sensor values out of the acceleration and gyroscope sensor registers
			  readSensorValues((uint8_t*)reg_readings);
 8001232:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff3a 	bl	80010b0 <readSensorValues>

			  // Convert the 8 bit values of the acceleration register to a 16 bit value
			  raw_acc_data[0] = (((int16_t)((uint8_t *)(reg_readings))[1] << 8) | ((uint8_t *)(reg_readings))[0]);
 800123c:	f897 3151 	ldrb.w	r3, [r7, #337]	; 0x151
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	b21b      	sxth	r3, r3
 800124e:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
			  raw_acc_data[1] = (((int16_t)((uint8_t *)(reg_readings))[3] << 8) | ((uint8_t *)(reg_readings))[2]);
 8001252:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	b21a      	sxth	r2, r3
 800125a:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
			  raw_acc_data[2] = (((int16_t)((uint8_t *)(reg_readings))[5] << 8) | ((uint8_t *)(reg_readings))[4]);
 8001268:	f897 3155 	ldrb.w	r3, [r7, #341]	; 0x155
 800126c:	021b      	lsls	r3, r3, #8
 800126e:	b21a      	sxth	r2, r3
 8001270:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8001274:	b21b      	sxth	r3, r3
 8001276:	4313      	orrs	r3, r2
 8001278:	b21b      	sxth	r3, r3
 800127a:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c

			  // Convert the raw sensor values to a real acceleration value of the unit m/s^2
			  accX = (float)(raw_acc_data[0] / ACC_DIV_MSQ);
 800127e:	f9b7 3148 	ldrsh.w	r3, [r7, #328]	; 0x148
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f96e 	bl	8000564 <__aeabi_i2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b72      	ldr	r3, [pc, #456]	; (8001458 <main+0x2dc>)
 800128e:	f7ff fafd 	bl	800088c <__aeabi_ddiv>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f7ff fca5 	bl	8000be8 <__aeabi_d2f>
 800129e:	4603      	mov	r3, r0
 80012a0:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
			  accY = (float)(raw_acc_data[1] / ACC_DIV_MSQ);
 80012a4:	f9b7 314a 	ldrsh.w	r3, [r7, #330]	; 0x14a
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f95b 	bl	8000564 <__aeabi_i2d>
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	4b69      	ldr	r3, [pc, #420]	; (8001458 <main+0x2dc>)
 80012b4:	f7ff faea 	bl	800088c <__aeabi_ddiv>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc92 	bl	8000be8 <__aeabi_d2f>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			  accZ = (float)(raw_acc_data[2] / ACC_DIV_MSQ);
 80012ca:	f9b7 314c 	ldrsh.w	r3, [r7, #332]	; 0x14c
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f948 	bl	8000564 <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b5f      	ldr	r3, [pc, #380]	; (8001458 <main+0x2dc>)
 80012da:	f7ff fad7 	bl	800088c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc7f 	bl	8000be8 <__aeabi_d2f>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

			  // Convert the 8 bit values of the gyroscope register to a 16 bit value
			  raw_gyr_data[0] = (((int16_t)((uint8_t *)(reg_readings))[13] << 8) | ((uint8_t *)(reg_readings))[12]);
 80012f0:	f897 315d 	ldrb.w	r3, [r7, #349]	; 0x15d
 80012f4:	021b      	lsls	r3, r3, #8
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 80012fc:	b21b      	sxth	r3, r3
 80012fe:	4313      	orrs	r3, r2
 8001300:	b21b      	sxth	r3, r3
 8001302:	f8a7 3140 	strh.w	r3, [r7, #320]	; 0x140
			  raw_gyr_data[1] = (((int16_t)((uint8_t *)(reg_readings))[15] << 8) | ((uint8_t *)(reg_readings))[14]);
 8001306:	f897 315f 	ldrb.w	r3, [r7, #351]	; 0x15f
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	f897 315e 	ldrb.w	r3, [r7, #350]	; 0x15e
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21b      	sxth	r3, r3
 8001318:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
			  raw_gyr_data[2] = (((int16_t)((uint8_t *)(reg_readings))[17] << 8) | ((uint8_t *)(reg_readings))[16]);
 800131c:	f897 3161 	ldrb.w	r3, [r7, #353]	; 0x161
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21b      	sxth	r3, r3
 800132e:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144

			  // Convert the raw sensor values to Deg./s
			  gyrX = (float)(raw_gyr_data[0] / GYR_DIV_DPS);
 8001332:	f9b7 3140 	ldrsh.w	r3, [r7, #320]	; 0x140
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f914 	bl	8000564 <__aeabi_i2d>
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <main+0x2e0>)
 8001342:	f7ff faa3 	bl	800088c <__aeabi_ddiv>
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fc4b 	bl	8000be8 <__aeabi_d2f>
 8001352:	4603      	mov	r3, r0
 8001354:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
			  gyrY = (float)(raw_gyr_data[1] / GYR_DIV_DPS);
 8001358:	f9b7 3142 	ldrsh.w	r3, [r7, #322]	; 0x142
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f901 	bl	8000564 <__aeabi_i2d>
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x2e0>)
 8001368:	f7ff fa90 	bl	800088c <__aeabi_ddiv>
 800136c:	4602      	mov	r2, r0
 800136e:	460b      	mov	r3, r1
 8001370:	4610      	mov	r0, r2
 8001372:	4619      	mov	r1, r3
 8001374:	f7ff fc38 	bl	8000be8 <__aeabi_d2f>
 8001378:	4603      	mov	r3, r0
 800137a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
			  gyrZ = (float)(raw_gyr_data[2] / GYR_DIV_DPS);
 800137e:	f9b7 3144 	ldrsh.w	r3, [r7, #324]	; 0x144
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8ee 	bl	8000564 <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b33      	ldr	r3, [pc, #204]	; (800145c <main+0x2e0>)
 800138e:	f7ff fa7d 	bl	800088c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc25 	bl	8000be8 <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

			  // Print out each sample to the serial terminal
			  sprintf(str,"%d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f",counter , accX, accY, accZ, gyrX, gyrY, gyrZ);
 80013a4:	f8b7 617e 	ldrh.w	r6, [r7, #382]	; 0x17e
 80013a8:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 80013ac:	f7ff f8ec 	bl	8000588 <__aeabi_f2d>
 80013b0:	4604      	mov	r4, r0
 80013b2:	460d      	mov	r5, r1
 80013b4:	f8d7 0174 	ldr.w	r0, [r7, #372]	; 0x174
 80013b8:	f7ff f8e6 	bl	8000588 <__aeabi_f2d>
 80013bc:	4680      	mov	r8, r0
 80013be:	4689      	mov	r9, r1
 80013c0:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	4682      	mov	sl, r0
 80013ca:	468b      	mov	fp, r1
 80013cc:	f8d7 016c 	ldr.w	r0, [r7, #364]	; 0x16c
 80013d0:	f7ff f8da 	bl	8000588 <__aeabi_f2d>
 80013d4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80013d8:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80013dc:	f7ff f8d4 	bl	8000588 <__aeabi_f2d>
 80013e0:	e9c7 0100 	strd	r0, r1, [r7]
 80013e4:	f8d7 0164 	ldr.w	r0, [r7, #356]	; 0x164
 80013e8:	f7ff f8ce 	bl	8000588 <__aeabi_f2d>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	f107 0014 	add.w	r0, r7, #20
 80013f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80013f8:	ed97 7b00 	vldr	d7, [r7]
 80013fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001400:	ed97 7b02 	vldr	d7, [r7, #8]
 8001404:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001408:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800140c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001410:	e9cd 4500 	strd	r4, r5, [sp]
 8001414:	4632      	mov	r2, r6
 8001416:	4912      	ldr	r1, [pc, #72]	; (8001460 <main+0x2e4>)
 8001418:	f003 fee4 	bl	80051e4 <siprintf>
			  UARTprintln(str);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fb8d 	bl	8001b40 <UARTprintln>

			  counter += 1;
 8001426:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 800142a:	3301      	adds	r3, #1
 800142c:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
		  while(counter != 251){
 8001430:	f8b7 317e 	ldrh.w	r3, [r7, #382]	; 0x17e
 8001434:	2bfb      	cmp	r3, #251	; 0xfb
 8001436:	f47f aefc 	bne.w	8001232 <main+0xb6>
 800143a:	e6eb      	b.n	8001214 <main+0x98>
		  }

	  }else{
		  counter = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	f8a7 317e 	strh.w	r3, [r7, #382]	; 0x17e
	  userButton = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 8001442:	e6e7      	b.n	8001214 <main+0x98>
 8001444:	40022000 	.word	0x40022000
 8001448:	200002a0 	.word	0x200002a0
 800144c:	2000024c 	.word	0x2000024c
 8001450:	080076d8 	.word	0x080076d8
 8001454:	20000328 	.word	0x20000328
 8001458:	40590000 	.word	0x40590000
 800145c:	40300000 	.word	0x40300000
 8001460:	080076e0 	.word	0x080076e0

08001464 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b094      	sub	sp, #80	; 0x50
 8001468:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800146a:	f107 0320 	add.w	r3, r7, #32
 800146e:	2230      	movs	r2, #48	; 0x30
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f003 fa44 	bl	8004900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001478:	f107 030c 	add.w	r3, r7, #12
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001488:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <SystemClock_Config+0xd0>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a29      	ldr	r2, [pc, #164]	; (8001534 <SystemClock_Config+0xd0>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b27      	ldr	r3, [pc, #156]	; (8001534 <SystemClock_Config+0xd0>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	4b25      	ldr	r3, [pc, #148]	; (8001538 <SystemClock_Config+0xd4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a24      	ldr	r2, [pc, #144]	; (8001538 <SystemClock_Config+0xd4>)
 80014a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b22      	ldr	r3, [pc, #136]	; (8001538 <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014b4:	607b      	str	r3, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014cc:	2308      	movs	r3, #8
 80014ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014d0:	23d8      	movs	r3, #216	; 0xd8
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014d8:	2309      	movs	r3, #9
 80014da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014dc:	f107 0320 	add.w	r3, r7, #32
 80014e0:	4618      	mov	r0, r3
 80014e2:	f001 fc85 	bl	8002df0 <HAL_RCC_OscConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80014ec:	f000 f8ee 	bl	80016cc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014f0:	f001 fc2e 	bl	8002d50 <HAL_PWREx_EnableOverDrive>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014fa:	f000 f8e7 	bl	80016cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014fe:	230f      	movs	r3, #15
 8001500:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001502:	2302      	movs	r3, #2
 8001504:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800150a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800150e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001514:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2107      	movs	r1, #7
 800151c:	4618      	mov	r0, r3
 800151e:	f001 ff0b 	bl	8003338 <HAL_RCC_ClockConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001528:	f000 f8d0 	bl	80016cc <Error_Handler>
  }
}
 800152c:	bf00      	nop
 800152e:	3750      	adds	r7, #80	; 0x50
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <MX_I2C1_Init+0x7c>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_I2C1_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_I2C1_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_I2C1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_I2C1_Init+0x74>)
 8001578:	f000 fe6e 	bl	8002258 <HAL_I2C_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001582:	f000 f8a3 	bl	80016cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <MX_I2C1_Init+0x74>)
 800158a:	f001 fb49 	bl	8002c20 <HAL_I2CEx_ConfigAnalogFilter>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 f89a 	bl	80016cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_I2C1_Init+0x74>)
 800159c:	f001 fb8b 	bl	8002cb6 <HAL_I2CEx_ConfigDigitalFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f000 f891 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000024c 	.word	0x2000024c
 80015b4:	40005400 	.word	0x40005400
 80015b8:	6000030d 	.word	0x6000030d

080015bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015c2:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_USART1_UART_Init+0x5c>)
 80015c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015e2:	220c      	movs	r2, #12
 80015e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_USART1_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_USART1_UART_Init+0x58>)
 8001600:	f002 fc70 	bl	8003ee4 <HAL_UART_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800160a:	f000 f85f 	bl	80016cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200002a0 	.word	0x200002a0
 8001618:	40011000 	.word	0x40011000

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b24      	ldr	r3, [pc, #144]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a23      	ldr	r2, [pc, #140]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b21      	ldr	r3, [pc, #132]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800164a:	4b1e      	ldr	r3, [pc, #120]	; (80016c4 <MX_GPIO_Init+0xa8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a1d      	ldr	r2, [pc, #116]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a17      	ldr	r2, [pc, #92]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_GPIO_Init+0xa8>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2108      	movs	r1, #8
 800167e:	4812      	ldr	r0, [pc, #72]	; (80016c8 <MX_GPIO_Init+0xac>)
 8001680:	f000 fdd0 	bl	8002224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001684:	2308      	movs	r3, #8
 8001686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001694:	f107 030c 	add.w	r3, r7, #12
 8001698:	4619      	mov	r1, r3
 800169a:	480b      	ldr	r0, [pc, #44]	; (80016c8 <MX_GPIO_Init+0xac>)
 800169c:	f000 fbfe 	bl	8001e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a6:	2300      	movs	r3, #0
 80016a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4619      	mov	r1, r3
 80016b4:	4804      	ldr	r0, [pc, #16]	; (80016c8 <MX_GPIO_Init+0xac>)
 80016b6:	f000 fbf1 	bl	8001e9c <HAL_GPIO_Init>

}
 80016ba:	bf00      	nop
 80016bc:	3720      	adds	r7, #32
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800
 80016c8:	40022000 	.word	0x40022000

080016cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016d0:	b672      	cpsid	i
}
 80016d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <Error_Handler+0x8>
	...

080016d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x44>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_MspInit+0x44>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x44>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x44>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x44>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x44>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0aa      	sub	sp, #168	; 0xa8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	2284      	movs	r2, #132	; 0x84
 800173e:	2100      	movs	r1, #0
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f8dd 	bl	8004900 <memset>
  if(hi2c->Instance==I2C1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_I2C_MspInit+0xb4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d13c      	bne.n	80017ca <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001750:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001754:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001756:	2300      	movs	r3, #0
 8001758:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800175a:	f107 0310 	add.w	r3, r7, #16
 800175e:	4618      	mov	r0, r3
 8001760:	f001 ffd0 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800176a:	f7ff ffaf 	bl	80016cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001786:	f44f 7340 	mov.w	r3, #768	; 0x300
 800178a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800178e:	2312      	movs	r3, #18
 8001790:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017a0:	2304      	movs	r3, #4
 80017a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017aa:	4619      	mov	r1, r3
 80017ac:	480b      	ldr	r0, [pc, #44]	; (80017dc <HAL_I2C_MspInit+0xbc>)
 80017ae:	f000 fb75 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 80017b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017bc:	6413      	str	r3, [r2, #64]	; 0x40
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_I2C_MspInit+0xb8>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ca:	bf00      	nop
 80017cc:	37a8      	adds	r7, #168	; 0xa8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40005400 	.word	0x40005400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020400 	.word	0x40020400

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b0ac      	sub	sp, #176	; 0xb0
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 0318 	add.w	r3, r7, #24
 80017fc:	2284      	movs	r2, #132	; 0x84
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f003 f87d 	bl	8004900 <memset>
  if(huart->Instance==USART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a32      	ldr	r2, [pc, #200]	; (80018d4 <HAL_UART_MspInit+0xf4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d15c      	bne.n	80018ca <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001810:	2340      	movs	r3, #64	; 0x40
 8001812:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001814:	2300      	movs	r3, #0
 8001816:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001818:	f107 0318 	add.w	r3, r7, #24
 800181c:	4618      	mov	r0, r3
 800181e:	f001 ff71 	bl	8003704 <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff ff50 	bl	80016cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800182c:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 8001832:	f043 0310 	orr.w	r3, r3, #16
 8001836:	6453      	str	r3, [r2, #68]	; 0x44
 8001838:	4b27      	ldr	r3, [pc, #156]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 800183a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 800184a:	f043 0302 	orr.w	r3, r3, #2
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0302 	and.w	r3, r3, #2
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a1d      	ldr	r2, [pc, #116]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_UART_MspInit+0xf8>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800188c:	2307      	movs	r3, #7
 800188e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001896:	4619      	mov	r1, r3
 8001898:	4810      	ldr	r0, [pc, #64]	; (80018dc <HAL_UART_MspInit+0xfc>)
 800189a:	f000 faff 	bl	8001e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800189e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b8:	2307      	movs	r3, #7
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4806      	ldr	r0, [pc, #24]	; (80018e0 <HAL_UART_MspInit+0x100>)
 80018c6:	f000 fae9 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	37b0      	adds	r7, #176	; 0xb0
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40011000 	.word	0x40011000
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020400 	.word	0x40020400
 80018e0:	40020000 	.word	0x40020000

080018e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <NMI_Handler+0x4>

080018ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <HardFault_Handler+0x4>

080018f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <MemManage_Handler+0x4>

080018f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <BusFault_Handler+0x4>

080018fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001900:	e7fe      	b.n	8001900 <UsageFault_Handler+0x4>

08001902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 f98a 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	bf00      	nop
 8001936:	bd80      	pop	{r7, pc}

08001938 <_getpid>:
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 800193c:	2301      	movs	r3, #1
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr

08001948 <_kill>:
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	f002 ff9d 	bl	8004890 <__errno>
 8001956:	4603      	mov	r3, r0
 8001958:	2216      	movs	r2, #22
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	4618      	mov	r0, r3
 8001962:	3708      	adds	r7, #8
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_exit>:
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ffe7 	bl	8001948 <_kill>
 800197a:	e7fe      	b.n	800197a <_exit+0x12>

0800197c <_read>:
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e00a      	b.n	80019a4 <_read+0x28>
 800198e:	f3af 8000 	nop.w
 8001992:	4601      	mov	r1, r0
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	60ba      	str	r2, [r7, #8]
 800199a:	b2ca      	uxtb	r2, r1
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	dbf0      	blt.n	800198e <_read+0x12>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	3718      	adds	r7, #24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <_write>:
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	2300      	movs	r3, #0
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e009      	b.n	80019dc <_write+0x26>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f3af 8000 	nop.w
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf1      	blt.n	80019c8 <_write+0x12>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_close>:
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_fstat>:
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_isatty>:
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	2301      	movs	r3, #1
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_lseek>:
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <_sbrk>:
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <_sbrk+0x5c>)
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <_sbrk+0x60>)
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <_sbrk+0x64>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d102      	bne.n	8001a7a <_sbrk+0x22>
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <_sbrk+0x64>)
 8001a76:	4a12      	ldr	r2, [pc, #72]	; (8001ac0 <_sbrk+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d207      	bcs.n	8001a98 <_sbrk+0x40>
 8001a88:	f002 ff02 	bl	8004890 <__errno>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	220c      	movs	r2, #12
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	e009      	b.n	8001aac <_sbrk+0x54>
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <_sbrk+0x64>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <_sbrk+0x64>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <_sbrk+0x64>)
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3718      	adds	r7, #24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20050000 	.word	0x20050000
 8001ab8:	00000400 	.word	0x00000400
 8001abc:	2000032c 	.word	0x2000032c
 8001ac0:	200003d0 	.word	0x200003d0

08001ac4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <SystemInit+0x20>)
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <SystemInit+0x20>)
 8001ad0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <UART_assignHandel>:
#include "uart.h"
#include <string.h>

UART_HandleTypeDef uart_comPort;

void UART_assignHandel(UART_HandleTypeDef huart1_device){
 8001ae8:	b084      	sub	sp, #16
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	f107 0c08 	add.w	ip, r7, #8
 8001af2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uart_comPort = huart1_device;
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <UART_assignHandel+0x2c>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f107 0308 	add.w	r3, r7, #8
 8001afe:	2288      	movs	r2, #136	; 0x88
 8001b00:	4619      	mov	r1, r3
 8001b02:	f002 feef 	bl	80048e4 <memcpy>

}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001b0e:	b004      	add	sp, #16
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000330 	.word	0x20000330

08001b18 <UARTprintf>:

void UARTprintf(char pcString[]){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_comPort, (uint8_t *) pcString, strlen(pcString), 10);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7fe fb75 	bl	8000210 <strlen>
 8001b26:	4603      	mov	r3, r0
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4803      	ldr	r0, [pc, #12]	; (8001b3c <UARTprintf+0x24>)
 8001b30:	f002 fa26 	bl	8003f80 <HAL_UART_Transmit>

}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000330 	.word	0x20000330

08001b40 <UARTprintln>:

void UARTprintln(char pcString[]){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_comPort, (uint8_t *) pcString, strlen(pcString), 10);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7fe fb61 	bl	8000210 <strlen>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	230a      	movs	r3, #10
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4808      	ldr	r0, [pc, #32]	; (8001b78 <UARTprintln+0x38>)
 8001b58:	f002 fa12 	bl	8003f80 <HAL_UART_Transmit>

	char newline[2] = "\r\n";
 8001b5c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8001b60:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&uart_comPort, (uint8_t *) newline, 2, 10);
 8001b62:	f107 010c 	add.w	r1, r7, #12
 8001b66:	230a      	movs	r3, #10
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4803      	ldr	r0, [pc, #12]	; (8001b78 <UARTprintln+0x38>)
 8001b6c:	f002 fa08 	bl	8003f80 <HAL_UART_Transmit>

}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000330 	.word	0x20000330

08001b7c <Reset_Handler>:
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0x12>
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x16>)
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1a>)
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopFillZerobss+0x1e>)
 8001b86:	2300      	movs	r3, #0
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:
 8001b8a:	58d4      	ldr	r4, [r2, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:
 8001b90:	18c4      	adds	r4, r0, r3
 8001b92:	428c      	cmp	r4, r1
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x22>)
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x26>)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:
 8001ba2:	42a2      	cmp	r2, r4
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>
 8001ba6:	f7ff ff8d 	bl	8001ac4 <SystemInit>
 8001baa:	f002 fe77 	bl	800489c <__libc_init_array>
 8001bae:	f7ff fae5 	bl	800117c <main>
 8001bb2:	4770      	bx	lr
 8001bb4:	20050000 	.word	0x20050000
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	200001dc 	.word	0x200001dc
 8001bc0:	08007b0c 	.word	0x08007b0c
 8001bc4:	200001dc 	.word	0x200001dc
 8001bc8:	200003cc 	.word	0x200003cc

08001bcc <ADC_IRQHandler>:
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f92e 	bl	8001e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	200f      	movs	r0, #15
 8001bda:	f000 f805 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fd7b 	bl	80016d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f93b 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f911 	bl	8001e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	200003b8 	.word	0x200003b8

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200003b8 	.word	0x200003b8

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	db0a      	blt.n	8001d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	490c      	ldr	r1, [pc, #48]	; (8001d80 <__NVIC_SetPriority+0x4c>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	0112      	lsls	r2, r2, #4
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	440b      	add	r3, r1
 8001d58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d5c:	e00a      	b.n	8001d74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4908      	ldr	r1, [pc, #32]	; (8001d84 <__NVIC_SetPriority+0x50>)
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	3b04      	subs	r3, #4
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	440b      	add	r3, r1
 8001d72:	761a      	strb	r2, [r3, #24]
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000e100 	.word	0xe000e100
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b089      	sub	sp, #36	; 0x24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f1c3 0307 	rsb	r3, r3, #7
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	bf28      	it	cs
 8001da6:	2304      	movcs	r3, #4
 8001da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	3304      	adds	r3, #4
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d902      	bls.n	8001db8 <NVIC_EncodePriority+0x30>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3b03      	subs	r3, #3
 8001db6:	e000      	b.n	8001dba <NVIC_EncodePriority+0x32>
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43da      	mvns	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	401a      	ands	r2, r3
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dda:	43d9      	mvns	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de0:	4313      	orrs	r3, r2
         );
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3724      	adds	r7, #36	; 0x24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e00:	d301      	bcc.n	8001e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e02:	2301      	movs	r3, #1
 8001e04:	e00f      	b.n	8001e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <SysTick_Config+0x40>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e0e:	210f      	movs	r1, #15
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f7ff ff8e 	bl	8001d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <SysTick_Config+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <SysTick_Config+0x40>)
 8001e20:	2207      	movs	r2, #7
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f7ff ff47 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e5c:	f7ff ff5c 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	68b9      	ldr	r1, [r7, #8]
 8001e66:	6978      	ldr	r0, [r7, #20]
 8001e68:	f7ff ff8e 	bl	8001d88 <NVIC_EncodePriority>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff5d 	bl	8001d34 <__NVIC_SetPriority>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffb0 	bl	8001df0 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e175      	b.n	80021a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8164 	bne.w	80021a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x56>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80be 	beq.w	80021a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <HAL_GPIO_Init+0x324>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_GPIO_Init+0x324>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800203e:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_GPIO_Init+0x328>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a58      	ldr	r2, [pc, #352]	; (80021c8 <HAL_GPIO_Init+0x32c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d037      	beq.n	80020da <HAL_GPIO_Init+0x23e>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a57      	ldr	r2, [pc, #348]	; (80021cc <HAL_GPIO_Init+0x330>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d031      	beq.n	80020d6 <HAL_GPIO_Init+0x23a>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a56      	ldr	r2, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x334>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d02b      	beq.n	80020d2 <HAL_GPIO_Init+0x236>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a55      	ldr	r2, [pc, #340]	; (80021d4 <HAL_GPIO_Init+0x338>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d025      	beq.n	80020ce <HAL_GPIO_Init+0x232>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a54      	ldr	r2, [pc, #336]	; (80021d8 <HAL_GPIO_Init+0x33c>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d01f      	beq.n	80020ca <HAL_GPIO_Init+0x22e>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a53      	ldr	r2, [pc, #332]	; (80021dc <HAL_GPIO_Init+0x340>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d019      	beq.n	80020c6 <HAL_GPIO_Init+0x22a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a52      	ldr	r2, [pc, #328]	; (80021e0 <HAL_GPIO_Init+0x344>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_GPIO_Init+0x226>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a51      	ldr	r2, [pc, #324]	; (80021e4 <HAL_GPIO_Init+0x348>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d00d      	beq.n	80020be <HAL_GPIO_Init+0x222>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a50      	ldr	r2, [pc, #320]	; (80021e8 <HAL_GPIO_Init+0x34c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d007      	beq.n	80020ba <HAL_GPIO_Init+0x21e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4f      	ldr	r2, [pc, #316]	; (80021ec <HAL_GPIO_Init+0x350>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d101      	bne.n	80020b6 <HAL_GPIO_Init+0x21a>
 80020b2:	2309      	movs	r3, #9
 80020b4:	e012      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020b6:	230a      	movs	r3, #10
 80020b8:	e010      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ba:	2308      	movs	r3, #8
 80020bc:	e00e      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020be:	2307      	movs	r3, #7
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x240>
 80020da:	2300      	movs	r3, #0
 80020dc:	69fa      	ldr	r2, [r7, #28]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80020ec:	4935      	ldr	r1, [pc, #212]	; (80021c4 <HAL_GPIO_Init+0x328>)
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fa:	4b3d      	ldr	r3, [pc, #244]	; (80021f0 <HAL_GPIO_Init+0x354>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211e:	4a34      	ldr	r2, [pc, #208]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002124:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002148:	4a29      	ldr	r2, [pc, #164]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002172:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_GPIO_Init+0x354>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <HAL_GPIO_Init+0x354>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3301      	adds	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	f67f ae86 	bls.w	8001ebc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	3724      	adds	r7, #36	; 0x24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40013800 	.word	0x40013800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020400 	.word	0x40020400
 80021d0:	40020800 	.word	0x40020800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40021400 	.word	0x40021400
 80021e0:	40021800 	.word	0x40021800
 80021e4:	40021c00 	.word	0x40021c00
 80021e8:	40022000 	.word	0x40022000
 80021ec:	40022400 	.word	0x40022400
 80021f0:	40013c00 	.word	0x40013c00

080021f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	887b      	ldrh	r3, [r7, #2]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	460b      	mov	r3, r1
 800222e:	807b      	strh	r3, [r7, #2]
 8002230:	4613      	mov	r3, r2
 8002232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002234:	787b      	ldrb	r3, [r7, #1]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002240:	e003      	b.n	800224a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002242:	887b      	ldrh	r3, [r7, #2]
 8002244:	041a      	lsls	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	619a      	str	r2, [r3, #24]
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e07f      	b.n	800236a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d106      	bne.n	8002284 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff fa4e 	bl	8001720 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0201 	bic.w	r2, r2, #1
 800229a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d107      	bne.n	80022d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	e006      	b.n	80022e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d104      	bne.n	80022f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_I2C_Init+0x11c>)
 80022fe:	430b      	orrs	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002310:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69d9      	ldr	r1, [r3, #28]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1a      	ldr	r2, [r3, #32]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0201 	orr.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	02008000 	.word	0x02008000

08002378 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af02      	add	r7, sp, #8
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	461a      	mov	r2, r3
 8002384:	460b      	mov	r3, r1
 8002386:	817b      	strh	r3, [r7, #10]
 8002388:	4613      	mov	r3, r2
 800238a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b20      	cmp	r3, #32
 8002396:	f040 80da 	bne.w	800254e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_I2C_Master_Transmit+0x30>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0d3      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b0:	f7ff fc5e 	bl	8001c70 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2319      	movs	r3, #25
 80023bc:	2201      	movs	r2, #1
 80023be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 fa5e 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0be      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2221      	movs	r2, #33	; 0x21
 80023d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2210      	movs	r2, #16
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	893a      	ldrh	r2, [r7, #8]
 80023f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2200      	movs	r2, #0
 80023f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	d90e      	bls.n	8002422 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800240e:	b2da      	uxtb	r2, r3
 8002410:	8979      	ldrh	r1, [r7, #10]
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <HAL_I2C_Master_Transmit+0x1e0>)
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 fbce 	bl	8002bbc <I2C_TransferConfig>
 8002420:	e06c      	b.n	80024fc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <HAL_I2C_Master_Transmit+0x1e0>)
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fbbd 	bl	8002bbc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002442:	e05b      	b.n	80024fc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	6a39      	ldr	r1, [r7, #32]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 fa5b 	bl	8002904 <I2C_WaitOnTXISFlagUntilTimeout>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e07b      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245c:	781a      	ldrb	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002472:	b29b      	uxth	r3, r3
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d034      	beq.n	80024fc <HAL_I2C_Master_Transmit+0x184>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	2b00      	cmp	r3, #0
 8002498:	d130      	bne.n	80024fc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	2200      	movs	r2, #0
 80024a2:	2180      	movs	r1, #128	; 0x80
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f9ed 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e04d      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	2bff      	cmp	r3, #255	; 0xff
 80024bc:	d90e      	bls.n	80024dc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	22ff      	movs	r2, #255	; 0xff
 80024c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	8979      	ldrh	r1, [r7, #10]
 80024cc:	2300      	movs	r3, #0
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f000 fb71 	bl	8002bbc <I2C_TransferConfig>
 80024da:	e00f      	b.n	80024fc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	8979      	ldrh	r1, [r7, #10]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fb60 	bl	8002bbc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d19e      	bne.n	8002444 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	6a39      	ldr	r1, [r7, #32]
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa3a 	bl	8002984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e01a      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2220      	movs	r2, #32
 8002520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6859      	ldr	r1, [r3, #4]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <HAL_I2C_Master_Transmit+0x1e4>)
 800252e:	400b      	ands	r3, r1
 8002530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e000      	b.n	8002550 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800254e:	2302      	movs	r3, #2
  }
}
 8002550:	4618      	mov	r0, r3
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	80002000 	.word	0x80002000
 800255c:	fe00e800 	.word	0xfe00e800

08002560 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	4608      	mov	r0, r1
 800256a:	4611      	mov	r1, r2
 800256c:	461a      	mov	r2, r3
 800256e:	4603      	mov	r3, r0
 8002570:	817b      	strh	r3, [r7, #10]
 8002572:	460b      	mov	r3, r1
 8002574:	813b      	strh	r3, [r7, #8]
 8002576:	4613      	mov	r3, r2
 8002578:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	f040 80fd 	bne.w	8002782 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d002      	beq.n	8002594 <HAL_I2C_Mem_Read+0x34>
 800258e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0f1      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_I2C_Mem_Read+0x4e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e0ea      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025b6:	f7ff fb5b 	bl	8001c70 <HAL_GetTick>
 80025ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	2319      	movs	r3, #25
 80025c2:	2201      	movs	r2, #1
 80025c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 f95b 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0d5      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2222      	movs	r2, #34	; 0x22
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2240      	movs	r2, #64	; 0x40
 80025e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a3a      	ldr	r2, [r7, #32]
 80025f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80025f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002600:	88f8      	ldrh	r0, [r7, #6]
 8002602:	893a      	ldrh	r2, [r7, #8]
 8002604:	8979      	ldrh	r1, [r7, #10]
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4603      	mov	r3, r0
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f000 f8bf 	bl	8002794 <I2C_RequestMemoryRead>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0ad      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	2bff      	cmp	r3, #255	; 0xff
 8002630:	d90e      	bls.n	8002650 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	22ff      	movs	r2, #255	; 0xff
 8002636:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263c:	b2da      	uxtb	r2, r3
 800263e:	8979      	ldrh	r1, [r7, #10]
 8002640:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_I2C_Mem_Read+0x22c>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 fab7 	bl	8002bbc <I2C_TransferConfig>
 800264e:	e00f      	b.n	8002670 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265e:	b2da      	uxtb	r2, r3
 8002660:	8979      	ldrh	r1, [r7, #10]
 8002662:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_I2C_Mem_Read+0x22c>)
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 faa6 	bl	8002bbc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	2200      	movs	r2, #0
 8002678:	2104      	movs	r1, #4
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 f902 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e07c      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	b2d2      	uxtb	r2, r2
 8002696:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a6:	3b01      	subs	r3, #1
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d034      	beq.n	8002730 <HAL_I2C_Mem_Read+0x1d0>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d130      	bne.n	8002730 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d4:	2200      	movs	r2, #0
 80026d6:	2180      	movs	r1, #128	; 0x80
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f000 f8d3 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e04d      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	; 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	; 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fa57 	bl	8002bbc <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fa46 	bl	8002bbc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d19a      	bne.n	8002670 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800273e:	68f8      	ldr	r0, [r7, #12]
 8002740:	f000 f920 	bl	8002984 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e01a      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2220      	movs	r2, #32
 8002754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_I2C_Mem_Read+0x230>)
 8002762:	400b      	ands	r3, r1
 8002764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2220      	movs	r2, #32
 800276a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	e000      	b.n	8002784 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002782:	2302      	movs	r3, #2
  }
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	80002400 	.word	0x80002400
 8002790:	fe00e800 	.word	0xfe00e800

08002794 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af02      	add	r7, sp, #8
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	4608      	mov	r0, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	461a      	mov	r2, r3
 80027a2:	4603      	mov	r3, r0
 80027a4:	817b      	strh	r3, [r7, #10]
 80027a6:	460b      	mov	r3, r1
 80027a8:	813b      	strh	r3, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	8979      	ldrh	r1, [r7, #10]
 80027b4:	4b20      	ldr	r3, [pc, #128]	; (8002838 <I2C_RequestMemoryRead+0xa4>)
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	2300      	movs	r3, #0
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	f000 f9fe 	bl	8002bbc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	69b9      	ldr	r1, [r7, #24]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f000 f89d 	bl	8002904 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e02c      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d105      	bne.n	80027e6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027da:	893b      	ldrh	r3, [r7, #8]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
 80027e4:	e015      	b.n	8002812 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80027e6:	893b      	ldrh	r3, [r7, #8]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	69b9      	ldr	r1, [r7, #24]
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 f883 	bl	8002904 <I2C_WaitOnTXISFlagUntilTimeout>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e012      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002808:	893b      	ldrh	r3, [r7, #8]
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2200      	movs	r2, #0
 800281a:	2140      	movs	r1, #64	; 0x40
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f831 	bl	8002884 <I2C_WaitOnFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	80002000 	.word	0x80002000

0800283c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b02      	cmp	r3, #2
 8002850:	d103      	bne.n	800285a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2200      	movs	r2, #0
 8002858:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b01      	cmp	r3, #1
 8002866:	d007      	beq.n	8002878 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	619a      	str	r2, [r3, #24]
  }
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	e022      	b.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d01e      	beq.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800289e:	f7ff f9e7 	bl	8001c70 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d302      	bcc.n	80028b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d113      	bne.n	80028dc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b8:	f043 0220 	orr.w	r2, r3, #32
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e00f      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	699a      	ldr	r2, [r3, #24]
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	4013      	ands	r3, r2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	bf0c      	ite	eq
 80028ec:	2301      	moveq	r3, #1
 80028ee:	2300      	movne	r3, #0
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	79fb      	ldrb	r3, [r7, #7]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d0cd      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002910:	e02c      	b.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f870 	bl	80029fc <I2C_IsErrorOccurred>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e02a      	b.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800292c:	d01e      	beq.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800292e:	f7ff f99f 	bl	8001c70 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d113      	bne.n	800296c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002948:	f043 0220 	orr.w	r2, r3, #32
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e007      	b.n	800297c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b02      	cmp	r3, #2
 8002978:	d1cb      	bne.n	8002912 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3710      	adds	r7, #16
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002990:	e028      	b.n	80029e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f830 	bl	80029fc <I2C_IsErrorOccurred>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e026      	b.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7ff f963 	bl	8001c70 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d1cf      	bne.n	8002992 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a16:	2300      	movs	r3, #0
 8002a18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d068      	beq.n	8002afa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2210      	movs	r2, #16
 8002a2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a30:	e049      	b.n	8002ac6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a38:	d045      	beq.n	8002ac6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a3a:	f7ff f919 	bl	8001c70 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d302      	bcc.n	8002a50 <I2C_IsErrorOccurred+0x54>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13a      	bne.n	8002ac6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a72:	d121      	bne.n	8002ab8 <I2C_IsErrorOccurred+0xbc>
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a7a:	d01d      	beq.n	8002ab8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a7c:	7cfb      	ldrb	r3, [r7, #19]
 8002a7e:	2b20      	cmp	r3, #32
 8002a80:	d01a      	beq.n	8002ab8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a92:	f7ff f8ed 	bl	8001c70 <HAL_GetTick>
 8002a96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a98:	e00e      	b.n	8002ab8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a9a:	f7ff f8e9 	bl	8001c70 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b19      	cmp	r3, #25
 8002aa6:	d907      	bls.n	8002ab8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	f043 0320 	orr.w	r3, r3, #32
 8002aae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002ab6:	e006      	b.n	8002ac6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0320 	and.w	r3, r3, #32
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d1e9      	bne.n	8002a9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b20      	cmp	r3, #32
 8002ad2:	d003      	beq.n	8002adc <I2C_IsErrorOccurred+0xe0>
 8002ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0aa      	beq.n	8002a32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	f043 0304 	orr.w	r3, r3, #4
 8002af2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b2e:	6a3b      	ldr	r3, [r7, #32]
 8002b30:	f043 0308 	orr.w	r3, r3, #8
 8002b34:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00b      	beq.n	8002b68 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01c      	beq.n	8002baa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f7ff fe63 	bl	800283c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6859      	ldr	r1, [r3, #4]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <I2C_IsErrorOccurred+0x1bc>)
 8002b82:	400b      	ands	r3, r1
 8002b84:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2220      	movs	r2, #32
 8002b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3728      	adds	r7, #40	; 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	fe00e800 	.word	0xfe00e800

08002bbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bd4:	7a7b      	ldrb	r3, [r7, #9]
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002bdc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	0d5b      	lsrs	r3, r3, #21
 8002bf6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <I2C_TransferConfig+0x60>)
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	ea02 0103 	and.w	r1, r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	03ff63ff 	.word	0x03ff63ff

08002c20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d138      	bne.n	8002ca8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e032      	b.n	8002caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0201 	bic.w	r2, r2, #1
 8002c62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6819      	ldr	r1, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	683a      	ldr	r2, [r7, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e000      	b.n	8002caa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ca8:	2302      	movs	r3, #2
  }
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b085      	sub	sp, #20
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
 8002cbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d139      	bne.n	8002d40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e033      	b.n	8002d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2224      	movs	r2, #36	; 0x24
 8002ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0201 	bic.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	021b      	lsls	r3, r3, #8
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	e000      	b.n	8002d42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
  }
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d5a:	4b23      	ldr	r3, [pc, #140]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d64:	6413      	str	r3, [r2, #64]	; 0x40
 8002d66:	4b20      	ldr	r3, [pc, #128]	; (8002de8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d72:	4b1e      	ldr	r3, [pc, #120]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a1d      	ldr	r2, [pc, #116]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d7e:	f7fe ff77 	bl	8001c70 <HAL_GetTick>
 8002d82:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d84:	e009      	b.n	8002d9a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d86:	f7fe ff73 	bl	8001c70 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d94:	d901      	bls.n	8002d9a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e022      	b.n	8002de0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da6:	d1ee      	bne.n	8002d86 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002da8:	4b10      	ldr	r3, [pc, #64]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002db4:	f7fe ff5c 	bl	8001c70 <HAL_GetTick>
 8002db8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dba:	e009      	b.n	8002dd0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002dbc:	f7fe ff58 	bl	8001c70 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dca:	d901      	bls.n	8002dd0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e007      	b.n	8002de0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dd0:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ddc:	d1ee      	bne.n	8002dbc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40007000 	.word	0x40007000

08002df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e291      	b.n	800332a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8087 	beq.w	8002f22 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	4b96      	ldr	r3, [pc, #600]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e20:	4b93      	ldr	r3, [pc, #588]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d112      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62>
 8002e2c:	4b90      	ldr	r3, [pc, #576]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e38:	d10b      	bne.n	8002e52 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3a:	4b8d      	ldr	r3, [pc, #564]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d06c      	beq.n	8002f20 <HAL_RCC_OscConfig+0x130>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d168      	bne.n	8002f20 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e26b      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x7a>
 8002e5c:	4b84      	ldr	r3, [pc, #528]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a83      	ldr	r2, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	e02e      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x9c>
 8002e72:	4b7f      	ldr	r3, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a7e      	ldr	r2, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	4b7c      	ldr	r3, [pc, #496]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7b      	ldr	r2, [pc, #492]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01d      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0xc0>
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a75      	ldr	r2, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4b73      	ldr	r3, [pc, #460]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a72      	ldr	r2, [pc, #456]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e00b      	b.n	8002ec8 <HAL_RCC_OscConfig+0xd8>
 8002eb0:	4b6f      	ldr	r3, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a6e      	ldr	r2, [pc, #440]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6b      	ldr	r2, [pc, #428]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d013      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fece 	bl	8001c70 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fe feca 	bl	8001c70 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e21f      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eea:	4b61      	ldr	r3, [pc, #388]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe8>
 8002ef6:	e014      	b.n	8002f22 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7fe feba 	bl	8001c70 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f00:	f7fe feb6 	bl	8001c70 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b64      	cmp	r3, #100	; 0x64
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e20b      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x110>
 8002f1e:	e000      	b.n	8002f22 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d069      	beq.n	8003002 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f3a:	4b4d      	ldr	r3, [pc, #308]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d11c      	bne.n	8002f80 <HAL_RCC_OscConfig+0x190>
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d116      	bne.n	8002f80 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e1df      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	493d      	ldr	r1, [pc, #244]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7e:	e040      	b.n	8003002 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d023      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f88:	4b39      	ldr	r3, [pc, #228]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a38      	ldr	r2, [pc, #224]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fe fe6c 	bl	8001c70 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fe fe68 	bl	8001c70 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1bd      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fae:	4b30      	ldr	r3, [pc, #192]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0f0      	beq.n	8002f9c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fba:	4b2d      	ldr	r3, [pc, #180]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4929      	ldr	r1, [pc, #164]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	600b      	str	r3, [r1, #0]
 8002fce:	e018      	b.n	8003002 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd0:	4b27      	ldr	r3, [pc, #156]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fe48 	bl	8001c70 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fe44 	bl	8001c70 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e199      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d038      	beq.n	8003080 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	4a15      	ldr	r2, [pc, #84]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003022:	f7fe fe25 	bl	8001c70 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800302a:	f7fe fe21 	bl	8001c70 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e176      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800303e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x23a>
 8003048:	e01a      	b.n	8003080 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_RCC_OscConfig+0x280>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003056:	f7fe fe0b 	bl	8001c70 <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	e00a      	b.n	8003074 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe fe07 	bl	8001c70 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d903      	bls.n	8003074 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e15c      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
 8003070:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003074:	4b91      	ldr	r3, [pc, #580]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003076:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1ee      	bne.n	800305e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a4 	beq.w	80031d6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b8b      	ldr	r3, [pc, #556]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10d      	bne.n	80030b6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	4b88      	ldr	r3, [pc, #544]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a87      	ldr	r2, [pc, #540]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b85      	ldr	r3, [pc, #532]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b6:	4b82      	ldr	r3, [pc, #520]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030c2:	4b7f      	ldr	r3, [pc, #508]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7e      	ldr	r2, [pc, #504]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fdcf 	bl	8001c70 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7fe fdcb 	bl	8001c70 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b64      	cmp	r3, #100	; 0x64
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e120      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	4b75      	ldr	r3, [pc, #468]	; (80032c0 <HAL_RCC_OscConfig+0x4d0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x31a>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a6e      	ldr	r2, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
 8003108:	e02d      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x33c>
 8003112:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a69      	ldr	r2, [pc, #420]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003122:	4a66      	ldr	r2, [pc, #408]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003124:	f023 0304 	bic.w	r3, r3, #4
 8003128:	6713      	str	r3, [r2, #112]	; 0x70
 800312a:	e01c      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d10c      	bne.n	800314e <HAL_RCC_OscConfig+0x35e>
 8003134:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a60      	ldr	r2, [pc, #384]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800313a:	f043 0304 	orr.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	4b5e      	ldr	r3, [pc, #376]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003144:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	; 0x70
 800314c:	e00b      	b.n	8003166 <HAL_RCC_OscConfig+0x376>
 800314e:	4b5b      	ldr	r3, [pc, #364]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5a      	ldr	r2, [pc, #360]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b58      	ldr	r3, [pc, #352]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a57      	ldr	r2, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003160:	f023 0304 	bic.w	r3, r3, #4
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d015      	beq.n	800319a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316e:	f7fe fd7f 	bl	8001c70 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003174:	e00a      	b.n	800318c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003176:	f7fe fd7b 	bl	8001c70 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	f241 3288 	movw	r2, #5000	; 0x1388
 8003184:	4293      	cmp	r3, r2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e0ce      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318c:	4b4b      	ldr	r3, [pc, #300]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800318e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0ee      	beq.n	8003176 <HAL_RCC_OscConfig+0x386>
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319a:	f7fe fd69 	bl	8001c70 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a0:	e00a      	b.n	80031b8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f7fe fd65 	bl	8001c70 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4b40      	ldr	r3, [pc, #256]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ee      	bne.n	80031a2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d105      	bne.n	80031d6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80a4 	beq.w	8003328 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e0:	4b36      	ldr	r3, [pc, #216]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d06b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d149      	bne.n	8003288 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80031fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fe fd36 	bl	8001c70 <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fd32 	bl	8001c70 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e087      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	4b28      	ldr	r3, [pc, #160]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69da      	ldr	r2, [r3, #28]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	019b      	lsls	r3, r3, #6
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	3b01      	subs	r3, #1
 8003240:	041b      	lsls	r3, r3, #16
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	061b      	lsls	r3, r3, #24
 800324a:	4313      	orrs	r3, r2
 800324c:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800324e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003252:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003254:	4b19      	ldr	r3, [pc, #100]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a18      	ldr	r2, [pc, #96]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800325a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fd06 	bl	8001c70 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fd02 	bl	8001c70 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e057      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x478>
 8003286:	e04f      	b.n	8003328 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 800328e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003292:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003294:	f7fe fcec 	bl	8001c70 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800329c:	f7fe fce8 	bl	8001c70 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e03d      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ae:	4b03      	ldr	r3, [pc, #12]	; (80032bc <HAL_RCC_OscConfig+0x4cc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x4ac>
 80032ba:	e035      	b.n	8003328 <HAL_RCC_OscConfig+0x538>
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x544>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d028      	beq.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032dc:	429a      	cmp	r2, r3
 80032de:	d121      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d11a      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032fa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e000      	b.n	800332a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3718      	adds	r7, #24
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800

08003338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0d0      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b6a      	ldr	r3, [pc, #424]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d910      	bls.n	8003380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b67      	ldr	r3, [pc, #412]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f023 020f 	bic.w	r2, r3, #15
 8003366:	4965      	ldr	r1, [pc, #404]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	4313      	orrs	r3, r2
 800336c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336e:	4b63      	ldr	r3, [pc, #396]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d001      	beq.n	8003380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0b8      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d020      	beq.n	80033ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003398:	4b59      	ldr	r3, [pc, #356]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800339e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d005      	beq.n	80033bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4a52      	ldr	r2, [pc, #328]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033bc:	4b50      	ldr	r3, [pc, #320]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	494d      	ldr	r1, [pc, #308]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d040      	beq.n	800345c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d107      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e2:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d115      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e07f      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e073      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06b      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4936      	ldr	r1, [pc, #216]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800342c:	f7fe fc20 	bl	8001c70 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe fc1c 	bl	8001c70 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e053      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b27      	ldr	r3, [pc, #156]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d210      	bcs.n	800348c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b24      	ldr	r3, [pc, #144]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 020f 	bic.w	r2, r3, #15
 8003472:	4922      	ldr	r1, [pc, #136]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800347a:	4b20      	ldr	r3, [pc, #128]	; (80034fc <HAL_RCC_ClockConfig+0x1c4>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	683a      	ldr	r2, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d001      	beq.n	800348c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e032      	b.n	80034f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b00      	cmp	r3, #0
 8003496:	d008      	beq.n	80034aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4916      	ldr	r1, [pc, #88]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d009      	beq.n	80034ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	490e      	ldr	r1, [pc, #56]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034ca:	f000 f821 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80034ce:	4602      	mov	r2, r0
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_RCC_ClockConfig+0x1c8>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	490a      	ldr	r1, [pc, #40]	; (8003504 <HAL_RCC_ClockConfig+0x1cc>)
 80034dc:	5ccb      	ldrb	r3, [r1, r3]
 80034de:	fa22 f303 	lsr.w	r3, r2, r3
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_RCC_ClockConfig+0x1d0>)
 80034e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034e6:	4b09      	ldr	r3, [pc, #36]	; (800350c <HAL_RCC_ClockConfig+0x1d4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7fe fb7c 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00
 8003500:	40023800 	.word	0x40023800
 8003504:	08007708 	.word	0x08007708
 8003508:	20000000 	.word	0x20000000
 800350c:	20000004 	.word	0x20000004

08003510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003514:	b090      	sub	sp, #64	; 0x40
 8003516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003520:	2300      	movs	r3, #0
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003528:	4b59      	ldr	r3, [pc, #356]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f003 030c 	and.w	r3, r3, #12
 8003530:	2b08      	cmp	r3, #8
 8003532:	d00d      	beq.n	8003550 <HAL_RCC_GetSysClockFreq+0x40>
 8003534:	2b08      	cmp	r3, #8
 8003536:	f200 80a1 	bhi.w	800367c <HAL_RCC_GetSysClockFreq+0x16c>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0x34>
 800353e:	2b04      	cmp	r3, #4
 8003540:	d003      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x3a>
 8003542:	e09b      	b.n	800367c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_GetSysClockFreq+0x184>)
 8003546:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003548:	e09b      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800354a:	4b53      	ldr	r3, [pc, #332]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800354e:	e098      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003558:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800355a:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003566:	4b4a      	ldr	r3, [pc, #296]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	099b      	lsrs	r3, r3, #6
 800356c:	2200      	movs	r2, #0
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	627a      	str	r2, [r7, #36]	; 0x24
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003578:	2100      	movs	r1, #0
 800357a:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800357c:	fb03 f201 	mul.w	r2, r3, r1
 8003580:	2300      	movs	r3, #0
 8003582:	fb00 f303 	mul.w	r3, r0, r3
 8003586:	4413      	add	r3, r2
 8003588:	4a43      	ldr	r2, [pc, #268]	; (8003698 <HAL_RCC_GetSysClockFreq+0x188>)
 800358a:	fba0 1202 	umull	r1, r2, r0, r2
 800358e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003590:	460a      	mov	r2, r1
 8003592:	62ba      	str	r2, [r7, #40]	; 0x28
 8003594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003596:	4413      	add	r3, r2
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800359a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359c:	2200      	movs	r2, #0
 800359e:	61bb      	str	r3, [r7, #24]
 80035a0:	61fa      	str	r2, [r7, #28]
 80035a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035aa:	f7fd fb6d 	bl	8000c88 <__aeabi_uldivmod>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4613      	mov	r3, r2
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035b6:	e053      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b8:	4b35      	ldr	r3, [pc, #212]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	2200      	movs	r2, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	617a      	str	r2, [r7, #20]
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035ca:	f04f 0b00 	mov.w	fp, #0
 80035ce:	4652      	mov	r2, sl
 80035d0:	465b      	mov	r3, fp
 80035d2:	f04f 0000 	mov.w	r0, #0
 80035d6:	f04f 0100 	mov.w	r1, #0
 80035da:	0159      	lsls	r1, r3, #5
 80035dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e0:	0150      	lsls	r0, r2, #5
 80035e2:	4602      	mov	r2, r0
 80035e4:	460b      	mov	r3, r1
 80035e6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ea:	eb63 090b 	sbc.w	r9, r3, fp
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003602:	ebb2 0408 	subs.w	r4, r2, r8
 8003606:	eb63 0509 	sbc.w	r5, r3, r9
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	00eb      	lsls	r3, r5, #3
 8003614:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003618:	00e2      	lsls	r2, r4, #3
 800361a:	4614      	mov	r4, r2
 800361c:	461d      	mov	r5, r3
 800361e:	eb14 030a 	adds.w	r3, r4, sl
 8003622:	603b      	str	r3, [r7, #0]
 8003624:	eb45 030b 	adc.w	r3, r5, fp
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003636:	4629      	mov	r1, r5
 8003638:	028b      	lsls	r3, r1, #10
 800363a:	4621      	mov	r1, r4
 800363c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003640:	4621      	mov	r1, r4
 8003642:	028a      	lsls	r2, r1, #10
 8003644:	4610      	mov	r0, r2
 8003646:	4619      	mov	r1, r3
 8003648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364a:	2200      	movs	r2, #0
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	60fa      	str	r2, [r7, #12]
 8003650:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003654:	f7fd fb18 	bl	8000c88 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003660:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <HAL_RCC_GetSysClockFreq+0x180>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	f003 0303 	and.w	r3, r3, #3
 800366a:	3301      	adds	r3, #1
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003670:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003674:	fbb2 f3f3 	udiv	r3, r2, r3
 8003678:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800367a:	e002      	b.n	8003682 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_RCC_GetSysClockFreq+0x184>)
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003684:	4618      	mov	r0, r3
 8003686:	3740      	adds	r7, #64	; 0x40
 8003688:	46bd      	mov	sp, r7
 800368a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800368e:	bf00      	nop
 8003690:	40023800 	.word	0x40023800
 8003694:	00f42400 	.word	0x00f42400
 8003698:	017d7840 	.word	0x017d7840

0800369c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000000 	.word	0x20000000

080036b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036b8:	f7ff fff0 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036bc:	4602      	mov	r2, r0
 80036be:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	0a9b      	lsrs	r3, r3, #10
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	4903      	ldr	r1, [pc, #12]	; (80036d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ca:	5ccb      	ldrb	r3, [r1, r3]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40023800 	.word	0x40023800
 80036d8:	08007718 	.word	0x08007718

080036dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036e0:	f7ff ffdc 	bl	800369c <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	; (80036fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0b5b      	lsrs	r3, r3, #13
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	08007718 	.word	0x08007718

08003704 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003718:	2300      	movs	r3, #0
 800371a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d012      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800372c:	4b69      	ldr	r3, [pc, #420]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	4a68      	ldr	r2, [pc, #416]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003732:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	4b66      	ldr	r3, [pc, #408]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	4964      	ldr	r1, [pc, #400]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800374e:	2301      	movs	r3, #1
 8003750:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d017      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800375e:	4b5d      	ldr	r3, [pc, #372]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	4959      	ldr	r1, [pc, #356]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800377c:	d101      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800377e:	2301      	movs	r3, #1
 8003780:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800378a:	2301      	movs	r3, #1
 800378c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800379a:	4b4e      	ldr	r3, [pc, #312]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800379c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	494a      	ldr	r1, [pc, #296]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037b8:	d101      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037c6:	2301      	movs	r3, #1
 80037c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037d6:	2301      	movs	r3, #1
 80037d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0320 	and.w	r3, r3, #32
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 808b 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037e8:	4b3a      	ldr	r3, [pc, #232]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	4a39      	ldr	r2, [pc, #228]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6413      	str	r3, [r2, #64]	; 0x40
 80037f4:	4b37      	ldr	r3, [pc, #220]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003800:	4b35      	ldr	r3, [pc, #212]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a34      	ldr	r2, [pc, #208]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800380a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380c:	f7fe fa30 	bl	8001c70 <HAL_GetTick>
 8003810:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003814:	f7fe fa2c 	bl	8001c70 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	; 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e357      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003826:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003836:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800383a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d035      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d02e      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003850:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003858:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a1d      	ldr	r2, [pc, #116]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003866:	4b1b      	ldr	r3, [pc, #108]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a1a      	ldr	r2, [pc, #104]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800386c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003870:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003872:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003878:	4b16      	ldr	r3, [pc, #88]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	d114      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fe f9f4 	bl	8001c70 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe f9f0 	bl	8001c70 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	; 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e319      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0ee      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ba:	d111      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038bc:	4b05      	ldr	r3, [pc, #20]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ca:	400b      	ands	r3, r1
 80038cc:	4901      	ldr	r1, [pc, #4]	; (80038d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	608b      	str	r3, [r1, #8]
 80038d2:	e00b      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038d4:	40023800 	.word	0x40023800
 80038d8:	40007000 	.word	0x40007000
 80038dc:	0ffffcff 	.word	0x0ffffcff
 80038e0:	4baa      	ldr	r3, [pc, #680]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4aa9      	ldr	r2, [pc, #676]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ea:	6093      	str	r3, [r2, #8]
 80038ec:	4ba7      	ldr	r3, [pc, #668]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	49a4      	ldr	r1, [pc, #656]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	2b00      	cmp	r3, #0
 8003908:	d010      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800390a:	4ba0      	ldr	r3, [pc, #640]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	4a9e      	ldr	r2, [pc, #632]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003916:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800391a:	4b9c      	ldr	r3, [pc, #624]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800391c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	4999      	ldr	r1, [pc, #612]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003926:	4313      	orrs	r3, r2
 8003928:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003938:	4b94      	ldr	r3, [pc, #592]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003946:	4991      	ldr	r1, [pc, #580]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003948:	4313      	orrs	r3, r2
 800394a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800395a:	4b8c      	ldr	r3, [pc, #560]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003968:	4988      	ldr	r1, [pc, #544]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d00a      	beq.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800397c:	4b83      	ldr	r3, [pc, #524]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800398a:	4980      	ldr	r1, [pc, #512]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800398c:	4313      	orrs	r3, r2
 800398e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800399e:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4977      	ldr	r1, [pc, #476]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c0:	4b72      	ldr	r3, [pc, #456]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ce:	496f      	ldr	r1, [pc, #444]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e2:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f023 020c 	bic.w	r2, r3, #12
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	4966      	ldr	r1, [pc, #408]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	495e      	ldr	r1, [pc, #376]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a26:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	4955      	ldr	r1, [pc, #340]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a6a:	4b48      	ldr	r3, [pc, #288]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a78:	4944      	ldr	r1, [pc, #272]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a8c:	4b3f      	ldr	r3, [pc, #252]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9a:	493c      	ldr	r1, [pc, #240]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003aae:	4b37      	ldr	r3, [pc, #220]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	4933      	ldr	r1, [pc, #204]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00a      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ad0:	4b2e      	ldr	r3, [pc, #184]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ade:	492b      	ldr	r1, [pc, #172]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d011      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b00:	4922      	ldr	r1, [pc, #136]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b22:	2301      	movs	r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b40:	4912      	ldr	r1, [pc, #72]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00b      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b54:	4b0d      	ldr	r3, [pc, #52]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b64:	4909      	ldr	r1, [pc, #36]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d006      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f000 80d9 	beq.w	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b80:	4b02      	ldr	r3, [pc, #8]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a01      	ldr	r2, [pc, #4]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b8a:	e001      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b92:	f7fe f86d 	bl	8001c70 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fe f869 	bl	8001c70 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b64      	cmp	r3, #100	; 0x64
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e194      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bac:	4b6c      	ldr	r3, [pc, #432]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1f0      	bne.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d021      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d11d      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003bcc:	4b64      	ldr	r3, [pc, #400]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bda:	4b61      	ldr	r3, [pc, #388]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	019a      	lsls	r2, r3, #6
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	061b      	lsls	r3, r3, #24
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	071b      	lsls	r3, r3, #28
 8003c00:	4957      	ldr	r1, [pc, #348]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d004      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02e      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c32:	d129      	bne.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c34:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c48:	0f1b      	lsrs	r3, r3, #28
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	019a      	lsls	r2, r3, #6
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	041b      	lsls	r3, r3, #16
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	071b      	lsls	r3, r3, #28
 8003c68:	493d      	ldr	r1, [pc, #244]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c76:	f023 021f 	bic.w	r2, r3, #31
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	4937      	ldr	r1, [pc, #220]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d01d      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	0e1b      	lsrs	r3, r3, #24
 8003c9c:	f003 030f 	and.w	r3, r3, #15
 8003ca0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ca8:	0f1b      	lsrs	r3, r3, #28
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	019a      	lsls	r2, r3, #6
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	071b      	lsls	r3, r3, #28
 8003cc8:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	041b      	lsls	r3, r3, #16
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	061b      	lsls	r3, r3, #24
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	071b      	lsls	r3, r3, #28
 8003cf8:	4919      	ldr	r1, [pc, #100]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a16      	ldr	r2, [pc, #88]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd ffb0 	bl	8001c70 <HAL_GetTick>
 8003d10:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d12:	e008      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d14:	f7fd ffac 	bl	8001c70 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b64      	cmp	r3, #100	; 0x64
 8003d20:	d901      	bls.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e0d7      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d0f0      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	f040 80cd 	bne.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d3a:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a08      	ldr	r2, [pc, #32]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d46:	f7fd ff93 	bl	8001c70 <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d4c:	e00a      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d4e:	f7fd ff8f 	bl	8001c70 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	; 0x64
 8003d5a:	d903      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e0ba      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d60:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d64:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d70:	d0ed      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d02e      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d12a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	0c1b      	lsrs	r3, r3, #16
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003da8:	4b4d      	ldr	r3, [pc, #308]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	0f1b      	lsrs	r3, r3, #28
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	019a      	lsls	r2, r3, #6
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	041b      	lsls	r3, r3, #16
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	061b      	lsls	r3, r3, #24
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	071b      	lsls	r3, r3, #28
 8003dce:	4944      	ldr	r1, [pc, #272]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003dd6:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ddc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de4:	3b01      	subs	r3, #1
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	493d      	ldr	r1, [pc, #244]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d022      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e04:	d11d      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e06:	4b36      	ldr	r3, [pc, #216]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	0e1b      	lsrs	r3, r3, #24
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e14:	4b32      	ldr	r3, [pc, #200]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e1a:	0f1b      	lsrs	r3, r3, #28
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	019a      	lsls	r2, r3, #6
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	041b      	lsls	r3, r3, #16
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	061b      	lsls	r3, r3, #24
 8003e34:	431a      	orrs	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	071b      	lsls	r3, r3, #28
 8003e3a:	4929      	ldr	r1, [pc, #164]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	0e1b      	lsrs	r3, r3, #24
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e62:	0c1b      	lsrs	r3, r3, #16
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	019a      	lsls	r2, r3, #6
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	041b      	lsls	r3, r3, #16
 8003e74:	431a      	orrs	r2, r3
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69db      	ldr	r3, [r3, #28]
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	4917      	ldr	r1, [pc, #92]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	4911      	ldr	r1, [pc, #68]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eac:	f7fd fee0 	bl	8001c70 <HAL_GetTick>
 8003eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003eb4:	f7fd fedc 	bl	8001c70 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	; 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e007      	b.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ed2:	d1ef      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e040      	b.n	8003f78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd fc6a 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2224      	movs	r2, #36	; 0x24
 8003f10:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8b0 	bl	8004088 <UART_SetConfig>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e022      	b.n	8003f78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fb08 	bl	8004550 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fb8f 	bl	8004694 <UART_CheckIdleState>
 8003f76:	4603      	mov	r3, r0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d171      	bne.n	800407c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Transmit+0x24>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e06a      	b.n	800407e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2221      	movs	r2, #33	; 0x21
 8003fb4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb6:	f7fd fe5b 	bl	8001c70 <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d108      	bne.n	8003fe8 <HAL_UART_Transmit+0x68>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	61bb      	str	r3, [r7, #24]
 8003fe6:	e003      	b.n	8003ff0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff0:	e02c      	b.n	800404c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	2180      	movs	r1, #128	; 0x80
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f000 fb80 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e038      	b.n	800407e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10b      	bne.n	800402a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	3302      	adds	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
 8004028:	e007      	b.n	800403a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	781a      	ldrb	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3301      	adds	r3, #1
 8004038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004052:	b29b      	uxth	r3, r3
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1cc      	bne.n	8003ff2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	2200      	movs	r2, #0
 8004060:	2140      	movs	r1, #64	; 0x40
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fb4d 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e005      	b.n	800407e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b088      	sub	sp, #32
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4ba6      	ldr	r3, [pc, #664]	; (800434c <UART_SetConfig+0x2c4>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6812      	ldr	r2, [r2, #0]
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	430b      	orrs	r3, r1
 80040be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a94      	ldr	r2, [pc, #592]	; (8004350 <UART_SetConfig+0x2c8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d120      	bne.n	8004146 <UART_SetConfig+0xbe>
 8004104:	4b93      	ldr	r3, [pc, #588]	; (8004354 <UART_SetConfig+0x2cc>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b03      	cmp	r3, #3
 8004110:	d816      	bhi.n	8004140 <UART_SetConfig+0xb8>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <UART_SetConfig+0x90>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	08004135 	.word	0x08004135
 8004120:	0800412f 	.word	0x0800412f
 8004124:	0800413b 	.word	0x0800413b
 8004128:	2301      	movs	r3, #1
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e150      	b.n	80043d0 <UART_SetConfig+0x348>
 800412e:	2302      	movs	r3, #2
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e14d      	b.n	80043d0 <UART_SetConfig+0x348>
 8004134:	2304      	movs	r3, #4
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e14a      	b.n	80043d0 <UART_SetConfig+0x348>
 800413a:	2308      	movs	r3, #8
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e147      	b.n	80043d0 <UART_SetConfig+0x348>
 8004140:	2310      	movs	r3, #16
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e144      	b.n	80043d0 <UART_SetConfig+0x348>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a83      	ldr	r2, [pc, #524]	; (8004358 <UART_SetConfig+0x2d0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d132      	bne.n	80041b6 <UART_SetConfig+0x12e>
 8004150:	4b80      	ldr	r3, [pc, #512]	; (8004354 <UART_SetConfig+0x2cc>)
 8004152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d828      	bhi.n	80041b0 <UART_SetConfig+0x128>
 800415e:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <UART_SetConfig+0xdc>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004199 	.word	0x08004199
 8004168:	080041b1 	.word	0x080041b1
 800416c:	080041b1 	.word	0x080041b1
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041a5 	.word	0x080041a5
 8004178:	080041b1 	.word	0x080041b1
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041b1 	.word	0x080041b1
 8004184:	0800419f 	.word	0x0800419f
 8004188:	080041b1 	.word	0x080041b1
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b1 	.word	0x080041b1
 8004194:	080041ab 	.word	0x080041ab
 8004198:	2300      	movs	r3, #0
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e118      	b.n	80043d0 <UART_SetConfig+0x348>
 800419e:	2302      	movs	r3, #2
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e115      	b.n	80043d0 <UART_SetConfig+0x348>
 80041a4:	2304      	movs	r3, #4
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e112      	b.n	80043d0 <UART_SetConfig+0x348>
 80041aa:	2308      	movs	r3, #8
 80041ac:	77fb      	strb	r3, [r7, #31]
 80041ae:	e10f      	b.n	80043d0 <UART_SetConfig+0x348>
 80041b0:	2310      	movs	r3, #16
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e10c      	b.n	80043d0 <UART_SetConfig+0x348>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a68      	ldr	r2, [pc, #416]	; (800435c <UART_SetConfig+0x2d4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d120      	bne.n	8004202 <UART_SetConfig+0x17a>
 80041c0:	4b64      	ldr	r3, [pc, #400]	; (8004354 <UART_SetConfig+0x2cc>)
 80041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041ca:	2b30      	cmp	r3, #48	; 0x30
 80041cc:	d013      	beq.n	80041f6 <UART_SetConfig+0x16e>
 80041ce:	2b30      	cmp	r3, #48	; 0x30
 80041d0:	d814      	bhi.n	80041fc <UART_SetConfig+0x174>
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d009      	beq.n	80041ea <UART_SetConfig+0x162>
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d810      	bhi.n	80041fc <UART_SetConfig+0x174>
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <UART_SetConfig+0x15c>
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d006      	beq.n	80041f0 <UART_SetConfig+0x168>
 80041e2:	e00b      	b.n	80041fc <UART_SetConfig+0x174>
 80041e4:	2300      	movs	r3, #0
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e0f2      	b.n	80043d0 <UART_SetConfig+0x348>
 80041ea:	2302      	movs	r3, #2
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e0ef      	b.n	80043d0 <UART_SetConfig+0x348>
 80041f0:	2304      	movs	r3, #4
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e0ec      	b.n	80043d0 <UART_SetConfig+0x348>
 80041f6:	2308      	movs	r3, #8
 80041f8:	77fb      	strb	r3, [r7, #31]
 80041fa:	e0e9      	b.n	80043d0 <UART_SetConfig+0x348>
 80041fc:	2310      	movs	r3, #16
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e0e6      	b.n	80043d0 <UART_SetConfig+0x348>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a56      	ldr	r2, [pc, #344]	; (8004360 <UART_SetConfig+0x2d8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d120      	bne.n	800424e <UART_SetConfig+0x1c6>
 800420c:	4b51      	ldr	r3, [pc, #324]	; (8004354 <UART_SetConfig+0x2cc>)
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004216:	2bc0      	cmp	r3, #192	; 0xc0
 8004218:	d013      	beq.n	8004242 <UART_SetConfig+0x1ba>
 800421a:	2bc0      	cmp	r3, #192	; 0xc0
 800421c:	d814      	bhi.n	8004248 <UART_SetConfig+0x1c0>
 800421e:	2b80      	cmp	r3, #128	; 0x80
 8004220:	d009      	beq.n	8004236 <UART_SetConfig+0x1ae>
 8004222:	2b80      	cmp	r3, #128	; 0x80
 8004224:	d810      	bhi.n	8004248 <UART_SetConfig+0x1c0>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <UART_SetConfig+0x1a8>
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d006      	beq.n	800423c <UART_SetConfig+0x1b4>
 800422e:	e00b      	b.n	8004248 <UART_SetConfig+0x1c0>
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e0cc      	b.n	80043d0 <UART_SetConfig+0x348>
 8004236:	2302      	movs	r3, #2
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e0c9      	b.n	80043d0 <UART_SetConfig+0x348>
 800423c:	2304      	movs	r3, #4
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e0c6      	b.n	80043d0 <UART_SetConfig+0x348>
 8004242:	2308      	movs	r3, #8
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e0c3      	b.n	80043d0 <UART_SetConfig+0x348>
 8004248:	2310      	movs	r3, #16
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e0c0      	b.n	80043d0 <UART_SetConfig+0x348>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a44      	ldr	r2, [pc, #272]	; (8004364 <UART_SetConfig+0x2dc>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d125      	bne.n	80042a4 <UART_SetConfig+0x21c>
 8004258:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <UART_SetConfig+0x2cc>)
 800425a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004266:	d017      	beq.n	8004298 <UART_SetConfig+0x210>
 8004268:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800426c:	d817      	bhi.n	800429e <UART_SetConfig+0x216>
 800426e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004272:	d00b      	beq.n	800428c <UART_SetConfig+0x204>
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d811      	bhi.n	800429e <UART_SetConfig+0x216>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <UART_SetConfig+0x1fe>
 800427e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004282:	d006      	beq.n	8004292 <UART_SetConfig+0x20a>
 8004284:	e00b      	b.n	800429e <UART_SetConfig+0x216>
 8004286:	2300      	movs	r3, #0
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e0a1      	b.n	80043d0 <UART_SetConfig+0x348>
 800428c:	2302      	movs	r3, #2
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e09e      	b.n	80043d0 <UART_SetConfig+0x348>
 8004292:	2304      	movs	r3, #4
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e09b      	b.n	80043d0 <UART_SetConfig+0x348>
 8004298:	2308      	movs	r3, #8
 800429a:	77fb      	strb	r3, [r7, #31]
 800429c:	e098      	b.n	80043d0 <UART_SetConfig+0x348>
 800429e:	2310      	movs	r3, #16
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e095      	b.n	80043d0 <UART_SetConfig+0x348>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2f      	ldr	r2, [pc, #188]	; (8004368 <UART_SetConfig+0x2e0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d125      	bne.n	80042fa <UART_SetConfig+0x272>
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <UART_SetConfig+0x2cc>)
 80042b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042bc:	d017      	beq.n	80042ee <UART_SetConfig+0x266>
 80042be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042c2:	d817      	bhi.n	80042f4 <UART_SetConfig+0x26c>
 80042c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c8:	d00b      	beq.n	80042e2 <UART_SetConfig+0x25a>
 80042ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ce:	d811      	bhi.n	80042f4 <UART_SetConfig+0x26c>
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d003      	beq.n	80042dc <UART_SetConfig+0x254>
 80042d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042d8:	d006      	beq.n	80042e8 <UART_SetConfig+0x260>
 80042da:	e00b      	b.n	80042f4 <UART_SetConfig+0x26c>
 80042dc:	2301      	movs	r3, #1
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e076      	b.n	80043d0 <UART_SetConfig+0x348>
 80042e2:	2302      	movs	r3, #2
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e073      	b.n	80043d0 <UART_SetConfig+0x348>
 80042e8:	2304      	movs	r3, #4
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e070      	b.n	80043d0 <UART_SetConfig+0x348>
 80042ee:	2308      	movs	r3, #8
 80042f0:	77fb      	strb	r3, [r7, #31]
 80042f2:	e06d      	b.n	80043d0 <UART_SetConfig+0x348>
 80042f4:	2310      	movs	r3, #16
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e06a      	b.n	80043d0 <UART_SetConfig+0x348>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <UART_SetConfig+0x2e4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d138      	bne.n	8004376 <UART_SetConfig+0x2ee>
 8004304:	4b13      	ldr	r3, [pc, #76]	; (8004354 <UART_SetConfig+0x2cc>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800430e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004312:	d017      	beq.n	8004344 <UART_SetConfig+0x2bc>
 8004314:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004318:	d82a      	bhi.n	8004370 <UART_SetConfig+0x2e8>
 800431a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800431e:	d00b      	beq.n	8004338 <UART_SetConfig+0x2b0>
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d824      	bhi.n	8004370 <UART_SetConfig+0x2e8>
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <UART_SetConfig+0x2aa>
 800432a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800432e:	d006      	beq.n	800433e <UART_SetConfig+0x2b6>
 8004330:	e01e      	b.n	8004370 <UART_SetConfig+0x2e8>
 8004332:	2300      	movs	r3, #0
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e04b      	b.n	80043d0 <UART_SetConfig+0x348>
 8004338:	2302      	movs	r3, #2
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e048      	b.n	80043d0 <UART_SetConfig+0x348>
 800433e:	2304      	movs	r3, #4
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e045      	b.n	80043d0 <UART_SetConfig+0x348>
 8004344:	2308      	movs	r3, #8
 8004346:	77fb      	strb	r3, [r7, #31]
 8004348:	e042      	b.n	80043d0 <UART_SetConfig+0x348>
 800434a:	bf00      	nop
 800434c:	efff69f3 	.word	0xefff69f3
 8004350:	40011000 	.word	0x40011000
 8004354:	40023800 	.word	0x40023800
 8004358:	40004400 	.word	0x40004400
 800435c:	40004800 	.word	0x40004800
 8004360:	40004c00 	.word	0x40004c00
 8004364:	40005000 	.word	0x40005000
 8004368:	40011400 	.word	0x40011400
 800436c:	40007800 	.word	0x40007800
 8004370:	2310      	movs	r3, #16
 8004372:	77fb      	strb	r3, [r7, #31]
 8004374:	e02c      	b.n	80043d0 <UART_SetConfig+0x348>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a72      	ldr	r2, [pc, #456]	; (8004544 <UART_SetConfig+0x4bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d125      	bne.n	80043cc <UART_SetConfig+0x344>
 8004380:	4b71      	ldr	r3, [pc, #452]	; (8004548 <UART_SetConfig+0x4c0>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800438a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800438e:	d017      	beq.n	80043c0 <UART_SetConfig+0x338>
 8004390:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004394:	d817      	bhi.n	80043c6 <UART_SetConfig+0x33e>
 8004396:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439a:	d00b      	beq.n	80043b4 <UART_SetConfig+0x32c>
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	d811      	bhi.n	80043c6 <UART_SetConfig+0x33e>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <UART_SetConfig+0x326>
 80043a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043aa:	d006      	beq.n	80043ba <UART_SetConfig+0x332>
 80043ac:	e00b      	b.n	80043c6 <UART_SetConfig+0x33e>
 80043ae:	2300      	movs	r3, #0
 80043b0:	77fb      	strb	r3, [r7, #31]
 80043b2:	e00d      	b.n	80043d0 <UART_SetConfig+0x348>
 80043b4:	2302      	movs	r3, #2
 80043b6:	77fb      	strb	r3, [r7, #31]
 80043b8:	e00a      	b.n	80043d0 <UART_SetConfig+0x348>
 80043ba:	2304      	movs	r3, #4
 80043bc:	77fb      	strb	r3, [r7, #31]
 80043be:	e007      	b.n	80043d0 <UART_SetConfig+0x348>
 80043c0:	2308      	movs	r3, #8
 80043c2:	77fb      	strb	r3, [r7, #31]
 80043c4:	e004      	b.n	80043d0 <UART_SetConfig+0x348>
 80043c6:	2310      	movs	r3, #16
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e001      	b.n	80043d0 <UART_SetConfig+0x348>
 80043cc:	2310      	movs	r3, #16
 80043ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043d8:	d15b      	bne.n	8004492 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043da:	7ffb      	ldrb	r3, [r7, #31]
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d828      	bhi.n	8004432 <UART_SetConfig+0x3aa>
 80043e0:	a201      	add	r2, pc, #4	; (adr r2, 80043e8 <UART_SetConfig+0x360>)
 80043e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e6:	bf00      	nop
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	08004415 	.word	0x08004415
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	08004433 	.word	0x08004433
 80043f8:	08004423 	.word	0x08004423
 80043fc:	08004433 	.word	0x08004433
 8004400:	08004433 	.word	0x08004433
 8004404:	08004433 	.word	0x08004433
 8004408:	0800442b 	.word	0x0800442b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800440c:	f7ff f952 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 8004410:	61b8      	str	r0, [r7, #24]
        break;
 8004412:	e013      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7ff f962 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e00f      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b4b      	ldr	r3, [pc, #300]	; (800454c <UART_SetConfig+0x4c4>)
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e00c      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7ff f875 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 8004426:	61b8      	str	r0, [r7, #24]
        break;
 8004428:	e008      	b.n	800443c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442e:	61bb      	str	r3, [r7, #24]
        break;
 8004430:	e004      	b.n	800443c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77bb      	strb	r3, [r7, #30]
        break;
 800443a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d074      	beq.n	800452c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	005a      	lsls	r2, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	441a      	add	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	fbb2 f3f3 	udiv	r3, r2, r3
 8004456:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	2b0f      	cmp	r3, #15
 800445c:	d916      	bls.n	800448c <UART_SetConfig+0x404>
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004464:	d212      	bcs.n	800448c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f023 030f 	bic.w	r3, r3, #15
 800446e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	085b      	lsrs	r3, r3, #1
 8004474:	b29b      	uxth	r3, r3
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	b29a      	uxth	r2, r3
 800447c:	89fb      	ldrh	r3, [r7, #14]
 800447e:	4313      	orrs	r3, r2
 8004480:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	89fa      	ldrh	r2, [r7, #14]
 8004488:	60da      	str	r2, [r3, #12]
 800448a:	e04f      	b.n	800452c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	77bb      	strb	r3, [r7, #30]
 8004490:	e04c      	b.n	800452c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004492:	7ffb      	ldrb	r3, [r7, #31]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d828      	bhi.n	80044ea <UART_SetConfig+0x462>
 8004498:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <UART_SetConfig+0x418>)
 800449a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800449e:	bf00      	nop
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044eb 	.word	0x080044eb
 80044b0:	080044db 	.word	0x080044db
 80044b4:	080044eb 	.word	0x080044eb
 80044b8:	080044eb 	.word	0x080044eb
 80044bc:	080044eb 	.word	0x080044eb
 80044c0:	080044e3 	.word	0x080044e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7ff f8f6 	bl	80036b4 <HAL_RCC_GetPCLK1Freq>
 80044c8:	61b8      	str	r0, [r7, #24]
        break;
 80044ca:	e013      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044cc:	f7ff f906 	bl	80036dc <HAL_RCC_GetPCLK2Freq>
 80044d0:	61b8      	str	r0, [r7, #24]
        break;
 80044d2:	e00f      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d4:	4b1d      	ldr	r3, [pc, #116]	; (800454c <UART_SetConfig+0x4c4>)
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e00c      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044da:	f7ff f819 	bl	8003510 <HAL_RCC_GetSysClockFreq>
 80044de:	61b8      	str	r0, [r7, #24]
        break;
 80044e0:	e008      	b.n	80044f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	61bb      	str	r3, [r7, #24]
        break;
 80044e8:	e004      	b.n	80044f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	77bb      	strb	r3, [r7, #30]
        break;
 80044f2:	bf00      	nop
    }

    if (pclk != 0U)
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d018      	beq.n	800452c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	085a      	lsrs	r2, r3, #1
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	441a      	add	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	fbb2 f3f3 	udiv	r3, r2, r3
 800450c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d909      	bls.n	8004528 <UART_SetConfig+0x4a0>
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800451a:	d205      	bcs.n	8004528 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e001      	b.n	800452c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004538:	7fbb      	ldrb	r3, [r7, #30]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	40007c00 	.word	0x40007c00
 8004548:	40023800 	.word	0x40023800
 800454c:	00f42400 	.word	0x00f42400

08004550 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00a      	beq.n	800457a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00a      	beq.n	80045be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	f003 0308 	and.w	r3, r3, #8
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	430a      	orrs	r2, r1
 8004600:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	f003 0320 	and.w	r3, r3, #32
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b00      	cmp	r3, #0
 800462e:	d01a      	beq.n	8004666 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800464e:	d10a      	bne.n	8004666 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af02      	add	r7, sp, #8
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046a4:	f7fd fae4 	bl	8001c70 <HAL_GetTick>
 80046a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d10e      	bne.n	80046d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f81b 	bl	8004702 <UART_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e011      	b.n	80046fa <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b09c      	sub	sp, #112	; 0x70
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	603b      	str	r3, [r7, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004712:	e0a7      	b.n	8004864 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800471a:	f000 80a3 	beq.w	8004864 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800471e:	f7fd faa7 	bl	8001c70 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800472a:	429a      	cmp	r2, r3
 800472c:	d302      	bcc.n	8004734 <UART_WaitOnFlagUntilTimeout+0x32>
 800472e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004730:	2b00      	cmp	r3, #0
 8004732:	d13f      	bne.n	80047b4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800473c:	e853 3f00 	ldrex	r3, [r3]
 8004740:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004748:	667b      	str	r3, [r7, #100]	; 0x64
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004752:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004754:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004756:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004758:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800475a:	e841 2300 	strex	r3, r2, [r1]
 800475e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1e6      	bne.n	8004734 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3308      	adds	r3, #8
 800476c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	f023 0301 	bic.w	r3, r3, #1
 800477c:	663b      	str	r3, [r7, #96]	; 0x60
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004786:	64ba      	str	r2, [r7, #72]	; 0x48
 8004788:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800478c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e5      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e068      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 0304 	and.w	r3, r3, #4
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d050      	beq.n	8004864 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d148      	bne.n	8004864 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047da:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80047f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
 80047fc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e6      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3308      	adds	r3, #8
 8004814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	613b      	str	r3, [r7, #16]
   return(result);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	66bb      	str	r3, [r7, #104]	; 0x68
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3308      	adds	r3, #8
 800482c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800482e:	623a      	str	r2, [r7, #32]
 8004830:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	69f9      	ldr	r1, [r7, #28]
 8004834:	6a3a      	ldr	r2, [r7, #32]
 8004836:	e841 2300 	strex	r3, r2, [r1]
 800483a:	61bb      	str	r3, [r7, #24]
   return(result);
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1e5      	bne.n	800480e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e010      	b.n	8004886 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69da      	ldr	r2, [r3, #28]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4013      	ands	r3, r2
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	bf0c      	ite	eq
 8004874:	2301      	moveq	r3, #1
 8004876:	2300      	movne	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	429a      	cmp	r2, r3
 8004880:	f43f af48 	beq.w	8004714 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3770      	adds	r7, #112	; 0x70
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <__errno>:
 8004890:	4b01      	ldr	r3, [pc, #4]	; (8004898 <__errno+0x8>)
 8004892:	6818      	ldr	r0, [r3, #0]
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c

0800489c <__libc_init_array>:
 800489c:	b570      	push	{r4, r5, r6, lr}
 800489e:	4d0d      	ldr	r5, [pc, #52]	; (80048d4 <__libc_init_array+0x38>)
 80048a0:	4c0d      	ldr	r4, [pc, #52]	; (80048d8 <__libc_init_array+0x3c>)
 80048a2:	1b64      	subs	r4, r4, r5
 80048a4:	10a4      	asrs	r4, r4, #2
 80048a6:	2600      	movs	r6, #0
 80048a8:	42a6      	cmp	r6, r4
 80048aa:	d109      	bne.n	80048c0 <__libc_init_array+0x24>
 80048ac:	4d0b      	ldr	r5, [pc, #44]	; (80048dc <__libc_init_array+0x40>)
 80048ae:	4c0c      	ldr	r4, [pc, #48]	; (80048e0 <__libc_init_array+0x44>)
 80048b0:	f002 ff04 	bl	80076bc <_init>
 80048b4:	1b64      	subs	r4, r4, r5
 80048b6:	10a4      	asrs	r4, r4, #2
 80048b8:	2600      	movs	r6, #0
 80048ba:	42a6      	cmp	r6, r4
 80048bc:	d105      	bne.n	80048ca <__libc_init_array+0x2e>
 80048be:	bd70      	pop	{r4, r5, r6, pc}
 80048c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c4:	4798      	blx	r3
 80048c6:	3601      	adds	r6, #1
 80048c8:	e7ee      	b.n	80048a8 <__libc_init_array+0xc>
 80048ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ce:	4798      	blx	r3
 80048d0:	3601      	adds	r6, #1
 80048d2:	e7f2      	b.n	80048ba <__libc_init_array+0x1e>
 80048d4:	08007b04 	.word	0x08007b04
 80048d8:	08007b04 	.word	0x08007b04
 80048dc:	08007b04 	.word	0x08007b04
 80048e0:	08007b08 	.word	0x08007b08

080048e4 <memcpy>:
 80048e4:	440a      	add	r2, r1
 80048e6:	4291      	cmp	r1, r2
 80048e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048ec:	d100      	bne.n	80048f0 <memcpy+0xc>
 80048ee:	4770      	bx	lr
 80048f0:	b510      	push	{r4, lr}
 80048f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048fa:	4291      	cmp	r1, r2
 80048fc:	d1f9      	bne.n	80048f2 <memcpy+0xe>
 80048fe:	bd10      	pop	{r4, pc}

08004900 <memset>:
 8004900:	4402      	add	r2, r0
 8004902:	4603      	mov	r3, r0
 8004904:	4293      	cmp	r3, r2
 8004906:	d100      	bne.n	800490a <memset+0xa>
 8004908:	4770      	bx	lr
 800490a:	f803 1b01 	strb.w	r1, [r3], #1
 800490e:	e7f9      	b.n	8004904 <memset+0x4>

08004910 <__cvt>:
 8004910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004914:	ec55 4b10 	vmov	r4, r5, d0
 8004918:	2d00      	cmp	r5, #0
 800491a:	460e      	mov	r6, r1
 800491c:	4619      	mov	r1, r3
 800491e:	462b      	mov	r3, r5
 8004920:	bfbb      	ittet	lt
 8004922:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004926:	461d      	movlt	r5, r3
 8004928:	2300      	movge	r3, #0
 800492a:	232d      	movlt	r3, #45	; 0x2d
 800492c:	700b      	strb	r3, [r1, #0]
 800492e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004930:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004934:	4691      	mov	r9, r2
 8004936:	f023 0820 	bic.w	r8, r3, #32
 800493a:	bfbc      	itt	lt
 800493c:	4622      	movlt	r2, r4
 800493e:	4614      	movlt	r4, r2
 8004940:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004944:	d005      	beq.n	8004952 <__cvt+0x42>
 8004946:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800494a:	d100      	bne.n	800494e <__cvt+0x3e>
 800494c:	3601      	adds	r6, #1
 800494e:	2102      	movs	r1, #2
 8004950:	e000      	b.n	8004954 <__cvt+0x44>
 8004952:	2103      	movs	r1, #3
 8004954:	ab03      	add	r3, sp, #12
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	ab02      	add	r3, sp, #8
 800495a:	9300      	str	r3, [sp, #0]
 800495c:	ec45 4b10 	vmov	d0, r4, r5
 8004960:	4653      	mov	r3, sl
 8004962:	4632      	mov	r2, r6
 8004964:	f000 fcec 	bl	8005340 <_dtoa_r>
 8004968:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800496c:	4607      	mov	r7, r0
 800496e:	d102      	bne.n	8004976 <__cvt+0x66>
 8004970:	f019 0f01 	tst.w	r9, #1
 8004974:	d022      	beq.n	80049bc <__cvt+0xac>
 8004976:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800497a:	eb07 0906 	add.w	r9, r7, r6
 800497e:	d110      	bne.n	80049a2 <__cvt+0x92>
 8004980:	783b      	ldrb	r3, [r7, #0]
 8004982:	2b30      	cmp	r3, #48	; 0x30
 8004984:	d10a      	bne.n	800499c <__cvt+0x8c>
 8004986:	2200      	movs	r2, #0
 8004988:	2300      	movs	r3, #0
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f7fc f8bb 	bl	8000b08 <__aeabi_dcmpeq>
 8004992:	b918      	cbnz	r0, 800499c <__cvt+0x8c>
 8004994:	f1c6 0601 	rsb	r6, r6, #1
 8004998:	f8ca 6000 	str.w	r6, [sl]
 800499c:	f8da 3000 	ldr.w	r3, [sl]
 80049a0:	4499      	add	r9, r3
 80049a2:	2200      	movs	r2, #0
 80049a4:	2300      	movs	r3, #0
 80049a6:	4620      	mov	r0, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	f7fc f8ad 	bl	8000b08 <__aeabi_dcmpeq>
 80049ae:	b108      	cbz	r0, 80049b4 <__cvt+0xa4>
 80049b0:	f8cd 900c 	str.w	r9, [sp, #12]
 80049b4:	2230      	movs	r2, #48	; 0x30
 80049b6:	9b03      	ldr	r3, [sp, #12]
 80049b8:	454b      	cmp	r3, r9
 80049ba:	d307      	bcc.n	80049cc <__cvt+0xbc>
 80049bc:	9b03      	ldr	r3, [sp, #12]
 80049be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049c0:	1bdb      	subs	r3, r3, r7
 80049c2:	4638      	mov	r0, r7
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	b004      	add	sp, #16
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	9103      	str	r1, [sp, #12]
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e7f0      	b.n	80049b6 <__cvt+0xa6>

080049d4 <__exponent>:
 80049d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049d6:	4603      	mov	r3, r0
 80049d8:	2900      	cmp	r1, #0
 80049da:	bfb8      	it	lt
 80049dc:	4249      	neglt	r1, r1
 80049de:	f803 2b02 	strb.w	r2, [r3], #2
 80049e2:	bfb4      	ite	lt
 80049e4:	222d      	movlt	r2, #45	; 0x2d
 80049e6:	222b      	movge	r2, #43	; 0x2b
 80049e8:	2909      	cmp	r1, #9
 80049ea:	7042      	strb	r2, [r0, #1]
 80049ec:	dd2a      	ble.n	8004a44 <__exponent+0x70>
 80049ee:	f10d 0407 	add.w	r4, sp, #7
 80049f2:	46a4      	mov	ip, r4
 80049f4:	270a      	movs	r7, #10
 80049f6:	46a6      	mov	lr, r4
 80049f8:	460a      	mov	r2, r1
 80049fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80049fe:	fb07 1516 	mls	r5, r7, r6, r1
 8004a02:	3530      	adds	r5, #48	; 0x30
 8004a04:	2a63      	cmp	r2, #99	; 0x63
 8004a06:	f104 34ff 	add.w	r4, r4, #4294967295
 8004a0a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004a0e:	4631      	mov	r1, r6
 8004a10:	dcf1      	bgt.n	80049f6 <__exponent+0x22>
 8004a12:	3130      	adds	r1, #48	; 0x30
 8004a14:	f1ae 0502 	sub.w	r5, lr, #2
 8004a18:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004a1c:	1c44      	adds	r4, r0, #1
 8004a1e:	4629      	mov	r1, r5
 8004a20:	4561      	cmp	r1, ip
 8004a22:	d30a      	bcc.n	8004a3a <__exponent+0x66>
 8004a24:	f10d 0209 	add.w	r2, sp, #9
 8004a28:	eba2 020e 	sub.w	r2, r2, lr
 8004a2c:	4565      	cmp	r5, ip
 8004a2e:	bf88      	it	hi
 8004a30:	2200      	movhi	r2, #0
 8004a32:	4413      	add	r3, r2
 8004a34:	1a18      	subs	r0, r3, r0
 8004a36:	b003      	add	sp, #12
 8004a38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004a42:	e7ed      	b.n	8004a20 <__exponent+0x4c>
 8004a44:	2330      	movs	r3, #48	; 0x30
 8004a46:	3130      	adds	r1, #48	; 0x30
 8004a48:	7083      	strb	r3, [r0, #2]
 8004a4a:	70c1      	strb	r1, [r0, #3]
 8004a4c:	1d03      	adds	r3, r0, #4
 8004a4e:	e7f1      	b.n	8004a34 <__exponent+0x60>

08004a50 <_printf_float>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ed2d 8b02 	vpush	{d8}
 8004a58:	b08d      	sub	sp, #52	; 0x34
 8004a5a:	460c      	mov	r4, r1
 8004a5c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a60:	4616      	mov	r6, r2
 8004a62:	461f      	mov	r7, r3
 8004a64:	4605      	mov	r5, r0
 8004a66:	f001 fa59 	bl	8005f1c <_localeconv_r>
 8004a6a:	f8d0 a000 	ldr.w	sl, [r0]
 8004a6e:	4650      	mov	r0, sl
 8004a70:	f7fb fbce 	bl	8000210 <strlen>
 8004a74:	2300      	movs	r3, #0
 8004a76:	930a      	str	r3, [sp, #40]	; 0x28
 8004a78:	6823      	ldr	r3, [r4, #0]
 8004a7a:	9305      	str	r3, [sp, #20]
 8004a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004a80:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a84:	3307      	adds	r3, #7
 8004a86:	f023 0307 	bic.w	r3, r3, #7
 8004a8a:	f103 0208 	add.w	r2, r3, #8
 8004a8e:	f8c8 2000 	str.w	r2, [r8]
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a9a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a9e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004aa2:	9307      	str	r3, [sp, #28]
 8004aa4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004aa8:	ee08 0a10 	vmov	s16, r0
 8004aac:	4b9f      	ldr	r3, [pc, #636]	; (8004d2c <_printf_float+0x2dc>)
 8004aae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	f7fc f859 	bl	8000b6c <__aeabi_dcmpun>
 8004aba:	bb88      	cbnz	r0, 8004b20 <_printf_float+0xd0>
 8004abc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ac0:	4b9a      	ldr	r3, [pc, #616]	; (8004d2c <_printf_float+0x2dc>)
 8004ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac6:	f7fc f833 	bl	8000b30 <__aeabi_dcmple>
 8004aca:	bb48      	cbnz	r0, 8004b20 <_printf_float+0xd0>
 8004acc:	2200      	movs	r2, #0
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4640      	mov	r0, r8
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	f7fc f822 	bl	8000b1c <__aeabi_dcmplt>
 8004ad8:	b110      	cbz	r0, 8004ae0 <_printf_float+0x90>
 8004ada:	232d      	movs	r3, #45	; 0x2d
 8004adc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae0:	4b93      	ldr	r3, [pc, #588]	; (8004d30 <_printf_float+0x2e0>)
 8004ae2:	4894      	ldr	r0, [pc, #592]	; (8004d34 <_printf_float+0x2e4>)
 8004ae4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ae8:	bf94      	ite	ls
 8004aea:	4698      	movls	r8, r3
 8004aec:	4680      	movhi	r8, r0
 8004aee:	2303      	movs	r3, #3
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	9b05      	ldr	r3, [sp, #20]
 8004af4:	f023 0204 	bic.w	r2, r3, #4
 8004af8:	6022      	str	r2, [r4, #0]
 8004afa:	f04f 0900 	mov.w	r9, #0
 8004afe:	9700      	str	r7, [sp, #0]
 8004b00:	4633      	mov	r3, r6
 8004b02:	aa0b      	add	r2, sp, #44	; 0x2c
 8004b04:	4621      	mov	r1, r4
 8004b06:	4628      	mov	r0, r5
 8004b08:	f000 f9d8 	bl	8004ebc <_printf_common>
 8004b0c:	3001      	adds	r0, #1
 8004b0e:	f040 8090 	bne.w	8004c32 <_printf_float+0x1e2>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	b00d      	add	sp, #52	; 0x34
 8004b18:	ecbd 8b02 	vpop	{d8}
 8004b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b20:	4642      	mov	r2, r8
 8004b22:	464b      	mov	r3, r9
 8004b24:	4640      	mov	r0, r8
 8004b26:	4649      	mov	r1, r9
 8004b28:	f7fc f820 	bl	8000b6c <__aeabi_dcmpun>
 8004b2c:	b140      	cbz	r0, 8004b40 <_printf_float+0xf0>
 8004b2e:	464b      	mov	r3, r9
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bfbc      	itt	lt
 8004b34:	232d      	movlt	r3, #45	; 0x2d
 8004b36:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b3a:	487f      	ldr	r0, [pc, #508]	; (8004d38 <_printf_float+0x2e8>)
 8004b3c:	4b7f      	ldr	r3, [pc, #508]	; (8004d3c <_printf_float+0x2ec>)
 8004b3e:	e7d1      	b.n	8004ae4 <_printf_float+0x94>
 8004b40:	6863      	ldr	r3, [r4, #4]
 8004b42:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b46:	9206      	str	r2, [sp, #24]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	d13f      	bne.n	8004bcc <_printf_float+0x17c>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	6063      	str	r3, [r4, #4]
 8004b50:	9b05      	ldr	r3, [sp, #20]
 8004b52:	6861      	ldr	r1, [r4, #4]
 8004b54:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9303      	str	r3, [sp, #12]
 8004b5c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b5e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b62:	ab09      	add	r3, sp, #36	; 0x24
 8004b64:	ec49 8b10 	vmov	d0, r8, r9
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6022      	str	r2, [r4, #0]
 8004b6c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b70:	4628      	mov	r0, r5
 8004b72:	f7ff fecd 	bl	8004910 <__cvt>
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b7a:	2b47      	cmp	r3, #71	; 0x47
 8004b7c:	4680      	mov	r8, r0
 8004b7e:	d108      	bne.n	8004b92 <_printf_float+0x142>
 8004b80:	1cc8      	adds	r0, r1, #3
 8004b82:	db02      	blt.n	8004b8a <_printf_float+0x13a>
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	4299      	cmp	r1, r3
 8004b88:	dd41      	ble.n	8004c0e <_printf_float+0x1be>
 8004b8a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b8e:	fa5f fb8b 	uxtb.w	fp, fp
 8004b92:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b96:	d820      	bhi.n	8004bda <_printf_float+0x18a>
 8004b98:	3901      	subs	r1, #1
 8004b9a:	465a      	mov	r2, fp
 8004b9c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004ba0:	9109      	str	r1, [sp, #36]	; 0x24
 8004ba2:	f7ff ff17 	bl	80049d4 <__exponent>
 8004ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ba8:	1813      	adds	r3, r2, r0
 8004baa:	2a01      	cmp	r2, #1
 8004bac:	4681      	mov	r9, r0
 8004bae:	6123      	str	r3, [r4, #16]
 8004bb0:	dc02      	bgt.n	8004bb8 <_printf_float+0x168>
 8004bb2:	6822      	ldr	r2, [r4, #0]
 8004bb4:	07d2      	lsls	r2, r2, #31
 8004bb6:	d501      	bpl.n	8004bbc <_printf_float+0x16c>
 8004bb8:	3301      	adds	r3, #1
 8004bba:	6123      	str	r3, [r4, #16]
 8004bbc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d09c      	beq.n	8004afe <_printf_float+0xae>
 8004bc4:	232d      	movs	r3, #45	; 0x2d
 8004bc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bca:	e798      	b.n	8004afe <_printf_float+0xae>
 8004bcc:	9a06      	ldr	r2, [sp, #24]
 8004bce:	2a47      	cmp	r2, #71	; 0x47
 8004bd0:	d1be      	bne.n	8004b50 <_printf_float+0x100>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1bc      	bne.n	8004b50 <_printf_float+0x100>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e7b9      	b.n	8004b4e <_printf_float+0xfe>
 8004bda:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bde:	d118      	bne.n	8004c12 <_printf_float+0x1c2>
 8004be0:	2900      	cmp	r1, #0
 8004be2:	6863      	ldr	r3, [r4, #4]
 8004be4:	dd0b      	ble.n	8004bfe <_printf_float+0x1ae>
 8004be6:	6121      	str	r1, [r4, #16]
 8004be8:	b913      	cbnz	r3, 8004bf0 <_printf_float+0x1a0>
 8004bea:	6822      	ldr	r2, [r4, #0]
 8004bec:	07d0      	lsls	r0, r2, #31
 8004bee:	d502      	bpl.n	8004bf6 <_printf_float+0x1a6>
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	6123      	str	r3, [r4, #16]
 8004bf6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bf8:	f04f 0900 	mov.w	r9, #0
 8004bfc:	e7de      	b.n	8004bbc <_printf_float+0x16c>
 8004bfe:	b913      	cbnz	r3, 8004c06 <_printf_float+0x1b6>
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	07d2      	lsls	r2, r2, #31
 8004c04:	d501      	bpl.n	8004c0a <_printf_float+0x1ba>
 8004c06:	3302      	adds	r3, #2
 8004c08:	e7f4      	b.n	8004bf4 <_printf_float+0x1a4>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e7f2      	b.n	8004bf4 <_printf_float+0x1a4>
 8004c0e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004c12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c14:	4299      	cmp	r1, r3
 8004c16:	db05      	blt.n	8004c24 <_printf_float+0x1d4>
 8004c18:	6823      	ldr	r3, [r4, #0]
 8004c1a:	6121      	str	r1, [r4, #16]
 8004c1c:	07d8      	lsls	r0, r3, #31
 8004c1e:	d5ea      	bpl.n	8004bf6 <_printf_float+0x1a6>
 8004c20:	1c4b      	adds	r3, r1, #1
 8004c22:	e7e7      	b.n	8004bf4 <_printf_float+0x1a4>
 8004c24:	2900      	cmp	r1, #0
 8004c26:	bfd4      	ite	le
 8004c28:	f1c1 0202 	rsble	r2, r1, #2
 8004c2c:	2201      	movgt	r2, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	e7e0      	b.n	8004bf4 <_printf_float+0x1a4>
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	055a      	lsls	r2, r3, #21
 8004c36:	d407      	bmi.n	8004c48 <_printf_float+0x1f8>
 8004c38:	6923      	ldr	r3, [r4, #16]
 8004c3a:	4642      	mov	r2, r8
 8004c3c:	4631      	mov	r1, r6
 8004c3e:	4628      	mov	r0, r5
 8004c40:	47b8      	blx	r7
 8004c42:	3001      	adds	r0, #1
 8004c44:	d12c      	bne.n	8004ca0 <_printf_float+0x250>
 8004c46:	e764      	b.n	8004b12 <_printf_float+0xc2>
 8004c48:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c4c:	f240 80e0 	bls.w	8004e10 <_printf_float+0x3c0>
 8004c50:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c54:	2200      	movs	r2, #0
 8004c56:	2300      	movs	r3, #0
 8004c58:	f7fb ff56 	bl	8000b08 <__aeabi_dcmpeq>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d034      	beq.n	8004cca <_printf_float+0x27a>
 8004c60:	4a37      	ldr	r2, [pc, #220]	; (8004d40 <_printf_float+0x2f0>)
 8004c62:	2301      	movs	r3, #1
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af51 	beq.w	8004b12 <_printf_float+0xc2>
 8004c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c74:	429a      	cmp	r2, r3
 8004c76:	db02      	blt.n	8004c7e <_printf_float+0x22e>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	07d8      	lsls	r0, r3, #31
 8004c7c:	d510      	bpl.n	8004ca0 <_printf_float+0x250>
 8004c7e:	ee18 3a10 	vmov	r3, s16
 8004c82:	4652      	mov	r2, sl
 8004c84:	4631      	mov	r1, r6
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	f43f af41 	beq.w	8004b12 <_printf_float+0xc2>
 8004c90:	f04f 0800 	mov.w	r8, #0
 8004c94:	f104 091a 	add.w	r9, r4, #26
 8004c98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4543      	cmp	r3, r8
 8004c9e:	dc09      	bgt.n	8004cb4 <_printf_float+0x264>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	079b      	lsls	r3, r3, #30
 8004ca4:	f100 8105 	bmi.w	8004eb2 <_printf_float+0x462>
 8004ca8:	68e0      	ldr	r0, [r4, #12]
 8004caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cac:	4298      	cmp	r0, r3
 8004cae:	bfb8      	it	lt
 8004cb0:	4618      	movlt	r0, r3
 8004cb2:	e730      	b.n	8004b16 <_printf_float+0xc6>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	464a      	mov	r2, r9
 8004cb8:	4631      	mov	r1, r6
 8004cba:	4628      	mov	r0, r5
 8004cbc:	47b8      	blx	r7
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	f43f af27 	beq.w	8004b12 <_printf_float+0xc2>
 8004cc4:	f108 0801 	add.w	r8, r8, #1
 8004cc8:	e7e6      	b.n	8004c98 <_printf_float+0x248>
 8004cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	dc39      	bgt.n	8004d44 <_printf_float+0x2f4>
 8004cd0:	4a1b      	ldr	r2, [pc, #108]	; (8004d40 <_printf_float+0x2f0>)
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af19 	beq.w	8004b12 <_printf_float+0xc2>
 8004ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	d102      	bne.n	8004cee <_printf_float+0x29e>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	07d9      	lsls	r1, r3, #31
 8004cec:	d5d8      	bpl.n	8004ca0 <_printf_float+0x250>
 8004cee:	ee18 3a10 	vmov	r3, s16
 8004cf2:	4652      	mov	r2, sl
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	47b8      	blx	r7
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	f43f af09 	beq.w	8004b12 <_printf_float+0xc2>
 8004d00:	f04f 0900 	mov.w	r9, #0
 8004d04:	f104 0a1a 	add.w	sl, r4, #26
 8004d08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d0a:	425b      	negs	r3, r3
 8004d0c:	454b      	cmp	r3, r9
 8004d0e:	dc01      	bgt.n	8004d14 <_printf_float+0x2c4>
 8004d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d12:	e792      	b.n	8004c3a <_printf_float+0x1ea>
 8004d14:	2301      	movs	r3, #1
 8004d16:	4652      	mov	r2, sl
 8004d18:	4631      	mov	r1, r6
 8004d1a:	4628      	mov	r0, r5
 8004d1c:	47b8      	blx	r7
 8004d1e:	3001      	adds	r0, #1
 8004d20:	f43f aef7 	beq.w	8004b12 <_printf_float+0xc2>
 8004d24:	f109 0901 	add.w	r9, r9, #1
 8004d28:	e7ee      	b.n	8004d08 <_printf_float+0x2b8>
 8004d2a:	bf00      	nop
 8004d2c:	7fefffff 	.word	0x7fefffff
 8004d30:	08007724 	.word	0x08007724
 8004d34:	08007728 	.word	0x08007728
 8004d38:	08007730 	.word	0x08007730
 8004d3c:	0800772c 	.word	0x0800772c
 8004d40:	08007734 	.word	0x08007734
 8004d44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	bfa8      	it	ge
 8004d4c:	461a      	movge	r2, r3
 8004d4e:	2a00      	cmp	r2, #0
 8004d50:	4691      	mov	r9, r2
 8004d52:	dc37      	bgt.n	8004dc4 <_printf_float+0x374>
 8004d54:	f04f 0b00 	mov.w	fp, #0
 8004d58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d5c:	f104 021a 	add.w	r2, r4, #26
 8004d60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	eba3 0309 	sub.w	r3, r3, r9
 8004d68:	455b      	cmp	r3, fp
 8004d6a:	dc33      	bgt.n	8004dd4 <_printf_float+0x384>
 8004d6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d70:	429a      	cmp	r2, r3
 8004d72:	db3b      	blt.n	8004dec <_printf_float+0x39c>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	07da      	lsls	r2, r3, #31
 8004d78:	d438      	bmi.n	8004dec <_printf_float+0x39c>
 8004d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d7c:	9a05      	ldr	r2, [sp, #20]
 8004d7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d80:	1a9a      	subs	r2, r3, r2
 8004d82:	eba3 0901 	sub.w	r9, r3, r1
 8004d86:	4591      	cmp	r9, r2
 8004d88:	bfa8      	it	ge
 8004d8a:	4691      	movge	r9, r2
 8004d8c:	f1b9 0f00 	cmp.w	r9, #0
 8004d90:	dc35      	bgt.n	8004dfe <_printf_float+0x3ae>
 8004d92:	f04f 0800 	mov.w	r8, #0
 8004d96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d9a:	f104 0a1a 	add.w	sl, r4, #26
 8004d9e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da2:	1a9b      	subs	r3, r3, r2
 8004da4:	eba3 0309 	sub.w	r3, r3, r9
 8004da8:	4543      	cmp	r3, r8
 8004daa:	f77f af79 	ble.w	8004ca0 <_printf_float+0x250>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f aeaa 	beq.w	8004b12 <_printf_float+0xc2>
 8004dbe:	f108 0801 	add.w	r8, r8, #1
 8004dc2:	e7ec      	b.n	8004d9e <_printf_float+0x34e>
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4642      	mov	r2, r8
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d1c0      	bne.n	8004d54 <_printf_float+0x304>
 8004dd2:	e69e      	b.n	8004b12 <_printf_float+0xc2>
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	9205      	str	r2, [sp, #20]
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	f43f ae97 	beq.w	8004b12 <_printf_float+0xc2>
 8004de4:	9a05      	ldr	r2, [sp, #20]
 8004de6:	f10b 0b01 	add.w	fp, fp, #1
 8004dea:	e7b9      	b.n	8004d60 <_printf_float+0x310>
 8004dec:	ee18 3a10 	vmov	r3, s16
 8004df0:	4652      	mov	r2, sl
 8004df2:	4631      	mov	r1, r6
 8004df4:	4628      	mov	r0, r5
 8004df6:	47b8      	blx	r7
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d1be      	bne.n	8004d7a <_printf_float+0x32a>
 8004dfc:	e689      	b.n	8004b12 <_printf_float+0xc2>
 8004dfe:	9a05      	ldr	r2, [sp, #20]
 8004e00:	464b      	mov	r3, r9
 8004e02:	4442      	add	r2, r8
 8004e04:	4631      	mov	r1, r6
 8004e06:	4628      	mov	r0, r5
 8004e08:	47b8      	blx	r7
 8004e0a:	3001      	adds	r0, #1
 8004e0c:	d1c1      	bne.n	8004d92 <_printf_float+0x342>
 8004e0e:	e680      	b.n	8004b12 <_printf_float+0xc2>
 8004e10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e12:	2a01      	cmp	r2, #1
 8004e14:	dc01      	bgt.n	8004e1a <_printf_float+0x3ca>
 8004e16:	07db      	lsls	r3, r3, #31
 8004e18:	d538      	bpl.n	8004e8c <_printf_float+0x43c>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	f43f ae74 	beq.w	8004b12 <_printf_float+0xc2>
 8004e2a:	ee18 3a10 	vmov	r3, s16
 8004e2e:	4652      	mov	r2, sl
 8004e30:	4631      	mov	r1, r6
 8004e32:	4628      	mov	r0, r5
 8004e34:	47b8      	blx	r7
 8004e36:	3001      	adds	r0, #1
 8004e38:	f43f ae6b 	beq.w	8004b12 <_printf_float+0xc2>
 8004e3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e40:	2200      	movs	r2, #0
 8004e42:	2300      	movs	r3, #0
 8004e44:	f7fb fe60 	bl	8000b08 <__aeabi_dcmpeq>
 8004e48:	b9d8      	cbnz	r0, 8004e82 <_printf_float+0x432>
 8004e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e4c:	f108 0201 	add.w	r2, r8, #1
 8004e50:	3b01      	subs	r3, #1
 8004e52:	4631      	mov	r1, r6
 8004e54:	4628      	mov	r0, r5
 8004e56:	47b8      	blx	r7
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d10e      	bne.n	8004e7a <_printf_float+0x42a>
 8004e5c:	e659      	b.n	8004b12 <_printf_float+0xc2>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	4652      	mov	r2, sl
 8004e62:	4631      	mov	r1, r6
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	f43f ae52 	beq.w	8004b12 <_printf_float+0xc2>
 8004e6e:	f108 0801 	add.w	r8, r8, #1
 8004e72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e74:	3b01      	subs	r3, #1
 8004e76:	4543      	cmp	r3, r8
 8004e78:	dcf1      	bgt.n	8004e5e <_printf_float+0x40e>
 8004e7a:	464b      	mov	r3, r9
 8004e7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e80:	e6dc      	b.n	8004c3c <_printf_float+0x1ec>
 8004e82:	f04f 0800 	mov.w	r8, #0
 8004e86:	f104 0a1a 	add.w	sl, r4, #26
 8004e8a:	e7f2      	b.n	8004e72 <_printf_float+0x422>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	4642      	mov	r2, r8
 8004e90:	e7df      	b.n	8004e52 <_printf_float+0x402>
 8004e92:	2301      	movs	r3, #1
 8004e94:	464a      	mov	r2, r9
 8004e96:	4631      	mov	r1, r6
 8004e98:	4628      	mov	r0, r5
 8004e9a:	47b8      	blx	r7
 8004e9c:	3001      	adds	r0, #1
 8004e9e:	f43f ae38 	beq.w	8004b12 <_printf_float+0xc2>
 8004ea2:	f108 0801 	add.w	r8, r8, #1
 8004ea6:	68e3      	ldr	r3, [r4, #12]
 8004ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004eaa:	1a5b      	subs	r3, r3, r1
 8004eac:	4543      	cmp	r3, r8
 8004eae:	dcf0      	bgt.n	8004e92 <_printf_float+0x442>
 8004eb0:	e6fa      	b.n	8004ca8 <_printf_float+0x258>
 8004eb2:	f04f 0800 	mov.w	r8, #0
 8004eb6:	f104 0919 	add.w	r9, r4, #25
 8004eba:	e7f4      	b.n	8004ea6 <_printf_float+0x456>

08004ebc <_printf_common>:
 8004ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	4616      	mov	r6, r2
 8004ec2:	4699      	mov	r9, r3
 8004ec4:	688a      	ldr	r2, [r1, #8]
 8004ec6:	690b      	ldr	r3, [r1, #16]
 8004ec8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bfb8      	it	lt
 8004ed0:	4613      	movlt	r3, r2
 8004ed2:	6033      	str	r3, [r6, #0]
 8004ed4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ed8:	4607      	mov	r7, r0
 8004eda:	460c      	mov	r4, r1
 8004edc:	b10a      	cbz	r2, 8004ee2 <_printf_common+0x26>
 8004ede:	3301      	adds	r3, #1
 8004ee0:	6033      	str	r3, [r6, #0]
 8004ee2:	6823      	ldr	r3, [r4, #0]
 8004ee4:	0699      	lsls	r1, r3, #26
 8004ee6:	bf42      	ittt	mi
 8004ee8:	6833      	ldrmi	r3, [r6, #0]
 8004eea:	3302      	addmi	r3, #2
 8004eec:	6033      	strmi	r3, [r6, #0]
 8004eee:	6825      	ldr	r5, [r4, #0]
 8004ef0:	f015 0506 	ands.w	r5, r5, #6
 8004ef4:	d106      	bne.n	8004f04 <_printf_common+0x48>
 8004ef6:	f104 0a19 	add.w	sl, r4, #25
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	6832      	ldr	r2, [r6, #0]
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	42ab      	cmp	r3, r5
 8004f02:	dc26      	bgt.n	8004f52 <_printf_common+0x96>
 8004f04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f08:	1e13      	subs	r3, r2, #0
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	bf18      	it	ne
 8004f0e:	2301      	movne	r3, #1
 8004f10:	0692      	lsls	r2, r2, #26
 8004f12:	d42b      	bmi.n	8004f6c <_printf_common+0xb0>
 8004f14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f18:	4649      	mov	r1, r9
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	47c0      	blx	r8
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d01e      	beq.n	8004f60 <_printf_common+0xa4>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	68e5      	ldr	r5, [r4, #12]
 8004f26:	6832      	ldr	r2, [r6, #0]
 8004f28:	f003 0306 	and.w	r3, r3, #6
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	bf08      	it	eq
 8004f30:	1aad      	subeq	r5, r5, r2
 8004f32:	68a3      	ldr	r3, [r4, #8]
 8004f34:	6922      	ldr	r2, [r4, #16]
 8004f36:	bf0c      	ite	eq
 8004f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f3c:	2500      	movne	r5, #0
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	bfc4      	itt	gt
 8004f42:	1a9b      	subgt	r3, r3, r2
 8004f44:	18ed      	addgt	r5, r5, r3
 8004f46:	2600      	movs	r6, #0
 8004f48:	341a      	adds	r4, #26
 8004f4a:	42b5      	cmp	r5, r6
 8004f4c:	d11a      	bne.n	8004f84 <_printf_common+0xc8>
 8004f4e:	2000      	movs	r0, #0
 8004f50:	e008      	b.n	8004f64 <_printf_common+0xa8>
 8004f52:	2301      	movs	r3, #1
 8004f54:	4652      	mov	r2, sl
 8004f56:	4649      	mov	r1, r9
 8004f58:	4638      	mov	r0, r7
 8004f5a:	47c0      	blx	r8
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d103      	bne.n	8004f68 <_printf_common+0xac>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295
 8004f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f68:	3501      	adds	r5, #1
 8004f6a:	e7c6      	b.n	8004efa <_printf_common+0x3e>
 8004f6c:	18e1      	adds	r1, r4, r3
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	2030      	movs	r0, #48	; 0x30
 8004f72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f76:	4422      	add	r2, r4
 8004f78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f80:	3302      	adds	r3, #2
 8004f82:	e7c7      	b.n	8004f14 <_printf_common+0x58>
 8004f84:	2301      	movs	r3, #1
 8004f86:	4622      	mov	r2, r4
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d0e6      	beq.n	8004f60 <_printf_common+0xa4>
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7d9      	b.n	8004f4a <_printf_common+0x8e>
	...

08004f98 <_printf_i>:
 8004f98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f9c:	7e0f      	ldrb	r7, [r1, #24]
 8004f9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fa0:	2f78      	cmp	r7, #120	; 0x78
 8004fa2:	4691      	mov	r9, r2
 8004fa4:	4680      	mov	r8, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	469a      	mov	sl, r3
 8004faa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fae:	d807      	bhi.n	8004fc0 <_printf_i+0x28>
 8004fb0:	2f62      	cmp	r7, #98	; 0x62
 8004fb2:	d80a      	bhi.n	8004fca <_printf_i+0x32>
 8004fb4:	2f00      	cmp	r7, #0
 8004fb6:	f000 80d8 	beq.w	800516a <_printf_i+0x1d2>
 8004fba:	2f58      	cmp	r7, #88	; 0x58
 8004fbc:	f000 80a3 	beq.w	8005106 <_printf_i+0x16e>
 8004fc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fc4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fc8:	e03a      	b.n	8005040 <_printf_i+0xa8>
 8004fca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fce:	2b15      	cmp	r3, #21
 8004fd0:	d8f6      	bhi.n	8004fc0 <_printf_i+0x28>
 8004fd2:	a101      	add	r1, pc, #4	; (adr r1, 8004fd8 <_printf_i+0x40>)
 8004fd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fd8:	08005031 	.word	0x08005031
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	08004fc1 	.word	0x08004fc1
 8004fe4:	08004fc1 	.word	0x08004fc1
 8004fe8:	08004fc1 	.word	0x08004fc1
 8004fec:	08004fc1 	.word	0x08004fc1
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	08004fc1 	.word	0x08004fc1
 8004ff8:	08004fc1 	.word	0x08004fc1
 8004ffc:	08004fc1 	.word	0x08004fc1
 8005000:	08004fc1 	.word	0x08004fc1
 8005004:	08005151 	.word	0x08005151
 8005008:	08005075 	.word	0x08005075
 800500c:	08005133 	.word	0x08005133
 8005010:	08004fc1 	.word	0x08004fc1
 8005014:	08004fc1 	.word	0x08004fc1
 8005018:	08005173 	.word	0x08005173
 800501c:	08004fc1 	.word	0x08004fc1
 8005020:	08005075 	.word	0x08005075
 8005024:	08004fc1 	.word	0x08004fc1
 8005028:	08004fc1 	.word	0x08004fc1
 800502c:	0800513b 	.word	0x0800513b
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	602a      	str	r2, [r5, #0]
 8005038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800503c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005040:	2301      	movs	r3, #1
 8005042:	e0a3      	b.n	800518c <_printf_i+0x1f4>
 8005044:	6820      	ldr	r0, [r4, #0]
 8005046:	6829      	ldr	r1, [r5, #0]
 8005048:	0606      	lsls	r6, r0, #24
 800504a:	f101 0304 	add.w	r3, r1, #4
 800504e:	d50a      	bpl.n	8005066 <_printf_i+0xce>
 8005050:	680e      	ldr	r6, [r1, #0]
 8005052:	602b      	str	r3, [r5, #0]
 8005054:	2e00      	cmp	r6, #0
 8005056:	da03      	bge.n	8005060 <_printf_i+0xc8>
 8005058:	232d      	movs	r3, #45	; 0x2d
 800505a:	4276      	negs	r6, r6
 800505c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005060:	485e      	ldr	r0, [pc, #376]	; (80051dc <_printf_i+0x244>)
 8005062:	230a      	movs	r3, #10
 8005064:	e019      	b.n	800509a <_printf_i+0x102>
 8005066:	680e      	ldr	r6, [r1, #0]
 8005068:	602b      	str	r3, [r5, #0]
 800506a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800506e:	bf18      	it	ne
 8005070:	b236      	sxthne	r6, r6
 8005072:	e7ef      	b.n	8005054 <_printf_i+0xbc>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	1d19      	adds	r1, r3, #4
 800507a:	6029      	str	r1, [r5, #0]
 800507c:	0601      	lsls	r1, r0, #24
 800507e:	d501      	bpl.n	8005084 <_printf_i+0xec>
 8005080:	681e      	ldr	r6, [r3, #0]
 8005082:	e002      	b.n	800508a <_printf_i+0xf2>
 8005084:	0646      	lsls	r6, r0, #25
 8005086:	d5fb      	bpl.n	8005080 <_printf_i+0xe8>
 8005088:	881e      	ldrh	r6, [r3, #0]
 800508a:	4854      	ldr	r0, [pc, #336]	; (80051dc <_printf_i+0x244>)
 800508c:	2f6f      	cmp	r7, #111	; 0x6f
 800508e:	bf0c      	ite	eq
 8005090:	2308      	moveq	r3, #8
 8005092:	230a      	movne	r3, #10
 8005094:	2100      	movs	r1, #0
 8005096:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800509a:	6865      	ldr	r5, [r4, #4]
 800509c:	60a5      	str	r5, [r4, #8]
 800509e:	2d00      	cmp	r5, #0
 80050a0:	bfa2      	ittt	ge
 80050a2:	6821      	ldrge	r1, [r4, #0]
 80050a4:	f021 0104 	bicge.w	r1, r1, #4
 80050a8:	6021      	strge	r1, [r4, #0]
 80050aa:	b90e      	cbnz	r6, 80050b0 <_printf_i+0x118>
 80050ac:	2d00      	cmp	r5, #0
 80050ae:	d04d      	beq.n	800514c <_printf_i+0x1b4>
 80050b0:	4615      	mov	r5, r2
 80050b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80050b6:	fb03 6711 	mls	r7, r3, r1, r6
 80050ba:	5dc7      	ldrb	r7, [r0, r7]
 80050bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050c0:	4637      	mov	r7, r6
 80050c2:	42bb      	cmp	r3, r7
 80050c4:	460e      	mov	r6, r1
 80050c6:	d9f4      	bls.n	80050b2 <_printf_i+0x11a>
 80050c8:	2b08      	cmp	r3, #8
 80050ca:	d10b      	bne.n	80050e4 <_printf_i+0x14c>
 80050cc:	6823      	ldr	r3, [r4, #0]
 80050ce:	07de      	lsls	r6, r3, #31
 80050d0:	d508      	bpl.n	80050e4 <_printf_i+0x14c>
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	6861      	ldr	r1, [r4, #4]
 80050d6:	4299      	cmp	r1, r3
 80050d8:	bfde      	ittt	le
 80050da:	2330      	movle	r3, #48	; 0x30
 80050dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050e4:	1b52      	subs	r2, r2, r5
 80050e6:	6122      	str	r2, [r4, #16]
 80050e8:	f8cd a000 	str.w	sl, [sp]
 80050ec:	464b      	mov	r3, r9
 80050ee:	aa03      	add	r2, sp, #12
 80050f0:	4621      	mov	r1, r4
 80050f2:	4640      	mov	r0, r8
 80050f4:	f7ff fee2 	bl	8004ebc <_printf_common>
 80050f8:	3001      	adds	r0, #1
 80050fa:	d14c      	bne.n	8005196 <_printf_i+0x1fe>
 80050fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005100:	b004      	add	sp, #16
 8005102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005106:	4835      	ldr	r0, [pc, #212]	; (80051dc <_printf_i+0x244>)
 8005108:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800510c:	6829      	ldr	r1, [r5, #0]
 800510e:	6823      	ldr	r3, [r4, #0]
 8005110:	f851 6b04 	ldr.w	r6, [r1], #4
 8005114:	6029      	str	r1, [r5, #0]
 8005116:	061d      	lsls	r5, r3, #24
 8005118:	d514      	bpl.n	8005144 <_printf_i+0x1ac>
 800511a:	07df      	lsls	r7, r3, #31
 800511c:	bf44      	itt	mi
 800511e:	f043 0320 	orrmi.w	r3, r3, #32
 8005122:	6023      	strmi	r3, [r4, #0]
 8005124:	b91e      	cbnz	r6, 800512e <_printf_i+0x196>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	f023 0320 	bic.w	r3, r3, #32
 800512c:	6023      	str	r3, [r4, #0]
 800512e:	2310      	movs	r3, #16
 8005130:	e7b0      	b.n	8005094 <_printf_i+0xfc>
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	f043 0320 	orr.w	r3, r3, #32
 8005138:	6023      	str	r3, [r4, #0]
 800513a:	2378      	movs	r3, #120	; 0x78
 800513c:	4828      	ldr	r0, [pc, #160]	; (80051e0 <_printf_i+0x248>)
 800513e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005142:	e7e3      	b.n	800510c <_printf_i+0x174>
 8005144:	0659      	lsls	r1, r3, #25
 8005146:	bf48      	it	mi
 8005148:	b2b6      	uxthmi	r6, r6
 800514a:	e7e6      	b.n	800511a <_printf_i+0x182>
 800514c:	4615      	mov	r5, r2
 800514e:	e7bb      	b.n	80050c8 <_printf_i+0x130>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	6826      	ldr	r6, [r4, #0]
 8005154:	6961      	ldr	r1, [r4, #20]
 8005156:	1d18      	adds	r0, r3, #4
 8005158:	6028      	str	r0, [r5, #0]
 800515a:	0635      	lsls	r5, r6, #24
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	d501      	bpl.n	8005164 <_printf_i+0x1cc>
 8005160:	6019      	str	r1, [r3, #0]
 8005162:	e002      	b.n	800516a <_printf_i+0x1d2>
 8005164:	0670      	lsls	r0, r6, #25
 8005166:	d5fb      	bpl.n	8005160 <_printf_i+0x1c8>
 8005168:	8019      	strh	r1, [r3, #0]
 800516a:	2300      	movs	r3, #0
 800516c:	6123      	str	r3, [r4, #16]
 800516e:	4615      	mov	r5, r2
 8005170:	e7ba      	b.n	80050e8 <_printf_i+0x150>
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	1d1a      	adds	r2, r3, #4
 8005176:	602a      	str	r2, [r5, #0]
 8005178:	681d      	ldr	r5, [r3, #0]
 800517a:	6862      	ldr	r2, [r4, #4]
 800517c:	2100      	movs	r1, #0
 800517e:	4628      	mov	r0, r5
 8005180:	f7fb f84e 	bl	8000220 <memchr>
 8005184:	b108      	cbz	r0, 800518a <_printf_i+0x1f2>
 8005186:	1b40      	subs	r0, r0, r5
 8005188:	6060      	str	r0, [r4, #4]
 800518a:	6863      	ldr	r3, [r4, #4]
 800518c:	6123      	str	r3, [r4, #16]
 800518e:	2300      	movs	r3, #0
 8005190:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005194:	e7a8      	b.n	80050e8 <_printf_i+0x150>
 8005196:	6923      	ldr	r3, [r4, #16]
 8005198:	462a      	mov	r2, r5
 800519a:	4649      	mov	r1, r9
 800519c:	4640      	mov	r0, r8
 800519e:	47d0      	blx	sl
 80051a0:	3001      	adds	r0, #1
 80051a2:	d0ab      	beq.n	80050fc <_printf_i+0x164>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	079b      	lsls	r3, r3, #30
 80051a8:	d413      	bmi.n	80051d2 <_printf_i+0x23a>
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	9b03      	ldr	r3, [sp, #12]
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bfb8      	it	lt
 80051b2:	4618      	movlt	r0, r3
 80051b4:	e7a4      	b.n	8005100 <_printf_i+0x168>
 80051b6:	2301      	movs	r3, #1
 80051b8:	4632      	mov	r2, r6
 80051ba:	4649      	mov	r1, r9
 80051bc:	4640      	mov	r0, r8
 80051be:	47d0      	blx	sl
 80051c0:	3001      	adds	r0, #1
 80051c2:	d09b      	beq.n	80050fc <_printf_i+0x164>
 80051c4:	3501      	adds	r5, #1
 80051c6:	68e3      	ldr	r3, [r4, #12]
 80051c8:	9903      	ldr	r1, [sp, #12]
 80051ca:	1a5b      	subs	r3, r3, r1
 80051cc:	42ab      	cmp	r3, r5
 80051ce:	dcf2      	bgt.n	80051b6 <_printf_i+0x21e>
 80051d0:	e7eb      	b.n	80051aa <_printf_i+0x212>
 80051d2:	2500      	movs	r5, #0
 80051d4:	f104 0619 	add.w	r6, r4, #25
 80051d8:	e7f5      	b.n	80051c6 <_printf_i+0x22e>
 80051da:	bf00      	nop
 80051dc:	08007736 	.word	0x08007736
 80051e0:	08007747 	.word	0x08007747

080051e4 <siprintf>:
 80051e4:	b40e      	push	{r1, r2, r3}
 80051e6:	b500      	push	{lr}
 80051e8:	b09c      	sub	sp, #112	; 0x70
 80051ea:	ab1d      	add	r3, sp, #116	; 0x74
 80051ec:	9002      	str	r0, [sp, #8]
 80051ee:	9006      	str	r0, [sp, #24]
 80051f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80051f4:	4809      	ldr	r0, [pc, #36]	; (800521c <siprintf+0x38>)
 80051f6:	9107      	str	r1, [sp, #28]
 80051f8:	9104      	str	r1, [sp, #16]
 80051fa:	4909      	ldr	r1, [pc, #36]	; (8005220 <siprintf+0x3c>)
 80051fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005200:	9105      	str	r1, [sp, #20]
 8005202:	6800      	ldr	r0, [r0, #0]
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	a902      	add	r1, sp, #8
 8005208:	f001 fb6a 	bl	80068e0 <_svfiprintf_r>
 800520c:	9b02      	ldr	r3, [sp, #8]
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	b01c      	add	sp, #112	; 0x70
 8005214:	f85d eb04 	ldr.w	lr, [sp], #4
 8005218:	b003      	add	sp, #12
 800521a:	4770      	bx	lr
 800521c:	2000000c 	.word	0x2000000c
 8005220:	ffff0208 	.word	0xffff0208

08005224 <quorem>:
 8005224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005228:	6903      	ldr	r3, [r0, #16]
 800522a:	690c      	ldr	r4, [r1, #16]
 800522c:	42a3      	cmp	r3, r4
 800522e:	4607      	mov	r7, r0
 8005230:	f2c0 8081 	blt.w	8005336 <quorem+0x112>
 8005234:	3c01      	subs	r4, #1
 8005236:	f101 0814 	add.w	r8, r1, #20
 800523a:	f100 0514 	add.w	r5, r0, #20
 800523e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005242:	9301      	str	r3, [sp, #4]
 8005244:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005248:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800524c:	3301      	adds	r3, #1
 800524e:	429a      	cmp	r2, r3
 8005250:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005254:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005258:	fbb2 f6f3 	udiv	r6, r2, r3
 800525c:	d331      	bcc.n	80052c2 <quorem+0x9e>
 800525e:	f04f 0e00 	mov.w	lr, #0
 8005262:	4640      	mov	r0, r8
 8005264:	46ac      	mov	ip, r5
 8005266:	46f2      	mov	sl, lr
 8005268:	f850 2b04 	ldr.w	r2, [r0], #4
 800526c:	b293      	uxth	r3, r2
 800526e:	fb06 e303 	mla	r3, r6, r3, lr
 8005272:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005276:	b29b      	uxth	r3, r3
 8005278:	ebaa 0303 	sub.w	r3, sl, r3
 800527c:	f8dc a000 	ldr.w	sl, [ip]
 8005280:	0c12      	lsrs	r2, r2, #16
 8005282:	fa13 f38a 	uxtah	r3, r3, sl
 8005286:	fb06 e202 	mla	r2, r6, r2, lr
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	9b00      	ldr	r3, [sp, #0]
 800528e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005292:	b292      	uxth	r2, r2
 8005294:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005298:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800529c:	f8bd 3000 	ldrh.w	r3, [sp]
 80052a0:	4581      	cmp	r9, r0
 80052a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052a6:	f84c 3b04 	str.w	r3, [ip], #4
 80052aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80052ae:	d2db      	bcs.n	8005268 <quorem+0x44>
 80052b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80052b4:	b92b      	cbnz	r3, 80052c2 <quorem+0x9e>
 80052b6:	9b01      	ldr	r3, [sp, #4]
 80052b8:	3b04      	subs	r3, #4
 80052ba:	429d      	cmp	r5, r3
 80052bc:	461a      	mov	r2, r3
 80052be:	d32e      	bcc.n	800531e <quorem+0xfa>
 80052c0:	613c      	str	r4, [r7, #16]
 80052c2:	4638      	mov	r0, r7
 80052c4:	f001 f8b8 	bl	8006438 <__mcmp>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	db24      	blt.n	8005316 <quorem+0xf2>
 80052cc:	3601      	adds	r6, #1
 80052ce:	4628      	mov	r0, r5
 80052d0:	f04f 0c00 	mov.w	ip, #0
 80052d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80052d8:	f8d0 e000 	ldr.w	lr, [r0]
 80052dc:	b293      	uxth	r3, r2
 80052de:	ebac 0303 	sub.w	r3, ip, r3
 80052e2:	0c12      	lsrs	r2, r2, #16
 80052e4:	fa13 f38e 	uxtah	r3, r3, lr
 80052e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80052ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80052f6:	45c1      	cmp	r9, r8
 80052f8:	f840 3b04 	str.w	r3, [r0], #4
 80052fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005300:	d2e8      	bcs.n	80052d4 <quorem+0xb0>
 8005302:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005306:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800530a:	b922      	cbnz	r2, 8005316 <quorem+0xf2>
 800530c:	3b04      	subs	r3, #4
 800530e:	429d      	cmp	r5, r3
 8005310:	461a      	mov	r2, r3
 8005312:	d30a      	bcc.n	800532a <quorem+0x106>
 8005314:	613c      	str	r4, [r7, #16]
 8005316:	4630      	mov	r0, r6
 8005318:	b003      	add	sp, #12
 800531a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	3b04      	subs	r3, #4
 8005322:	2a00      	cmp	r2, #0
 8005324:	d1cc      	bne.n	80052c0 <quorem+0x9c>
 8005326:	3c01      	subs	r4, #1
 8005328:	e7c7      	b.n	80052ba <quorem+0x96>
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	3b04      	subs	r3, #4
 800532e:	2a00      	cmp	r2, #0
 8005330:	d1f0      	bne.n	8005314 <quorem+0xf0>
 8005332:	3c01      	subs	r4, #1
 8005334:	e7eb      	b.n	800530e <quorem+0xea>
 8005336:	2000      	movs	r0, #0
 8005338:	e7ee      	b.n	8005318 <quorem+0xf4>
 800533a:	0000      	movs	r0, r0
 800533c:	0000      	movs	r0, r0
	...

08005340 <_dtoa_r>:
 8005340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005344:	ed2d 8b04 	vpush	{d8-d9}
 8005348:	ec57 6b10 	vmov	r6, r7, d0
 800534c:	b093      	sub	sp, #76	; 0x4c
 800534e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005350:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005354:	9106      	str	r1, [sp, #24]
 8005356:	ee10 aa10 	vmov	sl, s0
 800535a:	4604      	mov	r4, r0
 800535c:	9209      	str	r2, [sp, #36]	; 0x24
 800535e:	930c      	str	r3, [sp, #48]	; 0x30
 8005360:	46bb      	mov	fp, r7
 8005362:	b975      	cbnz	r5, 8005382 <_dtoa_r+0x42>
 8005364:	2010      	movs	r0, #16
 8005366:	f000 fddd 	bl	8005f24 <malloc>
 800536a:	4602      	mov	r2, r0
 800536c:	6260      	str	r0, [r4, #36]	; 0x24
 800536e:	b920      	cbnz	r0, 800537a <_dtoa_r+0x3a>
 8005370:	4ba7      	ldr	r3, [pc, #668]	; (8005610 <_dtoa_r+0x2d0>)
 8005372:	21ea      	movs	r1, #234	; 0xea
 8005374:	48a7      	ldr	r0, [pc, #668]	; (8005614 <_dtoa_r+0x2d4>)
 8005376:	f001 fbc3 	bl	8006b00 <__assert_func>
 800537a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800537e:	6005      	str	r5, [r0, #0]
 8005380:	60c5      	str	r5, [r0, #12]
 8005382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005384:	6819      	ldr	r1, [r3, #0]
 8005386:	b151      	cbz	r1, 800539e <_dtoa_r+0x5e>
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	604a      	str	r2, [r1, #4]
 800538c:	2301      	movs	r3, #1
 800538e:	4093      	lsls	r3, r2
 8005390:	608b      	str	r3, [r1, #8]
 8005392:	4620      	mov	r0, r4
 8005394:	f000 fe0e 	bl	8005fb4 <_Bfree>
 8005398:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	1e3b      	subs	r3, r7, #0
 80053a0:	bfaa      	itet	ge
 80053a2:	2300      	movge	r3, #0
 80053a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80053a8:	f8c8 3000 	strge.w	r3, [r8]
 80053ac:	4b9a      	ldr	r3, [pc, #616]	; (8005618 <_dtoa_r+0x2d8>)
 80053ae:	bfbc      	itt	lt
 80053b0:	2201      	movlt	r2, #1
 80053b2:	f8c8 2000 	strlt.w	r2, [r8]
 80053b6:	ea33 030b 	bics.w	r3, r3, fp
 80053ba:	d11b      	bne.n	80053f4 <_dtoa_r+0xb4>
 80053bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053be:	f242 730f 	movw	r3, #9999	; 0x270f
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053c8:	4333      	orrs	r3, r6
 80053ca:	f000 8592 	beq.w	8005ef2 <_dtoa_r+0xbb2>
 80053ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053d0:	b963      	cbnz	r3, 80053ec <_dtoa_r+0xac>
 80053d2:	4b92      	ldr	r3, [pc, #584]	; (800561c <_dtoa_r+0x2dc>)
 80053d4:	e022      	b.n	800541c <_dtoa_r+0xdc>
 80053d6:	4b92      	ldr	r3, [pc, #584]	; (8005620 <_dtoa_r+0x2e0>)
 80053d8:	9301      	str	r3, [sp, #4]
 80053da:	3308      	adds	r3, #8
 80053dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	9801      	ldr	r0, [sp, #4]
 80053e2:	b013      	add	sp, #76	; 0x4c
 80053e4:	ecbd 8b04 	vpop	{d8-d9}
 80053e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ec:	4b8b      	ldr	r3, [pc, #556]	; (800561c <_dtoa_r+0x2dc>)
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	3303      	adds	r3, #3
 80053f2:	e7f3      	b.n	80053dc <_dtoa_r+0x9c>
 80053f4:	2200      	movs	r2, #0
 80053f6:	2300      	movs	r3, #0
 80053f8:	4650      	mov	r0, sl
 80053fa:	4659      	mov	r1, fp
 80053fc:	f7fb fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8005400:	ec4b ab19 	vmov	d9, sl, fp
 8005404:	4680      	mov	r8, r0
 8005406:	b158      	cbz	r0, 8005420 <_dtoa_r+0xe0>
 8005408:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800540a:	2301      	movs	r3, #1
 800540c:	6013      	str	r3, [r2, #0]
 800540e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 856b 	beq.w	8005eec <_dtoa_r+0xbac>
 8005416:	4883      	ldr	r0, [pc, #524]	; (8005624 <_dtoa_r+0x2e4>)
 8005418:	6018      	str	r0, [r3, #0]
 800541a:	1e43      	subs	r3, r0, #1
 800541c:	9301      	str	r3, [sp, #4]
 800541e:	e7df      	b.n	80053e0 <_dtoa_r+0xa0>
 8005420:	ec4b ab10 	vmov	d0, sl, fp
 8005424:	aa10      	add	r2, sp, #64	; 0x40
 8005426:	a911      	add	r1, sp, #68	; 0x44
 8005428:	4620      	mov	r0, r4
 800542a:	f001 f8ab 	bl	8006584 <__d2b>
 800542e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005432:	ee08 0a10 	vmov	s16, r0
 8005436:	2d00      	cmp	r5, #0
 8005438:	f000 8084 	beq.w	8005544 <_dtoa_r+0x204>
 800543c:	ee19 3a90 	vmov	r3, s19
 8005440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005444:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005448:	4656      	mov	r6, sl
 800544a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800544e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005452:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005456:	4b74      	ldr	r3, [pc, #464]	; (8005628 <_dtoa_r+0x2e8>)
 8005458:	2200      	movs	r2, #0
 800545a:	4630      	mov	r0, r6
 800545c:	4639      	mov	r1, r7
 800545e:	f7fa ff33 	bl	80002c8 <__aeabi_dsub>
 8005462:	a365      	add	r3, pc, #404	; (adr r3, 80055f8 <_dtoa_r+0x2b8>)
 8005464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005468:	f7fb f8e6 	bl	8000638 <__aeabi_dmul>
 800546c:	a364      	add	r3, pc, #400	; (adr r3, 8005600 <_dtoa_r+0x2c0>)
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f7fa ff2b 	bl	80002cc <__adddf3>
 8005476:	4606      	mov	r6, r0
 8005478:	4628      	mov	r0, r5
 800547a:	460f      	mov	r7, r1
 800547c:	f7fb f872 	bl	8000564 <__aeabi_i2d>
 8005480:	a361      	add	r3, pc, #388	; (adr r3, 8005608 <_dtoa_r+0x2c8>)
 8005482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005486:	f7fb f8d7 	bl	8000638 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4630      	mov	r0, r6
 8005490:	4639      	mov	r1, r7
 8005492:	f7fa ff1b 	bl	80002cc <__adddf3>
 8005496:	4606      	mov	r6, r0
 8005498:	460f      	mov	r7, r1
 800549a:	f7fb fb7d 	bl	8000b98 <__aeabi_d2iz>
 800549e:	2200      	movs	r2, #0
 80054a0:	9000      	str	r0, [sp, #0]
 80054a2:	2300      	movs	r3, #0
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f7fb fb38 	bl	8000b1c <__aeabi_dcmplt>
 80054ac:	b150      	cbz	r0, 80054c4 <_dtoa_r+0x184>
 80054ae:	9800      	ldr	r0, [sp, #0]
 80054b0:	f7fb f858 	bl	8000564 <__aeabi_i2d>
 80054b4:	4632      	mov	r2, r6
 80054b6:	463b      	mov	r3, r7
 80054b8:	f7fb fb26 	bl	8000b08 <__aeabi_dcmpeq>
 80054bc:	b910      	cbnz	r0, 80054c4 <_dtoa_r+0x184>
 80054be:	9b00      	ldr	r3, [sp, #0]
 80054c0:	3b01      	subs	r3, #1
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	9b00      	ldr	r3, [sp, #0]
 80054c6:	2b16      	cmp	r3, #22
 80054c8:	d85a      	bhi.n	8005580 <_dtoa_r+0x240>
 80054ca:	9a00      	ldr	r2, [sp, #0]
 80054cc:	4b57      	ldr	r3, [pc, #348]	; (800562c <_dtoa_r+0x2ec>)
 80054ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	ec51 0b19 	vmov	r0, r1, d9
 80054da:	f7fb fb1f 	bl	8000b1c <__aeabi_dcmplt>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d050      	beq.n	8005584 <_dtoa_r+0x244>
 80054e2:	9b00      	ldr	r3, [sp, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2300      	movs	r3, #0
 80054ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80054ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80054ee:	1b5d      	subs	r5, r3, r5
 80054f0:	1e6b      	subs	r3, r5, #1
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	bf45      	ittet	mi
 80054f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80054fa:	9304      	strmi	r3, [sp, #16]
 80054fc:	2300      	movpl	r3, #0
 80054fe:	2300      	movmi	r3, #0
 8005500:	bf4c      	ite	mi
 8005502:	9305      	strmi	r3, [sp, #20]
 8005504:	9304      	strpl	r3, [sp, #16]
 8005506:	9b00      	ldr	r3, [sp, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	db3d      	blt.n	8005588 <_dtoa_r+0x248>
 800550c:	9b05      	ldr	r3, [sp, #20]
 800550e:	9a00      	ldr	r2, [sp, #0]
 8005510:	920a      	str	r2, [sp, #40]	; 0x28
 8005512:	4413      	add	r3, r2
 8005514:	9305      	str	r3, [sp, #20]
 8005516:	2300      	movs	r3, #0
 8005518:	9307      	str	r3, [sp, #28]
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	2b09      	cmp	r3, #9
 800551e:	f200 8089 	bhi.w	8005634 <_dtoa_r+0x2f4>
 8005522:	2b05      	cmp	r3, #5
 8005524:	bfc4      	itt	gt
 8005526:	3b04      	subgt	r3, #4
 8005528:	9306      	strgt	r3, [sp, #24]
 800552a:	9b06      	ldr	r3, [sp, #24]
 800552c:	f1a3 0302 	sub.w	r3, r3, #2
 8005530:	bfcc      	ite	gt
 8005532:	2500      	movgt	r5, #0
 8005534:	2501      	movle	r5, #1
 8005536:	2b03      	cmp	r3, #3
 8005538:	f200 8087 	bhi.w	800564a <_dtoa_r+0x30a>
 800553c:	e8df f003 	tbb	[pc, r3]
 8005540:	59383a2d 	.word	0x59383a2d
 8005544:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005548:	441d      	add	r5, r3
 800554a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800554e:	2b20      	cmp	r3, #32
 8005550:	bfc1      	itttt	gt
 8005552:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005556:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800555a:	fa0b f303 	lslgt.w	r3, fp, r3
 800555e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005562:	bfda      	itte	le
 8005564:	f1c3 0320 	rsble	r3, r3, #32
 8005568:	fa06 f003 	lslle.w	r0, r6, r3
 800556c:	4318      	orrgt	r0, r3
 800556e:	f7fa ffe9 	bl	8000544 <__aeabi_ui2d>
 8005572:	2301      	movs	r3, #1
 8005574:	4606      	mov	r6, r0
 8005576:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800557a:	3d01      	subs	r5, #1
 800557c:	930e      	str	r3, [sp, #56]	; 0x38
 800557e:	e76a      	b.n	8005456 <_dtoa_r+0x116>
 8005580:	2301      	movs	r3, #1
 8005582:	e7b2      	b.n	80054ea <_dtoa_r+0x1aa>
 8005584:	900b      	str	r0, [sp, #44]	; 0x2c
 8005586:	e7b1      	b.n	80054ec <_dtoa_r+0x1ac>
 8005588:	9b04      	ldr	r3, [sp, #16]
 800558a:	9a00      	ldr	r2, [sp, #0]
 800558c:	1a9b      	subs	r3, r3, r2
 800558e:	9304      	str	r3, [sp, #16]
 8005590:	4253      	negs	r3, r2
 8005592:	9307      	str	r3, [sp, #28]
 8005594:	2300      	movs	r3, #0
 8005596:	930a      	str	r3, [sp, #40]	; 0x28
 8005598:	e7bf      	b.n	800551a <_dtoa_r+0x1da>
 800559a:	2300      	movs	r3, #0
 800559c:	9308      	str	r3, [sp, #32]
 800559e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	dc55      	bgt.n	8005650 <_dtoa_r+0x310>
 80055a4:	2301      	movs	r3, #1
 80055a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055aa:	461a      	mov	r2, r3
 80055ac:	9209      	str	r2, [sp, #36]	; 0x24
 80055ae:	e00c      	b.n	80055ca <_dtoa_r+0x28a>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e7f3      	b.n	800559c <_dtoa_r+0x25c>
 80055b4:	2300      	movs	r3, #0
 80055b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	9b00      	ldr	r3, [sp, #0]
 80055bc:	4413      	add	r3, r2
 80055be:	9302      	str	r3, [sp, #8]
 80055c0:	3301      	adds	r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	9303      	str	r3, [sp, #12]
 80055c6:	bfb8      	it	lt
 80055c8:	2301      	movlt	r3, #1
 80055ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80055cc:	2200      	movs	r2, #0
 80055ce:	6042      	str	r2, [r0, #4]
 80055d0:	2204      	movs	r2, #4
 80055d2:	f102 0614 	add.w	r6, r2, #20
 80055d6:	429e      	cmp	r6, r3
 80055d8:	6841      	ldr	r1, [r0, #4]
 80055da:	d93d      	bls.n	8005658 <_dtoa_r+0x318>
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fca9 	bl	8005f34 <_Balloc>
 80055e2:	9001      	str	r0, [sp, #4]
 80055e4:	2800      	cmp	r0, #0
 80055e6:	d13b      	bne.n	8005660 <_dtoa_r+0x320>
 80055e8:	4b11      	ldr	r3, [pc, #68]	; (8005630 <_dtoa_r+0x2f0>)
 80055ea:	4602      	mov	r2, r0
 80055ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80055f0:	e6c0      	b.n	8005374 <_dtoa_r+0x34>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e7df      	b.n	80055b6 <_dtoa_r+0x276>
 80055f6:	bf00      	nop
 80055f8:	636f4361 	.word	0x636f4361
 80055fc:	3fd287a7 	.word	0x3fd287a7
 8005600:	8b60c8b3 	.word	0x8b60c8b3
 8005604:	3fc68a28 	.word	0x3fc68a28
 8005608:	509f79fb 	.word	0x509f79fb
 800560c:	3fd34413 	.word	0x3fd34413
 8005610:	08007765 	.word	0x08007765
 8005614:	0800777c 	.word	0x0800777c
 8005618:	7ff00000 	.word	0x7ff00000
 800561c:	08007761 	.word	0x08007761
 8005620:	08007758 	.word	0x08007758
 8005624:	08007735 	.word	0x08007735
 8005628:	3ff80000 	.word	0x3ff80000
 800562c:	08007870 	.word	0x08007870
 8005630:	080077d7 	.word	0x080077d7
 8005634:	2501      	movs	r5, #1
 8005636:	2300      	movs	r3, #0
 8005638:	9306      	str	r3, [sp, #24]
 800563a:	9508      	str	r5, [sp, #32]
 800563c:	f04f 33ff 	mov.w	r3, #4294967295
 8005640:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005644:	2200      	movs	r2, #0
 8005646:	2312      	movs	r3, #18
 8005648:	e7b0      	b.n	80055ac <_dtoa_r+0x26c>
 800564a:	2301      	movs	r3, #1
 800564c:	9308      	str	r3, [sp, #32]
 800564e:	e7f5      	b.n	800563c <_dtoa_r+0x2fc>
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005656:	e7b8      	b.n	80055ca <_dtoa_r+0x28a>
 8005658:	3101      	adds	r1, #1
 800565a:	6041      	str	r1, [r0, #4]
 800565c:	0052      	lsls	r2, r2, #1
 800565e:	e7b8      	b.n	80055d2 <_dtoa_r+0x292>
 8005660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005662:	9a01      	ldr	r2, [sp, #4]
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	2b0e      	cmp	r3, #14
 800566a:	f200 809d 	bhi.w	80057a8 <_dtoa_r+0x468>
 800566e:	2d00      	cmp	r5, #0
 8005670:	f000 809a 	beq.w	80057a8 <_dtoa_r+0x468>
 8005674:	9b00      	ldr	r3, [sp, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	dd32      	ble.n	80056e0 <_dtoa_r+0x3a0>
 800567a:	4ab7      	ldr	r2, [pc, #732]	; (8005958 <_dtoa_r+0x618>)
 800567c:	f003 030f 	and.w	r3, r3, #15
 8005680:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005688:	9b00      	ldr	r3, [sp, #0]
 800568a:	05d8      	lsls	r0, r3, #23
 800568c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005690:	d516      	bpl.n	80056c0 <_dtoa_r+0x380>
 8005692:	4bb2      	ldr	r3, [pc, #712]	; (800595c <_dtoa_r+0x61c>)
 8005694:	ec51 0b19 	vmov	r0, r1, d9
 8005698:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800569c:	f7fb f8f6 	bl	800088c <__aeabi_ddiv>
 80056a0:	f007 070f 	and.w	r7, r7, #15
 80056a4:	4682      	mov	sl, r0
 80056a6:	468b      	mov	fp, r1
 80056a8:	2503      	movs	r5, #3
 80056aa:	4eac      	ldr	r6, [pc, #688]	; (800595c <_dtoa_r+0x61c>)
 80056ac:	b957      	cbnz	r7, 80056c4 <_dtoa_r+0x384>
 80056ae:	4642      	mov	r2, r8
 80056b0:	464b      	mov	r3, r9
 80056b2:	4650      	mov	r0, sl
 80056b4:	4659      	mov	r1, fp
 80056b6:	f7fb f8e9 	bl	800088c <__aeabi_ddiv>
 80056ba:	4682      	mov	sl, r0
 80056bc:	468b      	mov	fp, r1
 80056be:	e028      	b.n	8005712 <_dtoa_r+0x3d2>
 80056c0:	2502      	movs	r5, #2
 80056c2:	e7f2      	b.n	80056aa <_dtoa_r+0x36a>
 80056c4:	07f9      	lsls	r1, r7, #31
 80056c6:	d508      	bpl.n	80056da <_dtoa_r+0x39a>
 80056c8:	4640      	mov	r0, r8
 80056ca:	4649      	mov	r1, r9
 80056cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80056d0:	f7fa ffb2 	bl	8000638 <__aeabi_dmul>
 80056d4:	3501      	adds	r5, #1
 80056d6:	4680      	mov	r8, r0
 80056d8:	4689      	mov	r9, r1
 80056da:	107f      	asrs	r7, r7, #1
 80056dc:	3608      	adds	r6, #8
 80056de:	e7e5      	b.n	80056ac <_dtoa_r+0x36c>
 80056e0:	f000 809b 	beq.w	800581a <_dtoa_r+0x4da>
 80056e4:	9b00      	ldr	r3, [sp, #0]
 80056e6:	4f9d      	ldr	r7, [pc, #628]	; (800595c <_dtoa_r+0x61c>)
 80056e8:	425e      	negs	r6, r3
 80056ea:	4b9b      	ldr	r3, [pc, #620]	; (8005958 <_dtoa_r+0x618>)
 80056ec:	f006 020f 	and.w	r2, r6, #15
 80056f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	ec51 0b19 	vmov	r0, r1, d9
 80056fc:	f7fa ff9c 	bl	8000638 <__aeabi_dmul>
 8005700:	1136      	asrs	r6, r6, #4
 8005702:	4682      	mov	sl, r0
 8005704:	468b      	mov	fp, r1
 8005706:	2300      	movs	r3, #0
 8005708:	2502      	movs	r5, #2
 800570a:	2e00      	cmp	r6, #0
 800570c:	d17a      	bne.n	8005804 <_dtoa_r+0x4c4>
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1d3      	bne.n	80056ba <_dtoa_r+0x37a>
 8005712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8082 	beq.w	800581e <_dtoa_r+0x4de>
 800571a:	4b91      	ldr	r3, [pc, #580]	; (8005960 <_dtoa_r+0x620>)
 800571c:	2200      	movs	r2, #0
 800571e:	4650      	mov	r0, sl
 8005720:	4659      	mov	r1, fp
 8005722:	f7fb f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8005726:	2800      	cmp	r0, #0
 8005728:	d079      	beq.n	800581e <_dtoa_r+0x4de>
 800572a:	9b03      	ldr	r3, [sp, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d076      	beq.n	800581e <_dtoa_r+0x4de>
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	dd36      	ble.n	80057a4 <_dtoa_r+0x464>
 8005736:	9b00      	ldr	r3, [sp, #0]
 8005738:	4650      	mov	r0, sl
 800573a:	4659      	mov	r1, fp
 800573c:	1e5f      	subs	r7, r3, #1
 800573e:	2200      	movs	r2, #0
 8005740:	4b88      	ldr	r3, [pc, #544]	; (8005964 <_dtoa_r+0x624>)
 8005742:	f7fa ff79 	bl	8000638 <__aeabi_dmul>
 8005746:	9e02      	ldr	r6, [sp, #8]
 8005748:	4682      	mov	sl, r0
 800574a:	468b      	mov	fp, r1
 800574c:	3501      	adds	r5, #1
 800574e:	4628      	mov	r0, r5
 8005750:	f7fa ff08 	bl	8000564 <__aeabi_i2d>
 8005754:	4652      	mov	r2, sl
 8005756:	465b      	mov	r3, fp
 8005758:	f7fa ff6e 	bl	8000638 <__aeabi_dmul>
 800575c:	4b82      	ldr	r3, [pc, #520]	; (8005968 <_dtoa_r+0x628>)
 800575e:	2200      	movs	r2, #0
 8005760:	f7fa fdb4 	bl	80002cc <__adddf3>
 8005764:	46d0      	mov	r8, sl
 8005766:	46d9      	mov	r9, fp
 8005768:	4682      	mov	sl, r0
 800576a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800576e:	2e00      	cmp	r6, #0
 8005770:	d158      	bne.n	8005824 <_dtoa_r+0x4e4>
 8005772:	4b7e      	ldr	r3, [pc, #504]	; (800596c <_dtoa_r+0x62c>)
 8005774:	2200      	movs	r2, #0
 8005776:	4640      	mov	r0, r8
 8005778:	4649      	mov	r1, r9
 800577a:	f7fa fda5 	bl	80002c8 <__aeabi_dsub>
 800577e:	4652      	mov	r2, sl
 8005780:	465b      	mov	r3, fp
 8005782:	4680      	mov	r8, r0
 8005784:	4689      	mov	r9, r1
 8005786:	f7fb f9e7 	bl	8000b58 <__aeabi_dcmpgt>
 800578a:	2800      	cmp	r0, #0
 800578c:	f040 8295 	bne.w	8005cba <_dtoa_r+0x97a>
 8005790:	4652      	mov	r2, sl
 8005792:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005796:	4640      	mov	r0, r8
 8005798:	4649      	mov	r1, r9
 800579a:	f7fb f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	f040 8289 	bne.w	8005cb6 <_dtoa_r+0x976>
 80057a4:	ec5b ab19 	vmov	sl, fp, d9
 80057a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f2c0 8148 	blt.w	8005a40 <_dtoa_r+0x700>
 80057b0:	9a00      	ldr	r2, [sp, #0]
 80057b2:	2a0e      	cmp	r2, #14
 80057b4:	f300 8144 	bgt.w	8005a40 <_dtoa_r+0x700>
 80057b8:	4b67      	ldr	r3, [pc, #412]	; (8005958 <_dtoa_r+0x618>)
 80057ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f280 80d5 	bge.w	8005974 <_dtoa_r+0x634>
 80057ca:	9b03      	ldr	r3, [sp, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f300 80d1 	bgt.w	8005974 <_dtoa_r+0x634>
 80057d2:	f040 826f 	bne.w	8005cb4 <_dtoa_r+0x974>
 80057d6:	4b65      	ldr	r3, [pc, #404]	; (800596c <_dtoa_r+0x62c>)
 80057d8:	2200      	movs	r2, #0
 80057da:	4640      	mov	r0, r8
 80057dc:	4649      	mov	r1, r9
 80057de:	f7fa ff2b 	bl	8000638 <__aeabi_dmul>
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	f7fb f9ad 	bl	8000b44 <__aeabi_dcmpge>
 80057ea:	9e03      	ldr	r6, [sp, #12]
 80057ec:	4637      	mov	r7, r6
 80057ee:	2800      	cmp	r0, #0
 80057f0:	f040 8245 	bne.w	8005c7e <_dtoa_r+0x93e>
 80057f4:	9d01      	ldr	r5, [sp, #4]
 80057f6:	2331      	movs	r3, #49	; 0x31
 80057f8:	f805 3b01 	strb.w	r3, [r5], #1
 80057fc:	9b00      	ldr	r3, [sp, #0]
 80057fe:	3301      	adds	r3, #1
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	e240      	b.n	8005c86 <_dtoa_r+0x946>
 8005804:	07f2      	lsls	r2, r6, #31
 8005806:	d505      	bpl.n	8005814 <_dtoa_r+0x4d4>
 8005808:	e9d7 2300 	ldrd	r2, r3, [r7]
 800580c:	f7fa ff14 	bl	8000638 <__aeabi_dmul>
 8005810:	3501      	adds	r5, #1
 8005812:	2301      	movs	r3, #1
 8005814:	1076      	asrs	r6, r6, #1
 8005816:	3708      	adds	r7, #8
 8005818:	e777      	b.n	800570a <_dtoa_r+0x3ca>
 800581a:	2502      	movs	r5, #2
 800581c:	e779      	b.n	8005712 <_dtoa_r+0x3d2>
 800581e:	9f00      	ldr	r7, [sp, #0]
 8005820:	9e03      	ldr	r6, [sp, #12]
 8005822:	e794      	b.n	800574e <_dtoa_r+0x40e>
 8005824:	9901      	ldr	r1, [sp, #4]
 8005826:	4b4c      	ldr	r3, [pc, #304]	; (8005958 <_dtoa_r+0x618>)
 8005828:	4431      	add	r1, r6
 800582a:	910d      	str	r1, [sp, #52]	; 0x34
 800582c:	9908      	ldr	r1, [sp, #32]
 800582e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005832:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005836:	2900      	cmp	r1, #0
 8005838:	d043      	beq.n	80058c2 <_dtoa_r+0x582>
 800583a:	494d      	ldr	r1, [pc, #308]	; (8005970 <_dtoa_r+0x630>)
 800583c:	2000      	movs	r0, #0
 800583e:	f7fb f825 	bl	800088c <__aeabi_ddiv>
 8005842:	4652      	mov	r2, sl
 8005844:	465b      	mov	r3, fp
 8005846:	f7fa fd3f 	bl	80002c8 <__aeabi_dsub>
 800584a:	9d01      	ldr	r5, [sp, #4]
 800584c:	4682      	mov	sl, r0
 800584e:	468b      	mov	fp, r1
 8005850:	4649      	mov	r1, r9
 8005852:	4640      	mov	r0, r8
 8005854:	f7fb f9a0 	bl	8000b98 <__aeabi_d2iz>
 8005858:	4606      	mov	r6, r0
 800585a:	f7fa fe83 	bl	8000564 <__aeabi_i2d>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4640      	mov	r0, r8
 8005864:	4649      	mov	r1, r9
 8005866:	f7fa fd2f 	bl	80002c8 <__aeabi_dsub>
 800586a:	3630      	adds	r6, #48	; 0x30
 800586c:	f805 6b01 	strb.w	r6, [r5], #1
 8005870:	4652      	mov	r2, sl
 8005872:	465b      	mov	r3, fp
 8005874:	4680      	mov	r8, r0
 8005876:	4689      	mov	r9, r1
 8005878:	f7fb f950 	bl	8000b1c <__aeabi_dcmplt>
 800587c:	2800      	cmp	r0, #0
 800587e:	d163      	bne.n	8005948 <_dtoa_r+0x608>
 8005880:	4642      	mov	r2, r8
 8005882:	464b      	mov	r3, r9
 8005884:	4936      	ldr	r1, [pc, #216]	; (8005960 <_dtoa_r+0x620>)
 8005886:	2000      	movs	r0, #0
 8005888:	f7fa fd1e 	bl	80002c8 <__aeabi_dsub>
 800588c:	4652      	mov	r2, sl
 800588e:	465b      	mov	r3, fp
 8005890:	f7fb f944 	bl	8000b1c <__aeabi_dcmplt>
 8005894:	2800      	cmp	r0, #0
 8005896:	f040 80b5 	bne.w	8005a04 <_dtoa_r+0x6c4>
 800589a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800589c:	429d      	cmp	r5, r3
 800589e:	d081      	beq.n	80057a4 <_dtoa_r+0x464>
 80058a0:	4b30      	ldr	r3, [pc, #192]	; (8005964 <_dtoa_r+0x624>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	4650      	mov	r0, sl
 80058a6:	4659      	mov	r1, fp
 80058a8:	f7fa fec6 	bl	8000638 <__aeabi_dmul>
 80058ac:	4b2d      	ldr	r3, [pc, #180]	; (8005964 <_dtoa_r+0x624>)
 80058ae:	4682      	mov	sl, r0
 80058b0:	468b      	mov	fp, r1
 80058b2:	4640      	mov	r0, r8
 80058b4:	4649      	mov	r1, r9
 80058b6:	2200      	movs	r2, #0
 80058b8:	f7fa febe 	bl	8000638 <__aeabi_dmul>
 80058bc:	4680      	mov	r8, r0
 80058be:	4689      	mov	r9, r1
 80058c0:	e7c6      	b.n	8005850 <_dtoa_r+0x510>
 80058c2:	4650      	mov	r0, sl
 80058c4:	4659      	mov	r1, fp
 80058c6:	f7fa feb7 	bl	8000638 <__aeabi_dmul>
 80058ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058cc:	9d01      	ldr	r5, [sp, #4]
 80058ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d0:	4682      	mov	sl, r0
 80058d2:	468b      	mov	fp, r1
 80058d4:	4649      	mov	r1, r9
 80058d6:	4640      	mov	r0, r8
 80058d8:	f7fb f95e 	bl	8000b98 <__aeabi_d2iz>
 80058dc:	4606      	mov	r6, r0
 80058de:	f7fa fe41 	bl	8000564 <__aeabi_i2d>
 80058e2:	3630      	adds	r6, #48	; 0x30
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	4640      	mov	r0, r8
 80058ea:	4649      	mov	r1, r9
 80058ec:	f7fa fcec 	bl	80002c8 <__aeabi_dsub>
 80058f0:	f805 6b01 	strb.w	r6, [r5], #1
 80058f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058f6:	429d      	cmp	r5, r3
 80058f8:	4680      	mov	r8, r0
 80058fa:	4689      	mov	r9, r1
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	d124      	bne.n	800594c <_dtoa_r+0x60c>
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <_dtoa_r+0x630>)
 8005904:	4650      	mov	r0, sl
 8005906:	4659      	mov	r1, fp
 8005908:	f7fa fce0 	bl	80002cc <__adddf3>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4640      	mov	r0, r8
 8005912:	4649      	mov	r1, r9
 8005914:	f7fb f920 	bl	8000b58 <__aeabi_dcmpgt>
 8005918:	2800      	cmp	r0, #0
 800591a:	d173      	bne.n	8005a04 <_dtoa_r+0x6c4>
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	4913      	ldr	r1, [pc, #76]	; (8005970 <_dtoa_r+0x630>)
 8005922:	2000      	movs	r0, #0
 8005924:	f7fa fcd0 	bl	80002c8 <__aeabi_dsub>
 8005928:	4602      	mov	r2, r0
 800592a:	460b      	mov	r3, r1
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fb f8f4 	bl	8000b1c <__aeabi_dcmplt>
 8005934:	2800      	cmp	r0, #0
 8005936:	f43f af35 	beq.w	80057a4 <_dtoa_r+0x464>
 800593a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800593c:	1e6b      	subs	r3, r5, #1
 800593e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005944:	2b30      	cmp	r3, #48	; 0x30
 8005946:	d0f8      	beq.n	800593a <_dtoa_r+0x5fa>
 8005948:	9700      	str	r7, [sp, #0]
 800594a:	e049      	b.n	80059e0 <_dtoa_r+0x6a0>
 800594c:	4b05      	ldr	r3, [pc, #20]	; (8005964 <_dtoa_r+0x624>)
 800594e:	f7fa fe73 	bl	8000638 <__aeabi_dmul>
 8005952:	4680      	mov	r8, r0
 8005954:	4689      	mov	r9, r1
 8005956:	e7bd      	b.n	80058d4 <_dtoa_r+0x594>
 8005958:	08007870 	.word	0x08007870
 800595c:	08007848 	.word	0x08007848
 8005960:	3ff00000 	.word	0x3ff00000
 8005964:	40240000 	.word	0x40240000
 8005968:	401c0000 	.word	0x401c0000
 800596c:	40140000 	.word	0x40140000
 8005970:	3fe00000 	.word	0x3fe00000
 8005974:	9d01      	ldr	r5, [sp, #4]
 8005976:	4656      	mov	r6, sl
 8005978:	465f      	mov	r7, fp
 800597a:	4642      	mov	r2, r8
 800597c:	464b      	mov	r3, r9
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fa ff83 	bl	800088c <__aeabi_ddiv>
 8005986:	f7fb f907 	bl	8000b98 <__aeabi_d2iz>
 800598a:	4682      	mov	sl, r0
 800598c:	f7fa fdea 	bl	8000564 <__aeabi_i2d>
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	f7fa fe50 	bl	8000638 <__aeabi_dmul>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4630      	mov	r0, r6
 800599e:	4639      	mov	r1, r7
 80059a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80059a4:	f7fa fc90 	bl	80002c8 <__aeabi_dsub>
 80059a8:	f805 6b01 	strb.w	r6, [r5], #1
 80059ac:	9e01      	ldr	r6, [sp, #4]
 80059ae:	9f03      	ldr	r7, [sp, #12]
 80059b0:	1bae      	subs	r6, r5, r6
 80059b2:	42b7      	cmp	r7, r6
 80059b4:	4602      	mov	r2, r0
 80059b6:	460b      	mov	r3, r1
 80059b8:	d135      	bne.n	8005a26 <_dtoa_r+0x6e6>
 80059ba:	f7fa fc87 	bl	80002cc <__adddf3>
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	4606      	mov	r6, r0
 80059c4:	460f      	mov	r7, r1
 80059c6:	f7fb f8c7 	bl	8000b58 <__aeabi_dcmpgt>
 80059ca:	b9d0      	cbnz	r0, 8005a02 <_dtoa_r+0x6c2>
 80059cc:	4642      	mov	r2, r8
 80059ce:	464b      	mov	r3, r9
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f898 	bl	8000b08 <__aeabi_dcmpeq>
 80059d8:	b110      	cbz	r0, 80059e0 <_dtoa_r+0x6a0>
 80059da:	f01a 0f01 	tst.w	sl, #1
 80059de:	d110      	bne.n	8005a02 <_dtoa_r+0x6c2>
 80059e0:	4620      	mov	r0, r4
 80059e2:	ee18 1a10 	vmov	r1, s16
 80059e6:	f000 fae5 	bl	8005fb4 <_Bfree>
 80059ea:	2300      	movs	r3, #0
 80059ec:	9800      	ldr	r0, [sp, #0]
 80059ee:	702b      	strb	r3, [r5, #0]
 80059f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059f2:	3001      	adds	r0, #1
 80059f4:	6018      	str	r0, [r3, #0]
 80059f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f43f acf1 	beq.w	80053e0 <_dtoa_r+0xa0>
 80059fe:	601d      	str	r5, [r3, #0]
 8005a00:	e4ee      	b.n	80053e0 <_dtoa_r+0xa0>
 8005a02:	9f00      	ldr	r7, [sp, #0]
 8005a04:	462b      	mov	r3, r5
 8005a06:	461d      	mov	r5, r3
 8005a08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a0c:	2a39      	cmp	r2, #57	; 0x39
 8005a0e:	d106      	bne.n	8005a1e <_dtoa_r+0x6de>
 8005a10:	9a01      	ldr	r2, [sp, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d1f7      	bne.n	8005a06 <_dtoa_r+0x6c6>
 8005a16:	9901      	ldr	r1, [sp, #4]
 8005a18:	2230      	movs	r2, #48	; 0x30
 8005a1a:	3701      	adds	r7, #1
 8005a1c:	700a      	strb	r2, [r1, #0]
 8005a1e:	781a      	ldrb	r2, [r3, #0]
 8005a20:	3201      	adds	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e790      	b.n	8005948 <_dtoa_r+0x608>
 8005a26:	4ba6      	ldr	r3, [pc, #664]	; (8005cc0 <_dtoa_r+0x980>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f7fa fe05 	bl	8000638 <__aeabi_dmul>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2300      	movs	r3, #0
 8005a32:	4606      	mov	r6, r0
 8005a34:	460f      	mov	r7, r1
 8005a36:	f7fb f867 	bl	8000b08 <__aeabi_dcmpeq>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d09d      	beq.n	800597a <_dtoa_r+0x63a>
 8005a3e:	e7cf      	b.n	80059e0 <_dtoa_r+0x6a0>
 8005a40:	9a08      	ldr	r2, [sp, #32]
 8005a42:	2a00      	cmp	r2, #0
 8005a44:	f000 80d7 	beq.w	8005bf6 <_dtoa_r+0x8b6>
 8005a48:	9a06      	ldr	r2, [sp, #24]
 8005a4a:	2a01      	cmp	r2, #1
 8005a4c:	f300 80ba 	bgt.w	8005bc4 <_dtoa_r+0x884>
 8005a50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a52:	2a00      	cmp	r2, #0
 8005a54:	f000 80b2 	beq.w	8005bbc <_dtoa_r+0x87c>
 8005a58:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a5c:	9e07      	ldr	r6, [sp, #28]
 8005a5e:	9d04      	ldr	r5, [sp, #16]
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	441a      	add	r2, r3
 8005a64:	9204      	str	r2, [sp, #16]
 8005a66:	9a05      	ldr	r2, [sp, #20]
 8005a68:	2101      	movs	r1, #1
 8005a6a:	441a      	add	r2, r3
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	9205      	str	r2, [sp, #20]
 8005a70:	f000 fb58 	bl	8006124 <__i2b>
 8005a74:	4607      	mov	r7, r0
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	dd0c      	ble.n	8005a94 <_dtoa_r+0x754>
 8005a7a:	9b05      	ldr	r3, [sp, #20]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	dd09      	ble.n	8005a94 <_dtoa_r+0x754>
 8005a80:	42ab      	cmp	r3, r5
 8005a82:	9a04      	ldr	r2, [sp, #16]
 8005a84:	bfa8      	it	ge
 8005a86:	462b      	movge	r3, r5
 8005a88:	1ad2      	subs	r2, r2, r3
 8005a8a:	9204      	str	r2, [sp, #16]
 8005a8c:	9a05      	ldr	r2, [sp, #20]
 8005a8e:	1aed      	subs	r5, r5, r3
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	9b07      	ldr	r3, [sp, #28]
 8005a96:	b31b      	cbz	r3, 8005ae0 <_dtoa_r+0x7a0>
 8005a98:	9b08      	ldr	r3, [sp, #32]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 80af 	beq.w	8005bfe <_dtoa_r+0x8be>
 8005aa0:	2e00      	cmp	r6, #0
 8005aa2:	dd13      	ble.n	8005acc <_dtoa_r+0x78c>
 8005aa4:	4639      	mov	r1, r7
 8005aa6:	4632      	mov	r2, r6
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fbfb 	bl	80062a4 <__pow5mult>
 8005aae:	ee18 2a10 	vmov	r2, s16
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	4607      	mov	r7, r0
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 fb4a 	bl	8006150 <__multiply>
 8005abc:	ee18 1a10 	vmov	r1, s16
 8005ac0:	4680      	mov	r8, r0
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fa76 	bl	8005fb4 <_Bfree>
 8005ac8:	ee08 8a10 	vmov	s16, r8
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	1b9a      	subs	r2, r3, r6
 8005ad0:	d006      	beq.n	8005ae0 <_dtoa_r+0x7a0>
 8005ad2:	ee18 1a10 	vmov	r1, s16
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 fbe4 	bl	80062a4 <__pow5mult>
 8005adc:	ee08 0a10 	vmov	s16, r0
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb1e 	bl	8006124 <__i2b>
 8005ae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	4606      	mov	r6, r0
 8005aee:	f340 8088 	ble.w	8005c02 <_dtoa_r+0x8c2>
 8005af2:	461a      	mov	r2, r3
 8005af4:	4601      	mov	r1, r0
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 fbd4 	bl	80062a4 <__pow5mult>
 8005afc:	9b06      	ldr	r3, [sp, #24]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	4606      	mov	r6, r0
 8005b02:	f340 8081 	ble.w	8005c08 <_dtoa_r+0x8c8>
 8005b06:	f04f 0800 	mov.w	r8, #0
 8005b0a:	6933      	ldr	r3, [r6, #16]
 8005b0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b10:	6918      	ldr	r0, [r3, #16]
 8005b12:	f000 fab7 	bl	8006084 <__hi0bits>
 8005b16:	f1c0 0020 	rsb	r0, r0, #32
 8005b1a:	9b05      	ldr	r3, [sp, #20]
 8005b1c:	4418      	add	r0, r3
 8005b1e:	f010 001f 	ands.w	r0, r0, #31
 8005b22:	f000 8092 	beq.w	8005c4a <_dtoa_r+0x90a>
 8005b26:	f1c0 0320 	rsb	r3, r0, #32
 8005b2a:	2b04      	cmp	r3, #4
 8005b2c:	f340 808a 	ble.w	8005c44 <_dtoa_r+0x904>
 8005b30:	f1c0 001c 	rsb	r0, r0, #28
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	4403      	add	r3, r0
 8005b38:	9304      	str	r3, [sp, #16]
 8005b3a:	9b05      	ldr	r3, [sp, #20]
 8005b3c:	4403      	add	r3, r0
 8005b3e:	4405      	add	r5, r0
 8005b40:	9305      	str	r3, [sp, #20]
 8005b42:	9b04      	ldr	r3, [sp, #16]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	dd07      	ble.n	8005b58 <_dtoa_r+0x818>
 8005b48:	ee18 1a10 	vmov	r1, s16
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fc02 	bl	8006358 <__lshift>
 8005b54:	ee08 0a10 	vmov	s16, r0
 8005b58:	9b05      	ldr	r3, [sp, #20]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	dd05      	ble.n	8005b6a <_dtoa_r+0x82a>
 8005b5e:	4631      	mov	r1, r6
 8005b60:	461a      	mov	r2, r3
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 fbf8 	bl	8006358 <__lshift>
 8005b68:	4606      	mov	r6, r0
 8005b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d06e      	beq.n	8005c4e <_dtoa_r+0x90e>
 8005b70:	ee18 0a10 	vmov	r0, s16
 8005b74:	4631      	mov	r1, r6
 8005b76:	f000 fc5f 	bl	8006438 <__mcmp>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	da67      	bge.n	8005c4e <_dtoa_r+0x90e>
 8005b7e:	9b00      	ldr	r3, [sp, #0]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	ee18 1a10 	vmov	r1, s16
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	220a      	movs	r2, #10
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 fa33 	bl	8005ff8 <__multadd>
 8005b92:	9b08      	ldr	r3, [sp, #32]
 8005b94:	ee08 0a10 	vmov	s16, r0
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 81b1 	beq.w	8005f00 <_dtoa_r+0xbc0>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4639      	mov	r1, r7
 8005ba2:	220a      	movs	r2, #10
 8005ba4:	4620      	mov	r0, r4
 8005ba6:	f000 fa27 	bl	8005ff8 <__multadd>
 8005baa:	9b02      	ldr	r3, [sp, #8]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	4607      	mov	r7, r0
 8005bb0:	f300 808e 	bgt.w	8005cd0 <_dtoa_r+0x990>
 8005bb4:	9b06      	ldr	r3, [sp, #24]
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	dc51      	bgt.n	8005c5e <_dtoa_r+0x91e>
 8005bba:	e089      	b.n	8005cd0 <_dtoa_r+0x990>
 8005bbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bbe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bc2:	e74b      	b.n	8005a5c <_dtoa_r+0x71c>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	1e5e      	subs	r6, r3, #1
 8005bc8:	9b07      	ldr	r3, [sp, #28]
 8005bca:	42b3      	cmp	r3, r6
 8005bcc:	bfbf      	itttt	lt
 8005bce:	9b07      	ldrlt	r3, [sp, #28]
 8005bd0:	9607      	strlt	r6, [sp, #28]
 8005bd2:	1af2      	sublt	r2, r6, r3
 8005bd4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005bd6:	bfb6      	itet	lt
 8005bd8:	189b      	addlt	r3, r3, r2
 8005bda:	1b9e      	subge	r6, r3, r6
 8005bdc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005bde:	9b03      	ldr	r3, [sp, #12]
 8005be0:	bfb8      	it	lt
 8005be2:	2600      	movlt	r6, #0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bfb7      	itett	lt
 8005be8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005bec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005bf0:	1a9d      	sublt	r5, r3, r2
 8005bf2:	2300      	movlt	r3, #0
 8005bf4:	e734      	b.n	8005a60 <_dtoa_r+0x720>
 8005bf6:	9e07      	ldr	r6, [sp, #28]
 8005bf8:	9d04      	ldr	r5, [sp, #16]
 8005bfa:	9f08      	ldr	r7, [sp, #32]
 8005bfc:	e73b      	b.n	8005a76 <_dtoa_r+0x736>
 8005bfe:	9a07      	ldr	r2, [sp, #28]
 8005c00:	e767      	b.n	8005ad2 <_dtoa_r+0x792>
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	dc18      	bgt.n	8005c3a <_dtoa_r+0x8fa>
 8005c08:	f1ba 0f00 	cmp.w	sl, #0
 8005c0c:	d115      	bne.n	8005c3a <_dtoa_r+0x8fa>
 8005c0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c12:	b993      	cbnz	r3, 8005c3a <_dtoa_r+0x8fa>
 8005c14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c18:	0d1b      	lsrs	r3, r3, #20
 8005c1a:	051b      	lsls	r3, r3, #20
 8005c1c:	b183      	cbz	r3, 8005c40 <_dtoa_r+0x900>
 8005c1e:	9b04      	ldr	r3, [sp, #16]
 8005c20:	3301      	adds	r3, #1
 8005c22:	9304      	str	r3, [sp, #16]
 8005c24:	9b05      	ldr	r3, [sp, #20]
 8005c26:	3301      	adds	r3, #1
 8005c28:	9305      	str	r3, [sp, #20]
 8005c2a:	f04f 0801 	mov.w	r8, #1
 8005c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f47f af6a 	bne.w	8005b0a <_dtoa_r+0x7ca>
 8005c36:	2001      	movs	r0, #1
 8005c38:	e76f      	b.n	8005b1a <_dtoa_r+0x7da>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	e7f6      	b.n	8005c2e <_dtoa_r+0x8ee>
 8005c40:	4698      	mov	r8, r3
 8005c42:	e7f4      	b.n	8005c2e <_dtoa_r+0x8ee>
 8005c44:	f43f af7d 	beq.w	8005b42 <_dtoa_r+0x802>
 8005c48:	4618      	mov	r0, r3
 8005c4a:	301c      	adds	r0, #28
 8005c4c:	e772      	b.n	8005b34 <_dtoa_r+0x7f4>
 8005c4e:	9b03      	ldr	r3, [sp, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dc37      	bgt.n	8005cc4 <_dtoa_r+0x984>
 8005c54:	9b06      	ldr	r3, [sp, #24]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	dd34      	ble.n	8005cc4 <_dtoa_r+0x984>
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	9302      	str	r3, [sp, #8]
 8005c5e:	9b02      	ldr	r3, [sp, #8]
 8005c60:	b96b      	cbnz	r3, 8005c7e <_dtoa_r+0x93e>
 8005c62:	4631      	mov	r1, r6
 8005c64:	2205      	movs	r2, #5
 8005c66:	4620      	mov	r0, r4
 8005c68:	f000 f9c6 	bl	8005ff8 <__multadd>
 8005c6c:	4601      	mov	r1, r0
 8005c6e:	4606      	mov	r6, r0
 8005c70:	ee18 0a10 	vmov	r0, s16
 8005c74:	f000 fbe0 	bl	8006438 <__mcmp>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	f73f adbb 	bgt.w	80057f4 <_dtoa_r+0x4b4>
 8005c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c80:	9d01      	ldr	r5, [sp, #4]
 8005c82:	43db      	mvns	r3, r3
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f991 	bl	8005fb4 <_Bfree>
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	f43f aea4 	beq.w	80059e0 <_dtoa_r+0x6a0>
 8005c98:	f1b8 0f00 	cmp.w	r8, #0
 8005c9c:	d005      	beq.n	8005caa <_dtoa_r+0x96a>
 8005c9e:	45b8      	cmp	r8, r7
 8005ca0:	d003      	beq.n	8005caa <_dtoa_r+0x96a>
 8005ca2:	4641      	mov	r1, r8
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f000 f985 	bl	8005fb4 <_Bfree>
 8005caa:	4639      	mov	r1, r7
 8005cac:	4620      	mov	r0, r4
 8005cae:	f000 f981 	bl	8005fb4 <_Bfree>
 8005cb2:	e695      	b.n	80059e0 <_dtoa_r+0x6a0>
 8005cb4:	2600      	movs	r6, #0
 8005cb6:	4637      	mov	r7, r6
 8005cb8:	e7e1      	b.n	8005c7e <_dtoa_r+0x93e>
 8005cba:	9700      	str	r7, [sp, #0]
 8005cbc:	4637      	mov	r7, r6
 8005cbe:	e599      	b.n	80057f4 <_dtoa_r+0x4b4>
 8005cc0:	40240000 	.word	0x40240000
 8005cc4:	9b08      	ldr	r3, [sp, #32]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f000 80ca 	beq.w	8005e60 <_dtoa_r+0xb20>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	9302      	str	r3, [sp, #8]
 8005cd0:	2d00      	cmp	r5, #0
 8005cd2:	dd05      	ble.n	8005ce0 <_dtoa_r+0x9a0>
 8005cd4:	4639      	mov	r1, r7
 8005cd6:	462a      	mov	r2, r5
 8005cd8:	4620      	mov	r0, r4
 8005cda:	f000 fb3d 	bl	8006358 <__lshift>
 8005cde:	4607      	mov	r7, r0
 8005ce0:	f1b8 0f00 	cmp.w	r8, #0
 8005ce4:	d05b      	beq.n	8005d9e <_dtoa_r+0xa5e>
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 f923 	bl	8005f34 <_Balloc>
 8005cee:	4605      	mov	r5, r0
 8005cf0:	b928      	cbnz	r0, 8005cfe <_dtoa_r+0x9be>
 8005cf2:	4b87      	ldr	r3, [pc, #540]	; (8005f10 <_dtoa_r+0xbd0>)
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cfa:	f7ff bb3b 	b.w	8005374 <_dtoa_r+0x34>
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	3202      	adds	r2, #2
 8005d02:	0092      	lsls	r2, r2, #2
 8005d04:	f107 010c 	add.w	r1, r7, #12
 8005d08:	300c      	adds	r0, #12
 8005d0a:	f7fe fdeb 	bl	80048e4 <memcpy>
 8005d0e:	2201      	movs	r2, #1
 8005d10:	4629      	mov	r1, r5
 8005d12:	4620      	mov	r0, r4
 8005d14:	f000 fb20 	bl	8006358 <__lshift>
 8005d18:	9b01      	ldr	r3, [sp, #4]
 8005d1a:	f103 0901 	add.w	r9, r3, #1
 8005d1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	9305      	str	r3, [sp, #20]
 8005d26:	f00a 0301 	and.w	r3, sl, #1
 8005d2a:	46b8      	mov	r8, r7
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	4607      	mov	r7, r0
 8005d30:	4631      	mov	r1, r6
 8005d32:	ee18 0a10 	vmov	r0, s16
 8005d36:	f7ff fa75 	bl	8005224 <quorem>
 8005d3a:	4641      	mov	r1, r8
 8005d3c:	9002      	str	r0, [sp, #8]
 8005d3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005d42:	ee18 0a10 	vmov	r0, s16
 8005d46:	f000 fb77 	bl	8006438 <__mcmp>
 8005d4a:	463a      	mov	r2, r7
 8005d4c:	9003      	str	r0, [sp, #12]
 8005d4e:	4631      	mov	r1, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fb8d 	bl	8006470 <__mdiff>
 8005d56:	68c2      	ldr	r2, [r0, #12]
 8005d58:	f109 3bff 	add.w	fp, r9, #4294967295
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	bb02      	cbnz	r2, 8005da2 <_dtoa_r+0xa62>
 8005d60:	4601      	mov	r1, r0
 8005d62:	ee18 0a10 	vmov	r0, s16
 8005d66:	f000 fb67 	bl	8006438 <__mcmp>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	4629      	mov	r1, r5
 8005d6e:	4620      	mov	r0, r4
 8005d70:	9207      	str	r2, [sp, #28]
 8005d72:	f000 f91f 	bl	8005fb4 <_Bfree>
 8005d76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005d7a:	ea43 0102 	orr.w	r1, r3, r2
 8005d7e:	9b04      	ldr	r3, [sp, #16]
 8005d80:	430b      	orrs	r3, r1
 8005d82:	464d      	mov	r5, r9
 8005d84:	d10f      	bne.n	8005da6 <_dtoa_r+0xa66>
 8005d86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d8a:	d02a      	beq.n	8005de2 <_dtoa_r+0xaa2>
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	dd02      	ble.n	8005d98 <_dtoa_r+0xa58>
 8005d92:	9b02      	ldr	r3, [sp, #8]
 8005d94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d98:	f88b a000 	strb.w	sl, [fp]
 8005d9c:	e775      	b.n	8005c8a <_dtoa_r+0x94a>
 8005d9e:	4638      	mov	r0, r7
 8005da0:	e7ba      	b.n	8005d18 <_dtoa_r+0x9d8>
 8005da2:	2201      	movs	r2, #1
 8005da4:	e7e2      	b.n	8005d6c <_dtoa_r+0xa2c>
 8005da6:	9b03      	ldr	r3, [sp, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db04      	blt.n	8005db6 <_dtoa_r+0xa76>
 8005dac:	9906      	ldr	r1, [sp, #24]
 8005dae:	430b      	orrs	r3, r1
 8005db0:	9904      	ldr	r1, [sp, #16]
 8005db2:	430b      	orrs	r3, r1
 8005db4:	d122      	bne.n	8005dfc <_dtoa_r+0xabc>
 8005db6:	2a00      	cmp	r2, #0
 8005db8:	ddee      	ble.n	8005d98 <_dtoa_r+0xa58>
 8005dba:	ee18 1a10 	vmov	r1, s16
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fac9 	bl	8006358 <__lshift>
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	ee08 0a10 	vmov	s16, r0
 8005dcc:	f000 fb34 	bl	8006438 <__mcmp>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	dc03      	bgt.n	8005ddc <_dtoa_r+0xa9c>
 8005dd4:	d1e0      	bne.n	8005d98 <_dtoa_r+0xa58>
 8005dd6:	f01a 0f01 	tst.w	sl, #1
 8005dda:	d0dd      	beq.n	8005d98 <_dtoa_r+0xa58>
 8005ddc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005de0:	d1d7      	bne.n	8005d92 <_dtoa_r+0xa52>
 8005de2:	2339      	movs	r3, #57	; 0x39
 8005de4:	f88b 3000 	strb.w	r3, [fp]
 8005de8:	462b      	mov	r3, r5
 8005dea:	461d      	mov	r5, r3
 8005dec:	3b01      	subs	r3, #1
 8005dee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005df2:	2a39      	cmp	r2, #57	; 0x39
 8005df4:	d071      	beq.n	8005eda <_dtoa_r+0xb9a>
 8005df6:	3201      	adds	r2, #1
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	e746      	b.n	8005c8a <_dtoa_r+0x94a>
 8005dfc:	2a00      	cmp	r2, #0
 8005dfe:	dd07      	ble.n	8005e10 <_dtoa_r+0xad0>
 8005e00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e04:	d0ed      	beq.n	8005de2 <_dtoa_r+0xaa2>
 8005e06:	f10a 0301 	add.w	r3, sl, #1
 8005e0a:	f88b 3000 	strb.w	r3, [fp]
 8005e0e:	e73c      	b.n	8005c8a <_dtoa_r+0x94a>
 8005e10:	9b05      	ldr	r3, [sp, #20]
 8005e12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e16:	4599      	cmp	r9, r3
 8005e18:	d047      	beq.n	8005eaa <_dtoa_r+0xb6a>
 8005e1a:	ee18 1a10 	vmov	r1, s16
 8005e1e:	2300      	movs	r3, #0
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 f8e8 	bl	8005ff8 <__multadd>
 8005e28:	45b8      	cmp	r8, r7
 8005e2a:	ee08 0a10 	vmov	s16, r0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	f04f 020a 	mov.w	r2, #10
 8005e36:	4641      	mov	r1, r8
 8005e38:	4620      	mov	r0, r4
 8005e3a:	d106      	bne.n	8005e4a <_dtoa_r+0xb0a>
 8005e3c:	f000 f8dc 	bl	8005ff8 <__multadd>
 8005e40:	4680      	mov	r8, r0
 8005e42:	4607      	mov	r7, r0
 8005e44:	f109 0901 	add.w	r9, r9, #1
 8005e48:	e772      	b.n	8005d30 <_dtoa_r+0x9f0>
 8005e4a:	f000 f8d5 	bl	8005ff8 <__multadd>
 8005e4e:	4639      	mov	r1, r7
 8005e50:	4680      	mov	r8, r0
 8005e52:	2300      	movs	r3, #0
 8005e54:	220a      	movs	r2, #10
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f8ce 	bl	8005ff8 <__multadd>
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	e7f1      	b.n	8005e44 <_dtoa_r+0xb04>
 8005e60:	9b03      	ldr	r3, [sp, #12]
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	9d01      	ldr	r5, [sp, #4]
 8005e66:	ee18 0a10 	vmov	r0, s16
 8005e6a:	4631      	mov	r1, r6
 8005e6c:	f7ff f9da 	bl	8005224 <quorem>
 8005e70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e74:	9b01      	ldr	r3, [sp, #4]
 8005e76:	f805 ab01 	strb.w	sl, [r5], #1
 8005e7a:	1aea      	subs	r2, r5, r3
 8005e7c:	9b02      	ldr	r3, [sp, #8]
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	dd09      	ble.n	8005e96 <_dtoa_r+0xb56>
 8005e82:	ee18 1a10 	vmov	r1, s16
 8005e86:	2300      	movs	r3, #0
 8005e88:	220a      	movs	r2, #10
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 f8b4 	bl	8005ff8 <__multadd>
 8005e90:	ee08 0a10 	vmov	s16, r0
 8005e94:	e7e7      	b.n	8005e66 <_dtoa_r+0xb26>
 8005e96:	9b02      	ldr	r3, [sp, #8]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bfc8      	it	gt
 8005e9c:	461d      	movgt	r5, r3
 8005e9e:	9b01      	ldr	r3, [sp, #4]
 8005ea0:	bfd8      	it	le
 8005ea2:	2501      	movle	r5, #1
 8005ea4:	441d      	add	r5, r3
 8005ea6:	f04f 0800 	mov.w	r8, #0
 8005eaa:	ee18 1a10 	vmov	r1, s16
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fa51 	bl	8006358 <__lshift>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	ee08 0a10 	vmov	s16, r0
 8005ebc:	f000 fabc 	bl	8006438 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	dc91      	bgt.n	8005de8 <_dtoa_r+0xaa8>
 8005ec4:	d102      	bne.n	8005ecc <_dtoa_r+0xb8c>
 8005ec6:	f01a 0f01 	tst.w	sl, #1
 8005eca:	d18d      	bne.n	8005de8 <_dtoa_r+0xaa8>
 8005ecc:	462b      	mov	r3, r5
 8005ece:	461d      	mov	r5, r3
 8005ed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ed4:	2a30      	cmp	r2, #48	; 0x30
 8005ed6:	d0fa      	beq.n	8005ece <_dtoa_r+0xb8e>
 8005ed8:	e6d7      	b.n	8005c8a <_dtoa_r+0x94a>
 8005eda:	9a01      	ldr	r2, [sp, #4]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d184      	bne.n	8005dea <_dtoa_r+0xaaa>
 8005ee0:	9b00      	ldr	r3, [sp, #0]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	9300      	str	r3, [sp, #0]
 8005ee6:	2331      	movs	r3, #49	; 0x31
 8005ee8:	7013      	strb	r3, [r2, #0]
 8005eea:	e6ce      	b.n	8005c8a <_dtoa_r+0x94a>
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_dtoa_r+0xbd4>)
 8005eee:	f7ff ba95 	b.w	800541c <_dtoa_r+0xdc>
 8005ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f47f aa6e 	bne.w	80053d6 <_dtoa_r+0x96>
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <_dtoa_r+0xbd8>)
 8005efc:	f7ff ba8e 	b.w	800541c <_dtoa_r+0xdc>
 8005f00:	9b02      	ldr	r3, [sp, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dcae      	bgt.n	8005e64 <_dtoa_r+0xb24>
 8005f06:	9b06      	ldr	r3, [sp, #24]
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	f73f aea8 	bgt.w	8005c5e <_dtoa_r+0x91e>
 8005f0e:	e7a9      	b.n	8005e64 <_dtoa_r+0xb24>
 8005f10:	080077d7 	.word	0x080077d7
 8005f14:	08007734 	.word	0x08007734
 8005f18:	08007758 	.word	0x08007758

08005f1c <_localeconv_r>:
 8005f1c:	4800      	ldr	r0, [pc, #0]	; (8005f20 <_localeconv_r+0x4>)
 8005f1e:	4770      	bx	lr
 8005f20:	20000160 	.word	0x20000160

08005f24 <malloc>:
 8005f24:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <malloc+0xc>)
 8005f26:	4601      	mov	r1, r0
 8005f28:	6818      	ldr	r0, [r3, #0]
 8005f2a:	f000 bc09 	b.w	8006740 <_malloc_r>
 8005f2e:	bf00      	nop
 8005f30:	2000000c 	.word	0x2000000c

08005f34 <_Balloc>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f38:	4604      	mov	r4, r0
 8005f3a:	460d      	mov	r5, r1
 8005f3c:	b976      	cbnz	r6, 8005f5c <_Balloc+0x28>
 8005f3e:	2010      	movs	r0, #16
 8005f40:	f7ff fff0 	bl	8005f24 <malloc>
 8005f44:	4602      	mov	r2, r0
 8005f46:	6260      	str	r0, [r4, #36]	; 0x24
 8005f48:	b920      	cbnz	r0, 8005f54 <_Balloc+0x20>
 8005f4a:	4b18      	ldr	r3, [pc, #96]	; (8005fac <_Balloc+0x78>)
 8005f4c:	4818      	ldr	r0, [pc, #96]	; (8005fb0 <_Balloc+0x7c>)
 8005f4e:	2166      	movs	r1, #102	; 0x66
 8005f50:	f000 fdd6 	bl	8006b00 <__assert_func>
 8005f54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f58:	6006      	str	r6, [r0, #0]
 8005f5a:	60c6      	str	r6, [r0, #12]
 8005f5c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f5e:	68f3      	ldr	r3, [r6, #12]
 8005f60:	b183      	cbz	r3, 8005f84 <_Balloc+0x50>
 8005f62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f6a:	b9b8      	cbnz	r0, 8005f9c <_Balloc+0x68>
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f72:	1d72      	adds	r2, r6, #5
 8005f74:	0092      	lsls	r2, r2, #2
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 fb60 	bl	800663c <_calloc_r>
 8005f7c:	b160      	cbz	r0, 8005f98 <_Balloc+0x64>
 8005f7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f82:	e00e      	b.n	8005fa2 <_Balloc+0x6e>
 8005f84:	2221      	movs	r2, #33	; 0x21
 8005f86:	2104      	movs	r1, #4
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fb57 	bl	800663c <_calloc_r>
 8005f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f90:	60f0      	str	r0, [r6, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d1e4      	bne.n	8005f62 <_Balloc+0x2e>
 8005f98:	2000      	movs	r0, #0
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	6802      	ldr	r2, [r0, #0]
 8005f9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005fa8:	e7f7      	b.n	8005f9a <_Balloc+0x66>
 8005faa:	bf00      	nop
 8005fac:	08007765 	.word	0x08007765
 8005fb0:	080077e8 	.word	0x080077e8

08005fb4 <_Bfree>:
 8005fb4:	b570      	push	{r4, r5, r6, lr}
 8005fb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	b976      	cbnz	r6, 8005fdc <_Bfree+0x28>
 8005fbe:	2010      	movs	r0, #16
 8005fc0:	f7ff ffb0 	bl	8005f24 <malloc>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6268      	str	r0, [r5, #36]	; 0x24
 8005fc8:	b920      	cbnz	r0, 8005fd4 <_Bfree+0x20>
 8005fca:	4b09      	ldr	r3, [pc, #36]	; (8005ff0 <_Bfree+0x3c>)
 8005fcc:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <_Bfree+0x40>)
 8005fce:	218a      	movs	r1, #138	; 0x8a
 8005fd0:	f000 fd96 	bl	8006b00 <__assert_func>
 8005fd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fd8:	6006      	str	r6, [r0, #0]
 8005fda:	60c6      	str	r6, [r0, #12]
 8005fdc:	b13c      	cbz	r4, 8005fee <_Bfree+0x3a>
 8005fde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fe0:	6862      	ldr	r2, [r4, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fe8:	6021      	str	r1, [r4, #0]
 8005fea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fee:	bd70      	pop	{r4, r5, r6, pc}
 8005ff0:	08007765 	.word	0x08007765
 8005ff4:	080077e8 	.word	0x080077e8

08005ff8 <__multadd>:
 8005ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffc:	690d      	ldr	r5, [r1, #16]
 8005ffe:	4607      	mov	r7, r0
 8006000:	460c      	mov	r4, r1
 8006002:	461e      	mov	r6, r3
 8006004:	f101 0c14 	add.w	ip, r1, #20
 8006008:	2000      	movs	r0, #0
 800600a:	f8dc 3000 	ldr.w	r3, [ip]
 800600e:	b299      	uxth	r1, r3
 8006010:	fb02 6101 	mla	r1, r2, r1, r6
 8006014:	0c1e      	lsrs	r6, r3, #16
 8006016:	0c0b      	lsrs	r3, r1, #16
 8006018:	fb02 3306 	mla	r3, r2, r6, r3
 800601c:	b289      	uxth	r1, r1
 800601e:	3001      	adds	r0, #1
 8006020:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006024:	4285      	cmp	r5, r0
 8006026:	f84c 1b04 	str.w	r1, [ip], #4
 800602a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800602e:	dcec      	bgt.n	800600a <__multadd+0x12>
 8006030:	b30e      	cbz	r6, 8006076 <__multadd+0x7e>
 8006032:	68a3      	ldr	r3, [r4, #8]
 8006034:	42ab      	cmp	r3, r5
 8006036:	dc19      	bgt.n	800606c <__multadd+0x74>
 8006038:	6861      	ldr	r1, [r4, #4]
 800603a:	4638      	mov	r0, r7
 800603c:	3101      	adds	r1, #1
 800603e:	f7ff ff79 	bl	8005f34 <_Balloc>
 8006042:	4680      	mov	r8, r0
 8006044:	b928      	cbnz	r0, 8006052 <__multadd+0x5a>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <__multadd+0x84>)
 800604a:	480d      	ldr	r0, [pc, #52]	; (8006080 <__multadd+0x88>)
 800604c:	21b5      	movs	r1, #181	; 0xb5
 800604e:	f000 fd57 	bl	8006b00 <__assert_func>
 8006052:	6922      	ldr	r2, [r4, #16]
 8006054:	3202      	adds	r2, #2
 8006056:	f104 010c 	add.w	r1, r4, #12
 800605a:	0092      	lsls	r2, r2, #2
 800605c:	300c      	adds	r0, #12
 800605e:	f7fe fc41 	bl	80048e4 <memcpy>
 8006062:	4621      	mov	r1, r4
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff ffa5 	bl	8005fb4 <_Bfree>
 800606a:	4644      	mov	r4, r8
 800606c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006070:	3501      	adds	r5, #1
 8006072:	615e      	str	r6, [r3, #20]
 8006074:	6125      	str	r5, [r4, #16]
 8006076:	4620      	mov	r0, r4
 8006078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800607c:	080077d7 	.word	0x080077d7
 8006080:	080077e8 	.word	0x080077e8

08006084 <__hi0bits>:
 8006084:	0c03      	lsrs	r3, r0, #16
 8006086:	041b      	lsls	r3, r3, #16
 8006088:	b9d3      	cbnz	r3, 80060c0 <__hi0bits+0x3c>
 800608a:	0400      	lsls	r0, r0, #16
 800608c:	2310      	movs	r3, #16
 800608e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006092:	bf04      	itt	eq
 8006094:	0200      	lsleq	r0, r0, #8
 8006096:	3308      	addeq	r3, #8
 8006098:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800609c:	bf04      	itt	eq
 800609e:	0100      	lsleq	r0, r0, #4
 80060a0:	3304      	addeq	r3, #4
 80060a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80060a6:	bf04      	itt	eq
 80060a8:	0080      	lsleq	r0, r0, #2
 80060aa:	3302      	addeq	r3, #2
 80060ac:	2800      	cmp	r0, #0
 80060ae:	db05      	blt.n	80060bc <__hi0bits+0x38>
 80060b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80060b4:	f103 0301 	add.w	r3, r3, #1
 80060b8:	bf08      	it	eq
 80060ba:	2320      	moveq	r3, #32
 80060bc:	4618      	mov	r0, r3
 80060be:	4770      	bx	lr
 80060c0:	2300      	movs	r3, #0
 80060c2:	e7e4      	b.n	800608e <__hi0bits+0xa>

080060c4 <__lo0bits>:
 80060c4:	6803      	ldr	r3, [r0, #0]
 80060c6:	f013 0207 	ands.w	r2, r3, #7
 80060ca:	4601      	mov	r1, r0
 80060cc:	d00b      	beq.n	80060e6 <__lo0bits+0x22>
 80060ce:	07da      	lsls	r2, r3, #31
 80060d0:	d423      	bmi.n	800611a <__lo0bits+0x56>
 80060d2:	0798      	lsls	r0, r3, #30
 80060d4:	bf49      	itett	mi
 80060d6:	085b      	lsrmi	r3, r3, #1
 80060d8:	089b      	lsrpl	r3, r3, #2
 80060da:	2001      	movmi	r0, #1
 80060dc:	600b      	strmi	r3, [r1, #0]
 80060de:	bf5c      	itt	pl
 80060e0:	600b      	strpl	r3, [r1, #0]
 80060e2:	2002      	movpl	r0, #2
 80060e4:	4770      	bx	lr
 80060e6:	b298      	uxth	r0, r3
 80060e8:	b9a8      	cbnz	r0, 8006116 <__lo0bits+0x52>
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	2010      	movs	r0, #16
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	b90a      	cbnz	r2, 80060f6 <__lo0bits+0x32>
 80060f2:	3008      	adds	r0, #8
 80060f4:	0a1b      	lsrs	r3, r3, #8
 80060f6:	071a      	lsls	r2, r3, #28
 80060f8:	bf04      	itt	eq
 80060fa:	091b      	lsreq	r3, r3, #4
 80060fc:	3004      	addeq	r0, #4
 80060fe:	079a      	lsls	r2, r3, #30
 8006100:	bf04      	itt	eq
 8006102:	089b      	lsreq	r3, r3, #2
 8006104:	3002      	addeq	r0, #2
 8006106:	07da      	lsls	r2, r3, #31
 8006108:	d403      	bmi.n	8006112 <__lo0bits+0x4e>
 800610a:	085b      	lsrs	r3, r3, #1
 800610c:	f100 0001 	add.w	r0, r0, #1
 8006110:	d005      	beq.n	800611e <__lo0bits+0x5a>
 8006112:	600b      	str	r3, [r1, #0]
 8006114:	4770      	bx	lr
 8006116:	4610      	mov	r0, r2
 8006118:	e7e9      	b.n	80060ee <__lo0bits+0x2a>
 800611a:	2000      	movs	r0, #0
 800611c:	4770      	bx	lr
 800611e:	2020      	movs	r0, #32
 8006120:	4770      	bx	lr
	...

08006124 <__i2b>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	2101      	movs	r1, #1
 800612a:	f7ff ff03 	bl	8005f34 <_Balloc>
 800612e:	4602      	mov	r2, r0
 8006130:	b928      	cbnz	r0, 800613e <__i2b+0x1a>
 8006132:	4b05      	ldr	r3, [pc, #20]	; (8006148 <__i2b+0x24>)
 8006134:	4805      	ldr	r0, [pc, #20]	; (800614c <__i2b+0x28>)
 8006136:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800613a:	f000 fce1 	bl	8006b00 <__assert_func>
 800613e:	2301      	movs	r3, #1
 8006140:	6144      	str	r4, [r0, #20]
 8006142:	6103      	str	r3, [r0, #16]
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	080077d7 	.word	0x080077d7
 800614c:	080077e8 	.word	0x080077e8

08006150 <__multiply>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4691      	mov	r9, r2
 8006156:	690a      	ldr	r2, [r1, #16]
 8006158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800615c:	429a      	cmp	r2, r3
 800615e:	bfb8      	it	lt
 8006160:	460b      	movlt	r3, r1
 8006162:	460c      	mov	r4, r1
 8006164:	bfbc      	itt	lt
 8006166:	464c      	movlt	r4, r9
 8006168:	4699      	movlt	r9, r3
 800616a:	6927      	ldr	r7, [r4, #16]
 800616c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	6861      	ldr	r1, [r4, #4]
 8006174:	eb07 060a 	add.w	r6, r7, sl
 8006178:	42b3      	cmp	r3, r6
 800617a:	b085      	sub	sp, #20
 800617c:	bfb8      	it	lt
 800617e:	3101      	addlt	r1, #1
 8006180:	f7ff fed8 	bl	8005f34 <_Balloc>
 8006184:	b930      	cbnz	r0, 8006194 <__multiply+0x44>
 8006186:	4602      	mov	r2, r0
 8006188:	4b44      	ldr	r3, [pc, #272]	; (800629c <__multiply+0x14c>)
 800618a:	4845      	ldr	r0, [pc, #276]	; (80062a0 <__multiply+0x150>)
 800618c:	f240 115d 	movw	r1, #349	; 0x15d
 8006190:	f000 fcb6 	bl	8006b00 <__assert_func>
 8006194:	f100 0514 	add.w	r5, r0, #20
 8006198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800619c:	462b      	mov	r3, r5
 800619e:	2200      	movs	r2, #0
 80061a0:	4543      	cmp	r3, r8
 80061a2:	d321      	bcc.n	80061e8 <__multiply+0x98>
 80061a4:	f104 0314 	add.w	r3, r4, #20
 80061a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80061ac:	f109 0314 	add.w	r3, r9, #20
 80061b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80061b4:	9202      	str	r2, [sp, #8]
 80061b6:	1b3a      	subs	r2, r7, r4
 80061b8:	3a15      	subs	r2, #21
 80061ba:	f022 0203 	bic.w	r2, r2, #3
 80061be:	3204      	adds	r2, #4
 80061c0:	f104 0115 	add.w	r1, r4, #21
 80061c4:	428f      	cmp	r7, r1
 80061c6:	bf38      	it	cc
 80061c8:	2204      	movcc	r2, #4
 80061ca:	9201      	str	r2, [sp, #4]
 80061cc:	9a02      	ldr	r2, [sp, #8]
 80061ce:	9303      	str	r3, [sp, #12]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d80c      	bhi.n	80061ee <__multiply+0x9e>
 80061d4:	2e00      	cmp	r6, #0
 80061d6:	dd03      	ble.n	80061e0 <__multiply+0x90>
 80061d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05a      	beq.n	8006296 <__multiply+0x146>
 80061e0:	6106      	str	r6, [r0, #16]
 80061e2:	b005      	add	sp, #20
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	f843 2b04 	str.w	r2, [r3], #4
 80061ec:	e7d8      	b.n	80061a0 <__multiply+0x50>
 80061ee:	f8b3 a000 	ldrh.w	sl, [r3]
 80061f2:	f1ba 0f00 	cmp.w	sl, #0
 80061f6:	d024      	beq.n	8006242 <__multiply+0xf2>
 80061f8:	f104 0e14 	add.w	lr, r4, #20
 80061fc:	46a9      	mov	r9, r5
 80061fe:	f04f 0c00 	mov.w	ip, #0
 8006202:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006206:	f8d9 1000 	ldr.w	r1, [r9]
 800620a:	fa1f fb82 	uxth.w	fp, r2
 800620e:	b289      	uxth	r1, r1
 8006210:	fb0a 110b 	mla	r1, sl, fp, r1
 8006214:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006218:	f8d9 2000 	ldr.w	r2, [r9]
 800621c:	4461      	add	r1, ip
 800621e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006222:	fb0a c20b 	mla	r2, sl, fp, ip
 8006226:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800622a:	b289      	uxth	r1, r1
 800622c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006230:	4577      	cmp	r7, lr
 8006232:	f849 1b04 	str.w	r1, [r9], #4
 8006236:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800623a:	d8e2      	bhi.n	8006202 <__multiply+0xb2>
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	f845 c002 	str.w	ip, [r5, r2]
 8006242:	9a03      	ldr	r2, [sp, #12]
 8006244:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006248:	3304      	adds	r3, #4
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	d020      	beq.n	8006292 <__multiply+0x142>
 8006250:	6829      	ldr	r1, [r5, #0]
 8006252:	f104 0c14 	add.w	ip, r4, #20
 8006256:	46ae      	mov	lr, r5
 8006258:	f04f 0a00 	mov.w	sl, #0
 800625c:	f8bc b000 	ldrh.w	fp, [ip]
 8006260:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006264:	fb09 220b 	mla	r2, r9, fp, r2
 8006268:	4492      	add	sl, r2
 800626a:	b289      	uxth	r1, r1
 800626c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006270:	f84e 1b04 	str.w	r1, [lr], #4
 8006274:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006278:	f8be 1000 	ldrh.w	r1, [lr]
 800627c:	0c12      	lsrs	r2, r2, #16
 800627e:	fb09 1102 	mla	r1, r9, r2, r1
 8006282:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006286:	4567      	cmp	r7, ip
 8006288:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800628c:	d8e6      	bhi.n	800625c <__multiply+0x10c>
 800628e:	9a01      	ldr	r2, [sp, #4]
 8006290:	50a9      	str	r1, [r5, r2]
 8006292:	3504      	adds	r5, #4
 8006294:	e79a      	b.n	80061cc <__multiply+0x7c>
 8006296:	3e01      	subs	r6, #1
 8006298:	e79c      	b.n	80061d4 <__multiply+0x84>
 800629a:	bf00      	nop
 800629c:	080077d7 	.word	0x080077d7
 80062a0:	080077e8 	.word	0x080077e8

080062a4 <__pow5mult>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	4615      	mov	r5, r2
 80062aa:	f012 0203 	ands.w	r2, r2, #3
 80062ae:	4606      	mov	r6, r0
 80062b0:	460f      	mov	r7, r1
 80062b2:	d007      	beq.n	80062c4 <__pow5mult+0x20>
 80062b4:	4c25      	ldr	r4, [pc, #148]	; (800634c <__pow5mult+0xa8>)
 80062b6:	3a01      	subs	r2, #1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062be:	f7ff fe9b 	bl	8005ff8 <__multadd>
 80062c2:	4607      	mov	r7, r0
 80062c4:	10ad      	asrs	r5, r5, #2
 80062c6:	d03d      	beq.n	8006344 <__pow5mult+0xa0>
 80062c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80062ca:	b97c      	cbnz	r4, 80062ec <__pow5mult+0x48>
 80062cc:	2010      	movs	r0, #16
 80062ce:	f7ff fe29 	bl	8005f24 <malloc>
 80062d2:	4602      	mov	r2, r0
 80062d4:	6270      	str	r0, [r6, #36]	; 0x24
 80062d6:	b928      	cbnz	r0, 80062e4 <__pow5mult+0x40>
 80062d8:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <__pow5mult+0xac>)
 80062da:	481e      	ldr	r0, [pc, #120]	; (8006354 <__pow5mult+0xb0>)
 80062dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062e0:	f000 fc0e 	bl	8006b00 <__assert_func>
 80062e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e8:	6004      	str	r4, [r0, #0]
 80062ea:	60c4      	str	r4, [r0, #12]
 80062ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f4:	b94c      	cbnz	r4, 800630a <__pow5mult+0x66>
 80062f6:	f240 2171 	movw	r1, #625	; 0x271
 80062fa:	4630      	mov	r0, r6
 80062fc:	f7ff ff12 	bl	8006124 <__i2b>
 8006300:	2300      	movs	r3, #0
 8006302:	f8c8 0008 	str.w	r0, [r8, #8]
 8006306:	4604      	mov	r4, r0
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	07eb      	lsls	r3, r5, #31
 8006310:	d50a      	bpl.n	8006328 <__pow5mult+0x84>
 8006312:	4639      	mov	r1, r7
 8006314:	4622      	mov	r2, r4
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ff1a 	bl	8006150 <__multiply>
 800631c:	4639      	mov	r1, r7
 800631e:	4680      	mov	r8, r0
 8006320:	4630      	mov	r0, r6
 8006322:	f7ff fe47 	bl	8005fb4 <_Bfree>
 8006326:	4647      	mov	r7, r8
 8006328:	106d      	asrs	r5, r5, #1
 800632a:	d00b      	beq.n	8006344 <__pow5mult+0xa0>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	b938      	cbnz	r0, 8006340 <__pow5mult+0x9c>
 8006330:	4622      	mov	r2, r4
 8006332:	4621      	mov	r1, r4
 8006334:	4630      	mov	r0, r6
 8006336:	f7ff ff0b 	bl	8006150 <__multiply>
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	f8c0 9000 	str.w	r9, [r0]
 8006340:	4604      	mov	r4, r0
 8006342:	e7e4      	b.n	800630e <__pow5mult+0x6a>
 8006344:	4638      	mov	r0, r7
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	bf00      	nop
 800634c:	08007938 	.word	0x08007938
 8006350:	08007765 	.word	0x08007765
 8006354:	080077e8 	.word	0x080077e8

08006358 <__lshift>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	460c      	mov	r4, r1
 800635e:	6849      	ldr	r1, [r1, #4]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	4607      	mov	r7, r0
 800636a:	4691      	mov	r9, r2
 800636c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006370:	f108 0601 	add.w	r6, r8, #1
 8006374:	42b3      	cmp	r3, r6
 8006376:	db0b      	blt.n	8006390 <__lshift+0x38>
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff fddb 	bl	8005f34 <_Balloc>
 800637e:	4605      	mov	r5, r0
 8006380:	b948      	cbnz	r0, 8006396 <__lshift+0x3e>
 8006382:	4602      	mov	r2, r0
 8006384:	4b2a      	ldr	r3, [pc, #168]	; (8006430 <__lshift+0xd8>)
 8006386:	482b      	ldr	r0, [pc, #172]	; (8006434 <__lshift+0xdc>)
 8006388:	f240 11d9 	movw	r1, #473	; 0x1d9
 800638c:	f000 fbb8 	bl	8006b00 <__assert_func>
 8006390:	3101      	adds	r1, #1
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	e7ee      	b.n	8006374 <__lshift+0x1c>
 8006396:	2300      	movs	r3, #0
 8006398:	f100 0114 	add.w	r1, r0, #20
 800639c:	f100 0210 	add.w	r2, r0, #16
 80063a0:	4618      	mov	r0, r3
 80063a2:	4553      	cmp	r3, sl
 80063a4:	db37      	blt.n	8006416 <__lshift+0xbe>
 80063a6:	6920      	ldr	r0, [r4, #16]
 80063a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063ac:	f104 0314 	add.w	r3, r4, #20
 80063b0:	f019 091f 	ands.w	r9, r9, #31
 80063b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80063bc:	d02f      	beq.n	800641e <__lshift+0xc6>
 80063be:	f1c9 0e20 	rsb	lr, r9, #32
 80063c2:	468a      	mov	sl, r1
 80063c4:	f04f 0c00 	mov.w	ip, #0
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	fa02 f209 	lsl.w	r2, r2, r9
 80063ce:	ea42 020c 	orr.w	r2, r2, ip
 80063d2:	f84a 2b04 	str.w	r2, [sl], #4
 80063d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063da:	4298      	cmp	r0, r3
 80063dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80063e0:	d8f2      	bhi.n	80063c8 <__lshift+0x70>
 80063e2:	1b03      	subs	r3, r0, r4
 80063e4:	3b15      	subs	r3, #21
 80063e6:	f023 0303 	bic.w	r3, r3, #3
 80063ea:	3304      	adds	r3, #4
 80063ec:	f104 0215 	add.w	r2, r4, #21
 80063f0:	4290      	cmp	r0, r2
 80063f2:	bf38      	it	cc
 80063f4:	2304      	movcc	r3, #4
 80063f6:	f841 c003 	str.w	ip, [r1, r3]
 80063fa:	f1bc 0f00 	cmp.w	ip, #0
 80063fe:	d001      	beq.n	8006404 <__lshift+0xac>
 8006400:	f108 0602 	add.w	r6, r8, #2
 8006404:	3e01      	subs	r6, #1
 8006406:	4638      	mov	r0, r7
 8006408:	612e      	str	r6, [r5, #16]
 800640a:	4621      	mov	r1, r4
 800640c:	f7ff fdd2 	bl	8005fb4 <_Bfree>
 8006410:	4628      	mov	r0, r5
 8006412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006416:	f842 0f04 	str.w	r0, [r2, #4]!
 800641a:	3301      	adds	r3, #1
 800641c:	e7c1      	b.n	80063a2 <__lshift+0x4a>
 800641e:	3904      	subs	r1, #4
 8006420:	f853 2b04 	ldr.w	r2, [r3], #4
 8006424:	f841 2f04 	str.w	r2, [r1, #4]!
 8006428:	4298      	cmp	r0, r3
 800642a:	d8f9      	bhi.n	8006420 <__lshift+0xc8>
 800642c:	e7ea      	b.n	8006404 <__lshift+0xac>
 800642e:	bf00      	nop
 8006430:	080077d7 	.word	0x080077d7
 8006434:	080077e8 	.word	0x080077e8

08006438 <__mcmp>:
 8006438:	b530      	push	{r4, r5, lr}
 800643a:	6902      	ldr	r2, [r0, #16]
 800643c:	690c      	ldr	r4, [r1, #16]
 800643e:	1b12      	subs	r2, r2, r4
 8006440:	d10e      	bne.n	8006460 <__mcmp+0x28>
 8006442:	f100 0314 	add.w	r3, r0, #20
 8006446:	3114      	adds	r1, #20
 8006448:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800644c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006450:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006454:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006458:	42a5      	cmp	r5, r4
 800645a:	d003      	beq.n	8006464 <__mcmp+0x2c>
 800645c:	d305      	bcc.n	800646a <__mcmp+0x32>
 800645e:	2201      	movs	r2, #1
 8006460:	4610      	mov	r0, r2
 8006462:	bd30      	pop	{r4, r5, pc}
 8006464:	4283      	cmp	r3, r0
 8006466:	d3f3      	bcc.n	8006450 <__mcmp+0x18>
 8006468:	e7fa      	b.n	8006460 <__mcmp+0x28>
 800646a:	f04f 32ff 	mov.w	r2, #4294967295
 800646e:	e7f7      	b.n	8006460 <__mcmp+0x28>

08006470 <__mdiff>:
 8006470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	460c      	mov	r4, r1
 8006476:	4606      	mov	r6, r0
 8006478:	4611      	mov	r1, r2
 800647a:	4620      	mov	r0, r4
 800647c:	4690      	mov	r8, r2
 800647e:	f7ff ffdb 	bl	8006438 <__mcmp>
 8006482:	1e05      	subs	r5, r0, #0
 8006484:	d110      	bne.n	80064a8 <__mdiff+0x38>
 8006486:	4629      	mov	r1, r5
 8006488:	4630      	mov	r0, r6
 800648a:	f7ff fd53 	bl	8005f34 <_Balloc>
 800648e:	b930      	cbnz	r0, 800649e <__mdiff+0x2e>
 8006490:	4b3a      	ldr	r3, [pc, #232]	; (800657c <__mdiff+0x10c>)
 8006492:	4602      	mov	r2, r0
 8006494:	f240 2132 	movw	r1, #562	; 0x232
 8006498:	4839      	ldr	r0, [pc, #228]	; (8006580 <__mdiff+0x110>)
 800649a:	f000 fb31 	bl	8006b00 <__assert_func>
 800649e:	2301      	movs	r3, #1
 80064a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80064a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a8:	bfa4      	itt	ge
 80064aa:	4643      	movge	r3, r8
 80064ac:	46a0      	movge	r8, r4
 80064ae:	4630      	mov	r0, r6
 80064b0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80064b4:	bfa6      	itte	ge
 80064b6:	461c      	movge	r4, r3
 80064b8:	2500      	movge	r5, #0
 80064ba:	2501      	movlt	r5, #1
 80064bc:	f7ff fd3a 	bl	8005f34 <_Balloc>
 80064c0:	b920      	cbnz	r0, 80064cc <__mdiff+0x5c>
 80064c2:	4b2e      	ldr	r3, [pc, #184]	; (800657c <__mdiff+0x10c>)
 80064c4:	4602      	mov	r2, r0
 80064c6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80064ca:	e7e5      	b.n	8006498 <__mdiff+0x28>
 80064cc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80064d0:	6926      	ldr	r6, [r4, #16]
 80064d2:	60c5      	str	r5, [r0, #12]
 80064d4:	f104 0914 	add.w	r9, r4, #20
 80064d8:	f108 0514 	add.w	r5, r8, #20
 80064dc:	f100 0e14 	add.w	lr, r0, #20
 80064e0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80064e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80064e8:	f108 0210 	add.w	r2, r8, #16
 80064ec:	46f2      	mov	sl, lr
 80064ee:	2100      	movs	r1, #0
 80064f0:	f859 3b04 	ldr.w	r3, [r9], #4
 80064f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064f8:	fa1f f883 	uxth.w	r8, r3
 80064fc:	fa11 f18b 	uxtah	r1, r1, fp
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	eba1 0808 	sub.w	r8, r1, r8
 8006506:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800650a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800650e:	fa1f f888 	uxth.w	r8, r8
 8006512:	1419      	asrs	r1, r3, #16
 8006514:	454e      	cmp	r6, r9
 8006516:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800651a:	f84a 3b04 	str.w	r3, [sl], #4
 800651e:	d8e7      	bhi.n	80064f0 <__mdiff+0x80>
 8006520:	1b33      	subs	r3, r6, r4
 8006522:	3b15      	subs	r3, #21
 8006524:	f023 0303 	bic.w	r3, r3, #3
 8006528:	3304      	adds	r3, #4
 800652a:	3415      	adds	r4, #21
 800652c:	42a6      	cmp	r6, r4
 800652e:	bf38      	it	cc
 8006530:	2304      	movcc	r3, #4
 8006532:	441d      	add	r5, r3
 8006534:	4473      	add	r3, lr
 8006536:	469e      	mov	lr, r3
 8006538:	462e      	mov	r6, r5
 800653a:	4566      	cmp	r6, ip
 800653c:	d30e      	bcc.n	800655c <__mdiff+0xec>
 800653e:	f10c 0203 	add.w	r2, ip, #3
 8006542:	1b52      	subs	r2, r2, r5
 8006544:	f022 0203 	bic.w	r2, r2, #3
 8006548:	3d03      	subs	r5, #3
 800654a:	45ac      	cmp	ip, r5
 800654c:	bf38      	it	cc
 800654e:	2200      	movcc	r2, #0
 8006550:	441a      	add	r2, r3
 8006552:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006556:	b17b      	cbz	r3, 8006578 <__mdiff+0x108>
 8006558:	6107      	str	r7, [r0, #16]
 800655a:	e7a3      	b.n	80064a4 <__mdiff+0x34>
 800655c:	f856 8b04 	ldr.w	r8, [r6], #4
 8006560:	fa11 f288 	uxtah	r2, r1, r8
 8006564:	1414      	asrs	r4, r2, #16
 8006566:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800656a:	b292      	uxth	r2, r2
 800656c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006570:	f84e 2b04 	str.w	r2, [lr], #4
 8006574:	1421      	asrs	r1, r4, #16
 8006576:	e7e0      	b.n	800653a <__mdiff+0xca>
 8006578:	3f01      	subs	r7, #1
 800657a:	e7ea      	b.n	8006552 <__mdiff+0xe2>
 800657c:	080077d7 	.word	0x080077d7
 8006580:	080077e8 	.word	0x080077e8

08006584 <__d2b>:
 8006584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006588:	4689      	mov	r9, r1
 800658a:	2101      	movs	r1, #1
 800658c:	ec57 6b10 	vmov	r6, r7, d0
 8006590:	4690      	mov	r8, r2
 8006592:	f7ff fccf 	bl	8005f34 <_Balloc>
 8006596:	4604      	mov	r4, r0
 8006598:	b930      	cbnz	r0, 80065a8 <__d2b+0x24>
 800659a:	4602      	mov	r2, r0
 800659c:	4b25      	ldr	r3, [pc, #148]	; (8006634 <__d2b+0xb0>)
 800659e:	4826      	ldr	r0, [pc, #152]	; (8006638 <__d2b+0xb4>)
 80065a0:	f240 310a 	movw	r1, #778	; 0x30a
 80065a4:	f000 faac 	bl	8006b00 <__assert_func>
 80065a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80065ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80065b0:	bb35      	cbnz	r5, 8006600 <__d2b+0x7c>
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	d028      	beq.n	800660a <__d2b+0x86>
 80065b8:	4668      	mov	r0, sp
 80065ba:	9600      	str	r6, [sp, #0]
 80065bc:	f7ff fd82 	bl	80060c4 <__lo0bits>
 80065c0:	9900      	ldr	r1, [sp, #0]
 80065c2:	b300      	cbz	r0, 8006606 <__d2b+0x82>
 80065c4:	9a01      	ldr	r2, [sp, #4]
 80065c6:	f1c0 0320 	rsb	r3, r0, #32
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	430b      	orrs	r3, r1
 80065d0:	40c2      	lsrs	r2, r0
 80065d2:	6163      	str	r3, [r4, #20]
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	9b01      	ldr	r3, [sp, #4]
 80065d8:	61a3      	str	r3, [r4, #24]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	bf14      	ite	ne
 80065de:	2202      	movne	r2, #2
 80065e0:	2201      	moveq	r2, #1
 80065e2:	6122      	str	r2, [r4, #16]
 80065e4:	b1d5      	cbz	r5, 800661c <__d2b+0x98>
 80065e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80065ea:	4405      	add	r5, r0
 80065ec:	f8c9 5000 	str.w	r5, [r9]
 80065f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065f4:	f8c8 0000 	str.w	r0, [r8]
 80065f8:	4620      	mov	r0, r4
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006604:	e7d5      	b.n	80065b2 <__d2b+0x2e>
 8006606:	6161      	str	r1, [r4, #20]
 8006608:	e7e5      	b.n	80065d6 <__d2b+0x52>
 800660a:	a801      	add	r0, sp, #4
 800660c:	f7ff fd5a 	bl	80060c4 <__lo0bits>
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	6163      	str	r3, [r4, #20]
 8006614:	2201      	movs	r2, #1
 8006616:	6122      	str	r2, [r4, #16]
 8006618:	3020      	adds	r0, #32
 800661a:	e7e3      	b.n	80065e4 <__d2b+0x60>
 800661c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006620:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006624:	f8c9 0000 	str.w	r0, [r9]
 8006628:	6918      	ldr	r0, [r3, #16]
 800662a:	f7ff fd2b 	bl	8006084 <__hi0bits>
 800662e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006632:	e7df      	b.n	80065f4 <__d2b+0x70>
 8006634:	080077d7 	.word	0x080077d7
 8006638:	080077e8 	.word	0x080077e8

0800663c <_calloc_r>:
 800663c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800663e:	fba1 2402 	umull	r2, r4, r1, r2
 8006642:	b94c      	cbnz	r4, 8006658 <_calloc_r+0x1c>
 8006644:	4611      	mov	r1, r2
 8006646:	9201      	str	r2, [sp, #4]
 8006648:	f000 f87a 	bl	8006740 <_malloc_r>
 800664c:	9a01      	ldr	r2, [sp, #4]
 800664e:	4605      	mov	r5, r0
 8006650:	b930      	cbnz	r0, 8006660 <_calloc_r+0x24>
 8006652:	4628      	mov	r0, r5
 8006654:	b003      	add	sp, #12
 8006656:	bd30      	pop	{r4, r5, pc}
 8006658:	220c      	movs	r2, #12
 800665a:	6002      	str	r2, [r0, #0]
 800665c:	2500      	movs	r5, #0
 800665e:	e7f8      	b.n	8006652 <_calloc_r+0x16>
 8006660:	4621      	mov	r1, r4
 8006662:	f7fe f94d 	bl	8004900 <memset>
 8006666:	e7f4      	b.n	8006652 <_calloc_r+0x16>

08006668 <_free_r>:
 8006668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800666a:	2900      	cmp	r1, #0
 800666c:	d044      	beq.n	80066f8 <_free_r+0x90>
 800666e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006672:	9001      	str	r0, [sp, #4]
 8006674:	2b00      	cmp	r3, #0
 8006676:	f1a1 0404 	sub.w	r4, r1, #4
 800667a:	bfb8      	it	lt
 800667c:	18e4      	addlt	r4, r4, r3
 800667e:	f000 fa9b 	bl	8006bb8 <__malloc_lock>
 8006682:	4a1e      	ldr	r2, [pc, #120]	; (80066fc <_free_r+0x94>)
 8006684:	9801      	ldr	r0, [sp, #4]
 8006686:	6813      	ldr	r3, [r2, #0]
 8006688:	b933      	cbnz	r3, 8006698 <_free_r+0x30>
 800668a:	6063      	str	r3, [r4, #4]
 800668c:	6014      	str	r4, [r2, #0]
 800668e:	b003      	add	sp, #12
 8006690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006694:	f000 ba96 	b.w	8006bc4 <__malloc_unlock>
 8006698:	42a3      	cmp	r3, r4
 800669a:	d908      	bls.n	80066ae <_free_r+0x46>
 800669c:	6825      	ldr	r5, [r4, #0]
 800669e:	1961      	adds	r1, r4, r5
 80066a0:	428b      	cmp	r3, r1
 80066a2:	bf01      	itttt	eq
 80066a4:	6819      	ldreq	r1, [r3, #0]
 80066a6:	685b      	ldreq	r3, [r3, #4]
 80066a8:	1949      	addeq	r1, r1, r5
 80066aa:	6021      	streq	r1, [r4, #0]
 80066ac:	e7ed      	b.n	800668a <_free_r+0x22>
 80066ae:	461a      	mov	r2, r3
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	b10b      	cbz	r3, 80066b8 <_free_r+0x50>
 80066b4:	42a3      	cmp	r3, r4
 80066b6:	d9fa      	bls.n	80066ae <_free_r+0x46>
 80066b8:	6811      	ldr	r1, [r2, #0]
 80066ba:	1855      	adds	r5, r2, r1
 80066bc:	42a5      	cmp	r5, r4
 80066be:	d10b      	bne.n	80066d8 <_free_r+0x70>
 80066c0:	6824      	ldr	r4, [r4, #0]
 80066c2:	4421      	add	r1, r4
 80066c4:	1854      	adds	r4, r2, r1
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	6011      	str	r1, [r2, #0]
 80066ca:	d1e0      	bne.n	800668e <_free_r+0x26>
 80066cc:	681c      	ldr	r4, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	6053      	str	r3, [r2, #4]
 80066d2:	4421      	add	r1, r4
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	e7da      	b.n	800668e <_free_r+0x26>
 80066d8:	d902      	bls.n	80066e0 <_free_r+0x78>
 80066da:	230c      	movs	r3, #12
 80066dc:	6003      	str	r3, [r0, #0]
 80066de:	e7d6      	b.n	800668e <_free_r+0x26>
 80066e0:	6825      	ldr	r5, [r4, #0]
 80066e2:	1961      	adds	r1, r4, r5
 80066e4:	428b      	cmp	r3, r1
 80066e6:	bf04      	itt	eq
 80066e8:	6819      	ldreq	r1, [r3, #0]
 80066ea:	685b      	ldreq	r3, [r3, #4]
 80066ec:	6063      	str	r3, [r4, #4]
 80066ee:	bf04      	itt	eq
 80066f0:	1949      	addeq	r1, r1, r5
 80066f2:	6021      	streq	r1, [r4, #0]
 80066f4:	6054      	str	r4, [r2, #4]
 80066f6:	e7ca      	b.n	800668e <_free_r+0x26>
 80066f8:	b003      	add	sp, #12
 80066fa:	bd30      	pop	{r4, r5, pc}
 80066fc:	200003bc 	.word	0x200003bc

08006700 <sbrk_aligned>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4e0e      	ldr	r6, [pc, #56]	; (800673c <sbrk_aligned+0x3c>)
 8006704:	460c      	mov	r4, r1
 8006706:	6831      	ldr	r1, [r6, #0]
 8006708:	4605      	mov	r5, r0
 800670a:	b911      	cbnz	r1, 8006712 <sbrk_aligned+0x12>
 800670c:	f000 f9e8 	bl	8006ae0 <_sbrk_r>
 8006710:	6030      	str	r0, [r6, #0]
 8006712:	4621      	mov	r1, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f9e3 	bl	8006ae0 <_sbrk_r>
 800671a:	1c43      	adds	r3, r0, #1
 800671c:	d00a      	beq.n	8006734 <sbrk_aligned+0x34>
 800671e:	1cc4      	adds	r4, r0, #3
 8006720:	f024 0403 	bic.w	r4, r4, #3
 8006724:	42a0      	cmp	r0, r4
 8006726:	d007      	beq.n	8006738 <sbrk_aligned+0x38>
 8006728:	1a21      	subs	r1, r4, r0
 800672a:	4628      	mov	r0, r5
 800672c:	f000 f9d8 	bl	8006ae0 <_sbrk_r>
 8006730:	3001      	adds	r0, #1
 8006732:	d101      	bne.n	8006738 <sbrk_aligned+0x38>
 8006734:	f04f 34ff 	mov.w	r4, #4294967295
 8006738:	4620      	mov	r0, r4
 800673a:	bd70      	pop	{r4, r5, r6, pc}
 800673c:	200003c0 	.word	0x200003c0

08006740 <_malloc_r>:
 8006740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006744:	1ccd      	adds	r5, r1, #3
 8006746:	f025 0503 	bic.w	r5, r5, #3
 800674a:	3508      	adds	r5, #8
 800674c:	2d0c      	cmp	r5, #12
 800674e:	bf38      	it	cc
 8006750:	250c      	movcc	r5, #12
 8006752:	2d00      	cmp	r5, #0
 8006754:	4607      	mov	r7, r0
 8006756:	db01      	blt.n	800675c <_malloc_r+0x1c>
 8006758:	42a9      	cmp	r1, r5
 800675a:	d905      	bls.n	8006768 <_malloc_r+0x28>
 800675c:	230c      	movs	r3, #12
 800675e:	603b      	str	r3, [r7, #0]
 8006760:	2600      	movs	r6, #0
 8006762:	4630      	mov	r0, r6
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	4e2e      	ldr	r6, [pc, #184]	; (8006824 <_malloc_r+0xe4>)
 800676a:	f000 fa25 	bl	8006bb8 <__malloc_lock>
 800676e:	6833      	ldr	r3, [r6, #0]
 8006770:	461c      	mov	r4, r3
 8006772:	bb34      	cbnz	r4, 80067c2 <_malloc_r+0x82>
 8006774:	4629      	mov	r1, r5
 8006776:	4638      	mov	r0, r7
 8006778:	f7ff ffc2 	bl	8006700 <sbrk_aligned>
 800677c:	1c43      	adds	r3, r0, #1
 800677e:	4604      	mov	r4, r0
 8006780:	d14d      	bne.n	800681e <_malloc_r+0xde>
 8006782:	6834      	ldr	r4, [r6, #0]
 8006784:	4626      	mov	r6, r4
 8006786:	2e00      	cmp	r6, #0
 8006788:	d140      	bne.n	800680c <_malloc_r+0xcc>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	4631      	mov	r1, r6
 800678e:	4638      	mov	r0, r7
 8006790:	eb04 0803 	add.w	r8, r4, r3
 8006794:	f000 f9a4 	bl	8006ae0 <_sbrk_r>
 8006798:	4580      	cmp	r8, r0
 800679a:	d13a      	bne.n	8006812 <_malloc_r+0xd2>
 800679c:	6821      	ldr	r1, [r4, #0]
 800679e:	3503      	adds	r5, #3
 80067a0:	1a6d      	subs	r5, r5, r1
 80067a2:	f025 0503 	bic.w	r5, r5, #3
 80067a6:	3508      	adds	r5, #8
 80067a8:	2d0c      	cmp	r5, #12
 80067aa:	bf38      	it	cc
 80067ac:	250c      	movcc	r5, #12
 80067ae:	4629      	mov	r1, r5
 80067b0:	4638      	mov	r0, r7
 80067b2:	f7ff ffa5 	bl	8006700 <sbrk_aligned>
 80067b6:	3001      	adds	r0, #1
 80067b8:	d02b      	beq.n	8006812 <_malloc_r+0xd2>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	442b      	add	r3, r5
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	e00e      	b.n	80067e0 <_malloc_r+0xa0>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	1b52      	subs	r2, r2, r5
 80067c6:	d41e      	bmi.n	8006806 <_malloc_r+0xc6>
 80067c8:	2a0b      	cmp	r2, #11
 80067ca:	d916      	bls.n	80067fa <_malloc_r+0xba>
 80067cc:	1961      	adds	r1, r4, r5
 80067ce:	42a3      	cmp	r3, r4
 80067d0:	6025      	str	r5, [r4, #0]
 80067d2:	bf18      	it	ne
 80067d4:	6059      	strne	r1, [r3, #4]
 80067d6:	6863      	ldr	r3, [r4, #4]
 80067d8:	bf08      	it	eq
 80067da:	6031      	streq	r1, [r6, #0]
 80067dc:	5162      	str	r2, [r4, r5]
 80067de:	604b      	str	r3, [r1, #4]
 80067e0:	4638      	mov	r0, r7
 80067e2:	f104 060b 	add.w	r6, r4, #11
 80067e6:	f000 f9ed 	bl	8006bc4 <__malloc_unlock>
 80067ea:	f026 0607 	bic.w	r6, r6, #7
 80067ee:	1d23      	adds	r3, r4, #4
 80067f0:	1af2      	subs	r2, r6, r3
 80067f2:	d0b6      	beq.n	8006762 <_malloc_r+0x22>
 80067f4:	1b9b      	subs	r3, r3, r6
 80067f6:	50a3      	str	r3, [r4, r2]
 80067f8:	e7b3      	b.n	8006762 <_malloc_r+0x22>
 80067fa:	6862      	ldr	r2, [r4, #4]
 80067fc:	42a3      	cmp	r3, r4
 80067fe:	bf0c      	ite	eq
 8006800:	6032      	streq	r2, [r6, #0]
 8006802:	605a      	strne	r2, [r3, #4]
 8006804:	e7ec      	b.n	80067e0 <_malloc_r+0xa0>
 8006806:	4623      	mov	r3, r4
 8006808:	6864      	ldr	r4, [r4, #4]
 800680a:	e7b2      	b.n	8006772 <_malloc_r+0x32>
 800680c:	4634      	mov	r4, r6
 800680e:	6876      	ldr	r6, [r6, #4]
 8006810:	e7b9      	b.n	8006786 <_malloc_r+0x46>
 8006812:	230c      	movs	r3, #12
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4638      	mov	r0, r7
 8006818:	f000 f9d4 	bl	8006bc4 <__malloc_unlock>
 800681c:	e7a1      	b.n	8006762 <_malloc_r+0x22>
 800681e:	6025      	str	r5, [r4, #0]
 8006820:	e7de      	b.n	80067e0 <_malloc_r+0xa0>
 8006822:	bf00      	nop
 8006824:	200003bc 	.word	0x200003bc

08006828 <__ssputs_r>:
 8006828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	688e      	ldr	r6, [r1, #8]
 800682e:	429e      	cmp	r6, r3
 8006830:	4682      	mov	sl, r0
 8006832:	460c      	mov	r4, r1
 8006834:	4690      	mov	r8, r2
 8006836:	461f      	mov	r7, r3
 8006838:	d838      	bhi.n	80068ac <__ssputs_r+0x84>
 800683a:	898a      	ldrh	r2, [r1, #12]
 800683c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006840:	d032      	beq.n	80068a8 <__ssputs_r+0x80>
 8006842:	6825      	ldr	r5, [r4, #0]
 8006844:	6909      	ldr	r1, [r1, #16]
 8006846:	eba5 0901 	sub.w	r9, r5, r1
 800684a:	6965      	ldr	r5, [r4, #20]
 800684c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006850:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006854:	3301      	adds	r3, #1
 8006856:	444b      	add	r3, r9
 8006858:	106d      	asrs	r5, r5, #1
 800685a:	429d      	cmp	r5, r3
 800685c:	bf38      	it	cc
 800685e:	461d      	movcc	r5, r3
 8006860:	0553      	lsls	r3, r2, #21
 8006862:	d531      	bpl.n	80068c8 <__ssputs_r+0xa0>
 8006864:	4629      	mov	r1, r5
 8006866:	f7ff ff6b 	bl	8006740 <_malloc_r>
 800686a:	4606      	mov	r6, r0
 800686c:	b950      	cbnz	r0, 8006884 <__ssputs_r+0x5c>
 800686e:	230c      	movs	r3, #12
 8006870:	f8ca 3000 	str.w	r3, [sl]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	6921      	ldr	r1, [r4, #16]
 8006886:	464a      	mov	r2, r9
 8006888:	f7fe f82c 	bl	80048e4 <memcpy>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	6126      	str	r6, [r4, #16]
 800689a:	6165      	str	r5, [r4, #20]
 800689c:	444e      	add	r6, r9
 800689e:	eba5 0509 	sub.w	r5, r5, r9
 80068a2:	6026      	str	r6, [r4, #0]
 80068a4:	60a5      	str	r5, [r4, #8]
 80068a6:	463e      	mov	r6, r7
 80068a8:	42be      	cmp	r6, r7
 80068aa:	d900      	bls.n	80068ae <__ssputs_r+0x86>
 80068ac:	463e      	mov	r6, r7
 80068ae:	6820      	ldr	r0, [r4, #0]
 80068b0:	4632      	mov	r2, r6
 80068b2:	4641      	mov	r1, r8
 80068b4:	f000 f966 	bl	8006b84 <memmove>
 80068b8:	68a3      	ldr	r3, [r4, #8]
 80068ba:	1b9b      	subs	r3, r3, r6
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	4433      	add	r3, r6
 80068c2:	6023      	str	r3, [r4, #0]
 80068c4:	2000      	movs	r0, #0
 80068c6:	e7db      	b.n	8006880 <__ssputs_r+0x58>
 80068c8:	462a      	mov	r2, r5
 80068ca:	f000 f981 	bl	8006bd0 <_realloc_r>
 80068ce:	4606      	mov	r6, r0
 80068d0:	2800      	cmp	r0, #0
 80068d2:	d1e1      	bne.n	8006898 <__ssputs_r+0x70>
 80068d4:	6921      	ldr	r1, [r4, #16]
 80068d6:	4650      	mov	r0, sl
 80068d8:	f7ff fec6 	bl	8006668 <_free_r>
 80068dc:	e7c7      	b.n	800686e <__ssputs_r+0x46>
	...

080068e0 <_svfiprintf_r>:
 80068e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068e4:	4698      	mov	r8, r3
 80068e6:	898b      	ldrh	r3, [r1, #12]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	b09d      	sub	sp, #116	; 0x74
 80068ec:	4607      	mov	r7, r0
 80068ee:	460d      	mov	r5, r1
 80068f0:	4614      	mov	r4, r2
 80068f2:	d50e      	bpl.n	8006912 <_svfiprintf_r+0x32>
 80068f4:	690b      	ldr	r3, [r1, #16]
 80068f6:	b963      	cbnz	r3, 8006912 <_svfiprintf_r+0x32>
 80068f8:	2140      	movs	r1, #64	; 0x40
 80068fa:	f7ff ff21 	bl	8006740 <_malloc_r>
 80068fe:	6028      	str	r0, [r5, #0]
 8006900:	6128      	str	r0, [r5, #16]
 8006902:	b920      	cbnz	r0, 800690e <_svfiprintf_r+0x2e>
 8006904:	230c      	movs	r3, #12
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e0d1      	b.n	8006ab2 <_svfiprintf_r+0x1d2>
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	616b      	str	r3, [r5, #20]
 8006912:	2300      	movs	r3, #0
 8006914:	9309      	str	r3, [sp, #36]	; 0x24
 8006916:	2320      	movs	r3, #32
 8006918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800691c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006920:	2330      	movs	r3, #48	; 0x30
 8006922:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006acc <_svfiprintf_r+0x1ec>
 8006926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800692a:	f04f 0901 	mov.w	r9, #1
 800692e:	4623      	mov	r3, r4
 8006930:	469a      	mov	sl, r3
 8006932:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006936:	b10a      	cbz	r2, 800693c <_svfiprintf_r+0x5c>
 8006938:	2a25      	cmp	r2, #37	; 0x25
 800693a:	d1f9      	bne.n	8006930 <_svfiprintf_r+0x50>
 800693c:	ebba 0b04 	subs.w	fp, sl, r4
 8006940:	d00b      	beq.n	800695a <_svfiprintf_r+0x7a>
 8006942:	465b      	mov	r3, fp
 8006944:	4622      	mov	r2, r4
 8006946:	4629      	mov	r1, r5
 8006948:	4638      	mov	r0, r7
 800694a:	f7ff ff6d 	bl	8006828 <__ssputs_r>
 800694e:	3001      	adds	r0, #1
 8006950:	f000 80aa 	beq.w	8006aa8 <_svfiprintf_r+0x1c8>
 8006954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006956:	445a      	add	r2, fp
 8006958:	9209      	str	r2, [sp, #36]	; 0x24
 800695a:	f89a 3000 	ldrb.w	r3, [sl]
 800695e:	2b00      	cmp	r3, #0
 8006960:	f000 80a2 	beq.w	8006aa8 <_svfiprintf_r+0x1c8>
 8006964:	2300      	movs	r3, #0
 8006966:	f04f 32ff 	mov.w	r2, #4294967295
 800696a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800696e:	f10a 0a01 	add.w	sl, sl, #1
 8006972:	9304      	str	r3, [sp, #16]
 8006974:	9307      	str	r3, [sp, #28]
 8006976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800697a:	931a      	str	r3, [sp, #104]	; 0x68
 800697c:	4654      	mov	r4, sl
 800697e:	2205      	movs	r2, #5
 8006980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006984:	4851      	ldr	r0, [pc, #324]	; (8006acc <_svfiprintf_r+0x1ec>)
 8006986:	f7f9 fc4b 	bl	8000220 <memchr>
 800698a:	9a04      	ldr	r2, [sp, #16]
 800698c:	b9d8      	cbnz	r0, 80069c6 <_svfiprintf_r+0xe6>
 800698e:	06d0      	lsls	r0, r2, #27
 8006990:	bf44      	itt	mi
 8006992:	2320      	movmi	r3, #32
 8006994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006998:	0711      	lsls	r1, r2, #28
 800699a:	bf44      	itt	mi
 800699c:	232b      	movmi	r3, #43	; 0x2b
 800699e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069a2:	f89a 3000 	ldrb.w	r3, [sl]
 80069a6:	2b2a      	cmp	r3, #42	; 0x2a
 80069a8:	d015      	beq.n	80069d6 <_svfiprintf_r+0xf6>
 80069aa:	9a07      	ldr	r2, [sp, #28]
 80069ac:	4654      	mov	r4, sl
 80069ae:	2000      	movs	r0, #0
 80069b0:	f04f 0c0a 	mov.w	ip, #10
 80069b4:	4621      	mov	r1, r4
 80069b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069ba:	3b30      	subs	r3, #48	; 0x30
 80069bc:	2b09      	cmp	r3, #9
 80069be:	d94e      	bls.n	8006a5e <_svfiprintf_r+0x17e>
 80069c0:	b1b0      	cbz	r0, 80069f0 <_svfiprintf_r+0x110>
 80069c2:	9207      	str	r2, [sp, #28]
 80069c4:	e014      	b.n	80069f0 <_svfiprintf_r+0x110>
 80069c6:	eba0 0308 	sub.w	r3, r0, r8
 80069ca:	fa09 f303 	lsl.w	r3, r9, r3
 80069ce:	4313      	orrs	r3, r2
 80069d0:	9304      	str	r3, [sp, #16]
 80069d2:	46a2      	mov	sl, r4
 80069d4:	e7d2      	b.n	800697c <_svfiprintf_r+0x9c>
 80069d6:	9b03      	ldr	r3, [sp, #12]
 80069d8:	1d19      	adds	r1, r3, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	9103      	str	r1, [sp, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfbb      	ittet	lt
 80069e2:	425b      	neglt	r3, r3
 80069e4:	f042 0202 	orrlt.w	r2, r2, #2
 80069e8:	9307      	strge	r3, [sp, #28]
 80069ea:	9307      	strlt	r3, [sp, #28]
 80069ec:	bfb8      	it	lt
 80069ee:	9204      	strlt	r2, [sp, #16]
 80069f0:	7823      	ldrb	r3, [r4, #0]
 80069f2:	2b2e      	cmp	r3, #46	; 0x2e
 80069f4:	d10c      	bne.n	8006a10 <_svfiprintf_r+0x130>
 80069f6:	7863      	ldrb	r3, [r4, #1]
 80069f8:	2b2a      	cmp	r3, #42	; 0x2a
 80069fa:	d135      	bne.n	8006a68 <_svfiprintf_r+0x188>
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	1d1a      	adds	r2, r3, #4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	9203      	str	r2, [sp, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bfb8      	it	lt
 8006a08:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a0c:	3402      	adds	r4, #2
 8006a0e:	9305      	str	r3, [sp, #20]
 8006a10:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006adc <_svfiprintf_r+0x1fc>
 8006a14:	7821      	ldrb	r1, [r4, #0]
 8006a16:	2203      	movs	r2, #3
 8006a18:	4650      	mov	r0, sl
 8006a1a:	f7f9 fc01 	bl	8000220 <memchr>
 8006a1e:	b140      	cbz	r0, 8006a32 <_svfiprintf_r+0x152>
 8006a20:	2340      	movs	r3, #64	; 0x40
 8006a22:	eba0 000a 	sub.w	r0, r0, sl
 8006a26:	fa03 f000 	lsl.w	r0, r3, r0
 8006a2a:	9b04      	ldr	r3, [sp, #16]
 8006a2c:	4303      	orrs	r3, r0
 8006a2e:	3401      	adds	r4, #1
 8006a30:	9304      	str	r3, [sp, #16]
 8006a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a36:	4826      	ldr	r0, [pc, #152]	; (8006ad0 <_svfiprintf_r+0x1f0>)
 8006a38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a3c:	2206      	movs	r2, #6
 8006a3e:	f7f9 fbef 	bl	8000220 <memchr>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d038      	beq.n	8006ab8 <_svfiprintf_r+0x1d8>
 8006a46:	4b23      	ldr	r3, [pc, #140]	; (8006ad4 <_svfiprintf_r+0x1f4>)
 8006a48:	bb1b      	cbnz	r3, 8006a92 <_svfiprintf_r+0x1b2>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	3307      	adds	r3, #7
 8006a4e:	f023 0307 	bic.w	r3, r3, #7
 8006a52:	3308      	adds	r3, #8
 8006a54:	9303      	str	r3, [sp, #12]
 8006a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a58:	4433      	add	r3, r6
 8006a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5c:	e767      	b.n	800692e <_svfiprintf_r+0x4e>
 8006a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a62:	460c      	mov	r4, r1
 8006a64:	2001      	movs	r0, #1
 8006a66:	e7a5      	b.n	80069b4 <_svfiprintf_r+0xd4>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	3401      	adds	r4, #1
 8006a6c:	9305      	str	r3, [sp, #20]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	f04f 0c0a 	mov.w	ip, #10
 8006a74:	4620      	mov	r0, r4
 8006a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a7a:	3a30      	subs	r2, #48	; 0x30
 8006a7c:	2a09      	cmp	r2, #9
 8006a7e:	d903      	bls.n	8006a88 <_svfiprintf_r+0x1a8>
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d0c5      	beq.n	8006a10 <_svfiprintf_r+0x130>
 8006a84:	9105      	str	r1, [sp, #20]
 8006a86:	e7c3      	b.n	8006a10 <_svfiprintf_r+0x130>
 8006a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a8c:	4604      	mov	r4, r0
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7f0      	b.n	8006a74 <_svfiprintf_r+0x194>
 8006a92:	ab03      	add	r3, sp, #12
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	462a      	mov	r2, r5
 8006a98:	4b0f      	ldr	r3, [pc, #60]	; (8006ad8 <_svfiprintf_r+0x1f8>)
 8006a9a:	a904      	add	r1, sp, #16
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7fd ffd7 	bl	8004a50 <_printf_float>
 8006aa2:	1c42      	adds	r2, r0, #1
 8006aa4:	4606      	mov	r6, r0
 8006aa6:	d1d6      	bne.n	8006a56 <_svfiprintf_r+0x176>
 8006aa8:	89ab      	ldrh	r3, [r5, #12]
 8006aaa:	065b      	lsls	r3, r3, #25
 8006aac:	f53f af2c 	bmi.w	8006908 <_svfiprintf_r+0x28>
 8006ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ab2:	b01d      	add	sp, #116	; 0x74
 8006ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab8:	ab03      	add	r3, sp, #12
 8006aba:	9300      	str	r3, [sp, #0]
 8006abc:	462a      	mov	r2, r5
 8006abe:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <_svfiprintf_r+0x1f8>)
 8006ac0:	a904      	add	r1, sp, #16
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f7fe fa68 	bl	8004f98 <_printf_i>
 8006ac8:	e7eb      	b.n	8006aa2 <_svfiprintf_r+0x1c2>
 8006aca:	bf00      	nop
 8006acc:	08007944 	.word	0x08007944
 8006ad0:	0800794e 	.word	0x0800794e
 8006ad4:	08004a51 	.word	0x08004a51
 8006ad8:	08006829 	.word	0x08006829
 8006adc:	0800794a 	.word	0x0800794a

08006ae0 <_sbrk_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4d06      	ldr	r5, [pc, #24]	; (8006afc <_sbrk_r+0x1c>)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	4608      	mov	r0, r1
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	f7fa ffb4 	bl	8001a58 <_sbrk>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d102      	bne.n	8006afa <_sbrk_r+0x1a>
 8006af4:	682b      	ldr	r3, [r5, #0]
 8006af6:	b103      	cbz	r3, 8006afa <_sbrk_r+0x1a>
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	bd38      	pop	{r3, r4, r5, pc}
 8006afc:	200003c4 	.word	0x200003c4

08006b00 <__assert_func>:
 8006b00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b02:	4614      	mov	r4, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4b09      	ldr	r3, [pc, #36]	; (8006b2c <__assert_func+0x2c>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4605      	mov	r5, r0
 8006b0c:	68d8      	ldr	r0, [r3, #12]
 8006b0e:	b14c      	cbz	r4, 8006b24 <__assert_func+0x24>
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <__assert_func+0x30>)
 8006b12:	9100      	str	r1, [sp, #0]
 8006b14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b18:	4906      	ldr	r1, [pc, #24]	; (8006b34 <__assert_func+0x34>)
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	f000 f80e 	bl	8006b3c <fiprintf>
 8006b20:	f000 faac 	bl	800707c <abort>
 8006b24:	4b04      	ldr	r3, [pc, #16]	; (8006b38 <__assert_func+0x38>)
 8006b26:	461c      	mov	r4, r3
 8006b28:	e7f3      	b.n	8006b12 <__assert_func+0x12>
 8006b2a:	bf00      	nop
 8006b2c:	2000000c 	.word	0x2000000c
 8006b30:	08007955 	.word	0x08007955
 8006b34:	08007962 	.word	0x08007962
 8006b38:	08007990 	.word	0x08007990

08006b3c <fiprintf>:
 8006b3c:	b40e      	push	{r1, r2, r3}
 8006b3e:	b503      	push	{r0, r1, lr}
 8006b40:	4601      	mov	r1, r0
 8006b42:	ab03      	add	r3, sp, #12
 8006b44:	4805      	ldr	r0, [pc, #20]	; (8006b5c <fiprintf+0x20>)
 8006b46:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b4a:	6800      	ldr	r0, [r0, #0]
 8006b4c:	9301      	str	r3, [sp, #4]
 8006b4e:	f000 f897 	bl	8006c80 <_vfiprintf_r>
 8006b52:	b002      	add	sp, #8
 8006b54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b58:	b003      	add	sp, #12
 8006b5a:	4770      	bx	lr
 8006b5c:	2000000c 	.word	0x2000000c

08006b60 <__ascii_mbtowc>:
 8006b60:	b082      	sub	sp, #8
 8006b62:	b901      	cbnz	r1, 8006b66 <__ascii_mbtowc+0x6>
 8006b64:	a901      	add	r1, sp, #4
 8006b66:	b142      	cbz	r2, 8006b7a <__ascii_mbtowc+0x1a>
 8006b68:	b14b      	cbz	r3, 8006b7e <__ascii_mbtowc+0x1e>
 8006b6a:	7813      	ldrb	r3, [r2, #0]
 8006b6c:	600b      	str	r3, [r1, #0]
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	1e10      	subs	r0, r2, #0
 8006b72:	bf18      	it	ne
 8006b74:	2001      	movne	r0, #1
 8006b76:	b002      	add	sp, #8
 8006b78:	4770      	bx	lr
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	e7fb      	b.n	8006b76 <__ascii_mbtowc+0x16>
 8006b7e:	f06f 0001 	mvn.w	r0, #1
 8006b82:	e7f8      	b.n	8006b76 <__ascii_mbtowc+0x16>

08006b84 <memmove>:
 8006b84:	4288      	cmp	r0, r1
 8006b86:	b510      	push	{r4, lr}
 8006b88:	eb01 0402 	add.w	r4, r1, r2
 8006b8c:	d902      	bls.n	8006b94 <memmove+0x10>
 8006b8e:	4284      	cmp	r4, r0
 8006b90:	4623      	mov	r3, r4
 8006b92:	d807      	bhi.n	8006ba4 <memmove+0x20>
 8006b94:	1e43      	subs	r3, r0, #1
 8006b96:	42a1      	cmp	r1, r4
 8006b98:	d008      	beq.n	8006bac <memmove+0x28>
 8006b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ba2:	e7f8      	b.n	8006b96 <memmove+0x12>
 8006ba4:	4402      	add	r2, r0
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	428a      	cmp	r2, r1
 8006baa:	d100      	bne.n	8006bae <memmove+0x2a>
 8006bac:	bd10      	pop	{r4, pc}
 8006bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bb6:	e7f7      	b.n	8006ba8 <memmove+0x24>

08006bb8 <__malloc_lock>:
 8006bb8:	4801      	ldr	r0, [pc, #4]	; (8006bc0 <__malloc_lock+0x8>)
 8006bba:	f000 bc1f 	b.w	80073fc <__retarget_lock_acquire_recursive>
 8006bbe:	bf00      	nop
 8006bc0:	200003c8 	.word	0x200003c8

08006bc4 <__malloc_unlock>:
 8006bc4:	4801      	ldr	r0, [pc, #4]	; (8006bcc <__malloc_unlock+0x8>)
 8006bc6:	f000 bc1a 	b.w	80073fe <__retarget_lock_release_recursive>
 8006bca:	bf00      	nop
 8006bcc:	200003c8 	.word	0x200003c8

08006bd0 <_realloc_r>:
 8006bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	4614      	mov	r4, r2
 8006bd8:	460e      	mov	r6, r1
 8006bda:	b921      	cbnz	r1, 8006be6 <_realloc_r+0x16>
 8006bdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4611      	mov	r1, r2
 8006be2:	f7ff bdad 	b.w	8006740 <_malloc_r>
 8006be6:	b92a      	cbnz	r2, 8006bf4 <_realloc_r+0x24>
 8006be8:	f7ff fd3e 	bl	8006668 <_free_r>
 8006bec:	4625      	mov	r5, r4
 8006bee:	4628      	mov	r0, r5
 8006bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bf4:	f000 fc6a 	bl	80074cc <_malloc_usable_size_r>
 8006bf8:	4284      	cmp	r4, r0
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	d802      	bhi.n	8006c04 <_realloc_r+0x34>
 8006bfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c02:	d812      	bhi.n	8006c2a <_realloc_r+0x5a>
 8006c04:	4621      	mov	r1, r4
 8006c06:	4640      	mov	r0, r8
 8006c08:	f7ff fd9a 	bl	8006740 <_malloc_r>
 8006c0c:	4605      	mov	r5, r0
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d0ed      	beq.n	8006bee <_realloc_r+0x1e>
 8006c12:	42bc      	cmp	r4, r7
 8006c14:	4622      	mov	r2, r4
 8006c16:	4631      	mov	r1, r6
 8006c18:	bf28      	it	cs
 8006c1a:	463a      	movcs	r2, r7
 8006c1c:	f7fd fe62 	bl	80048e4 <memcpy>
 8006c20:	4631      	mov	r1, r6
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fd20 	bl	8006668 <_free_r>
 8006c28:	e7e1      	b.n	8006bee <_realloc_r+0x1e>
 8006c2a:	4635      	mov	r5, r6
 8006c2c:	e7df      	b.n	8006bee <_realloc_r+0x1e>

08006c2e <__sfputc_r>:
 8006c2e:	6893      	ldr	r3, [r2, #8]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	b410      	push	{r4}
 8006c36:	6093      	str	r3, [r2, #8]
 8006c38:	da08      	bge.n	8006c4c <__sfputc_r+0x1e>
 8006c3a:	6994      	ldr	r4, [r2, #24]
 8006c3c:	42a3      	cmp	r3, r4
 8006c3e:	db01      	blt.n	8006c44 <__sfputc_r+0x16>
 8006c40:	290a      	cmp	r1, #10
 8006c42:	d103      	bne.n	8006c4c <__sfputc_r+0x1e>
 8006c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c48:	f000 b94a 	b.w	8006ee0 <__swbuf_r>
 8006c4c:	6813      	ldr	r3, [r2, #0]
 8006c4e:	1c58      	adds	r0, r3, #1
 8006c50:	6010      	str	r0, [r2, #0]
 8006c52:	7019      	strb	r1, [r3, #0]
 8006c54:	4608      	mov	r0, r1
 8006c56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <__sfputs_r>:
 8006c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5e:	4606      	mov	r6, r0
 8006c60:	460f      	mov	r7, r1
 8006c62:	4614      	mov	r4, r2
 8006c64:	18d5      	adds	r5, r2, r3
 8006c66:	42ac      	cmp	r4, r5
 8006c68:	d101      	bne.n	8006c6e <__sfputs_r+0x12>
 8006c6a:	2000      	movs	r0, #0
 8006c6c:	e007      	b.n	8006c7e <__sfputs_r+0x22>
 8006c6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c72:	463a      	mov	r2, r7
 8006c74:	4630      	mov	r0, r6
 8006c76:	f7ff ffda 	bl	8006c2e <__sfputc_r>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d1f3      	bne.n	8006c66 <__sfputs_r+0xa>
 8006c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c80 <_vfiprintf_r>:
 8006c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c84:	460d      	mov	r5, r1
 8006c86:	b09d      	sub	sp, #116	; 0x74
 8006c88:	4614      	mov	r4, r2
 8006c8a:	4698      	mov	r8, r3
 8006c8c:	4606      	mov	r6, r0
 8006c8e:	b118      	cbz	r0, 8006c98 <_vfiprintf_r+0x18>
 8006c90:	6983      	ldr	r3, [r0, #24]
 8006c92:	b90b      	cbnz	r3, 8006c98 <_vfiprintf_r+0x18>
 8006c94:	f000 fb14 	bl	80072c0 <__sinit>
 8006c98:	4b89      	ldr	r3, [pc, #548]	; (8006ec0 <_vfiprintf_r+0x240>)
 8006c9a:	429d      	cmp	r5, r3
 8006c9c:	d11b      	bne.n	8006cd6 <_vfiprintf_r+0x56>
 8006c9e:	6875      	ldr	r5, [r6, #4]
 8006ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ca2:	07d9      	lsls	r1, r3, #31
 8006ca4:	d405      	bmi.n	8006cb2 <_vfiprintf_r+0x32>
 8006ca6:	89ab      	ldrh	r3, [r5, #12]
 8006ca8:	059a      	lsls	r2, r3, #22
 8006caa:	d402      	bmi.n	8006cb2 <_vfiprintf_r+0x32>
 8006cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cae:	f000 fba5 	bl	80073fc <__retarget_lock_acquire_recursive>
 8006cb2:	89ab      	ldrh	r3, [r5, #12]
 8006cb4:	071b      	lsls	r3, r3, #28
 8006cb6:	d501      	bpl.n	8006cbc <_vfiprintf_r+0x3c>
 8006cb8:	692b      	ldr	r3, [r5, #16]
 8006cba:	b9eb      	cbnz	r3, 8006cf8 <_vfiprintf_r+0x78>
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	4630      	mov	r0, r6
 8006cc0:	f000 f96e 	bl	8006fa0 <__swsetup_r>
 8006cc4:	b1c0      	cbz	r0, 8006cf8 <_vfiprintf_r+0x78>
 8006cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc8:	07dc      	lsls	r4, r3, #31
 8006cca:	d50e      	bpl.n	8006cea <_vfiprintf_r+0x6a>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b01d      	add	sp, #116	; 0x74
 8006cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd6:	4b7b      	ldr	r3, [pc, #492]	; (8006ec4 <_vfiprintf_r+0x244>)
 8006cd8:	429d      	cmp	r5, r3
 8006cda:	d101      	bne.n	8006ce0 <_vfiprintf_r+0x60>
 8006cdc:	68b5      	ldr	r5, [r6, #8]
 8006cde:	e7df      	b.n	8006ca0 <_vfiprintf_r+0x20>
 8006ce0:	4b79      	ldr	r3, [pc, #484]	; (8006ec8 <_vfiprintf_r+0x248>)
 8006ce2:	429d      	cmp	r5, r3
 8006ce4:	bf08      	it	eq
 8006ce6:	68f5      	ldreq	r5, [r6, #12]
 8006ce8:	e7da      	b.n	8006ca0 <_vfiprintf_r+0x20>
 8006cea:	89ab      	ldrh	r3, [r5, #12]
 8006cec:	0598      	lsls	r0, r3, #22
 8006cee:	d4ed      	bmi.n	8006ccc <_vfiprintf_r+0x4c>
 8006cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cf2:	f000 fb84 	bl	80073fe <__retarget_lock_release_recursive>
 8006cf6:	e7e9      	b.n	8006ccc <_vfiprintf_r+0x4c>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d02:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d06:	2330      	movs	r3, #48	; 0x30
 8006d08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ecc <_vfiprintf_r+0x24c>
 8006d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d10:	f04f 0901 	mov.w	r9, #1
 8006d14:	4623      	mov	r3, r4
 8006d16:	469a      	mov	sl, r3
 8006d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1c:	b10a      	cbz	r2, 8006d22 <_vfiprintf_r+0xa2>
 8006d1e:	2a25      	cmp	r2, #37	; 0x25
 8006d20:	d1f9      	bne.n	8006d16 <_vfiprintf_r+0x96>
 8006d22:	ebba 0b04 	subs.w	fp, sl, r4
 8006d26:	d00b      	beq.n	8006d40 <_vfiprintf_r+0xc0>
 8006d28:	465b      	mov	r3, fp
 8006d2a:	4622      	mov	r2, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	4630      	mov	r0, r6
 8006d30:	f7ff ff94 	bl	8006c5c <__sfputs_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	f000 80aa 	beq.w	8006e8e <_vfiprintf_r+0x20e>
 8006d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d3c:	445a      	add	r2, fp
 8006d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d40:	f89a 3000 	ldrb.w	r3, [sl]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 80a2 	beq.w	8006e8e <_vfiprintf_r+0x20e>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d54:	f10a 0a01 	add.w	sl, sl, #1
 8006d58:	9304      	str	r3, [sp, #16]
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d60:	931a      	str	r3, [sp, #104]	; 0x68
 8006d62:	4654      	mov	r4, sl
 8006d64:	2205      	movs	r2, #5
 8006d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d6a:	4858      	ldr	r0, [pc, #352]	; (8006ecc <_vfiprintf_r+0x24c>)
 8006d6c:	f7f9 fa58 	bl	8000220 <memchr>
 8006d70:	9a04      	ldr	r2, [sp, #16]
 8006d72:	b9d8      	cbnz	r0, 8006dac <_vfiprintf_r+0x12c>
 8006d74:	06d1      	lsls	r1, r2, #27
 8006d76:	bf44      	itt	mi
 8006d78:	2320      	movmi	r3, #32
 8006d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7e:	0713      	lsls	r3, r2, #28
 8006d80:	bf44      	itt	mi
 8006d82:	232b      	movmi	r3, #43	; 0x2b
 8006d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d88:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8e:	d015      	beq.n	8006dbc <_vfiprintf_r+0x13c>
 8006d90:	9a07      	ldr	r2, [sp, #28]
 8006d92:	4654      	mov	r4, sl
 8006d94:	2000      	movs	r0, #0
 8006d96:	f04f 0c0a 	mov.w	ip, #10
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da0:	3b30      	subs	r3, #48	; 0x30
 8006da2:	2b09      	cmp	r3, #9
 8006da4:	d94e      	bls.n	8006e44 <_vfiprintf_r+0x1c4>
 8006da6:	b1b0      	cbz	r0, 8006dd6 <_vfiprintf_r+0x156>
 8006da8:	9207      	str	r2, [sp, #28]
 8006daa:	e014      	b.n	8006dd6 <_vfiprintf_r+0x156>
 8006dac:	eba0 0308 	sub.w	r3, r0, r8
 8006db0:	fa09 f303 	lsl.w	r3, r9, r3
 8006db4:	4313      	orrs	r3, r2
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	46a2      	mov	sl, r4
 8006dba:	e7d2      	b.n	8006d62 <_vfiprintf_r+0xe2>
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	1d19      	adds	r1, r3, #4
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	9103      	str	r1, [sp, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	bfbb      	ittet	lt
 8006dc8:	425b      	neglt	r3, r3
 8006dca:	f042 0202 	orrlt.w	r2, r2, #2
 8006dce:	9307      	strge	r3, [sp, #28]
 8006dd0:	9307      	strlt	r3, [sp, #28]
 8006dd2:	bfb8      	it	lt
 8006dd4:	9204      	strlt	r2, [sp, #16]
 8006dd6:	7823      	ldrb	r3, [r4, #0]
 8006dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dda:	d10c      	bne.n	8006df6 <_vfiprintf_r+0x176>
 8006ddc:	7863      	ldrb	r3, [r4, #1]
 8006dde:	2b2a      	cmp	r3, #42	; 0x2a
 8006de0:	d135      	bne.n	8006e4e <_vfiprintf_r+0x1ce>
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	9203      	str	r2, [sp, #12]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfb8      	it	lt
 8006dee:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df2:	3402      	adds	r4, #2
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006edc <_vfiprintf_r+0x25c>
 8006dfa:	7821      	ldrb	r1, [r4, #0]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	4650      	mov	r0, sl
 8006e00:	f7f9 fa0e 	bl	8000220 <memchr>
 8006e04:	b140      	cbz	r0, 8006e18 <_vfiprintf_r+0x198>
 8006e06:	2340      	movs	r3, #64	; 0x40
 8006e08:	eba0 000a 	sub.w	r0, r0, sl
 8006e0c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e10:	9b04      	ldr	r3, [sp, #16]
 8006e12:	4303      	orrs	r3, r0
 8006e14:	3401      	adds	r4, #1
 8006e16:	9304      	str	r3, [sp, #16]
 8006e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1c:	482c      	ldr	r0, [pc, #176]	; (8006ed0 <_vfiprintf_r+0x250>)
 8006e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e22:	2206      	movs	r2, #6
 8006e24:	f7f9 f9fc 	bl	8000220 <memchr>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d03f      	beq.n	8006eac <_vfiprintf_r+0x22c>
 8006e2c:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <_vfiprintf_r+0x254>)
 8006e2e:	bb1b      	cbnz	r3, 8006e78 <_vfiprintf_r+0x1f8>
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	3307      	adds	r3, #7
 8006e34:	f023 0307 	bic.w	r3, r3, #7
 8006e38:	3308      	adds	r3, #8
 8006e3a:	9303      	str	r3, [sp, #12]
 8006e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3e:	443b      	add	r3, r7
 8006e40:	9309      	str	r3, [sp, #36]	; 0x24
 8006e42:	e767      	b.n	8006d14 <_vfiprintf_r+0x94>
 8006e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e48:	460c      	mov	r4, r1
 8006e4a:	2001      	movs	r0, #1
 8006e4c:	e7a5      	b.n	8006d9a <_vfiprintf_r+0x11a>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	3401      	adds	r4, #1
 8006e52:	9305      	str	r3, [sp, #20]
 8006e54:	4619      	mov	r1, r3
 8006e56:	f04f 0c0a 	mov.w	ip, #10
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e60:	3a30      	subs	r2, #48	; 0x30
 8006e62:	2a09      	cmp	r2, #9
 8006e64:	d903      	bls.n	8006e6e <_vfiprintf_r+0x1ee>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0c5      	beq.n	8006df6 <_vfiprintf_r+0x176>
 8006e6a:	9105      	str	r1, [sp, #20]
 8006e6c:	e7c3      	b.n	8006df6 <_vfiprintf_r+0x176>
 8006e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e72:	4604      	mov	r4, r0
 8006e74:	2301      	movs	r3, #1
 8006e76:	e7f0      	b.n	8006e5a <_vfiprintf_r+0x1da>
 8006e78:	ab03      	add	r3, sp, #12
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	462a      	mov	r2, r5
 8006e7e:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <_vfiprintf_r+0x258>)
 8006e80:	a904      	add	r1, sp, #16
 8006e82:	4630      	mov	r0, r6
 8006e84:	f7fd fde4 	bl	8004a50 <_printf_float>
 8006e88:	4607      	mov	r7, r0
 8006e8a:	1c78      	adds	r0, r7, #1
 8006e8c:	d1d6      	bne.n	8006e3c <_vfiprintf_r+0x1bc>
 8006e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e90:	07d9      	lsls	r1, r3, #31
 8006e92:	d405      	bmi.n	8006ea0 <_vfiprintf_r+0x220>
 8006e94:	89ab      	ldrh	r3, [r5, #12]
 8006e96:	059a      	lsls	r2, r3, #22
 8006e98:	d402      	bmi.n	8006ea0 <_vfiprintf_r+0x220>
 8006e9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9c:	f000 faaf 	bl	80073fe <__retarget_lock_release_recursive>
 8006ea0:	89ab      	ldrh	r3, [r5, #12]
 8006ea2:	065b      	lsls	r3, r3, #25
 8006ea4:	f53f af12 	bmi.w	8006ccc <_vfiprintf_r+0x4c>
 8006ea8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eaa:	e711      	b.n	8006cd0 <_vfiprintf_r+0x50>
 8006eac:	ab03      	add	r3, sp, #12
 8006eae:	9300      	str	r3, [sp, #0]
 8006eb0:	462a      	mov	r2, r5
 8006eb2:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <_vfiprintf_r+0x258>)
 8006eb4:	a904      	add	r1, sp, #16
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7fe f86e 	bl	8004f98 <_printf_i>
 8006ebc:	e7e4      	b.n	8006e88 <_vfiprintf_r+0x208>
 8006ebe:	bf00      	nop
 8006ec0:	08007abc 	.word	0x08007abc
 8006ec4:	08007adc 	.word	0x08007adc
 8006ec8:	08007a9c 	.word	0x08007a9c
 8006ecc:	08007944 	.word	0x08007944
 8006ed0:	0800794e 	.word	0x0800794e
 8006ed4:	08004a51 	.word	0x08004a51
 8006ed8:	08006c5d 	.word	0x08006c5d
 8006edc:	0800794a 	.word	0x0800794a

08006ee0 <__swbuf_r>:
 8006ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ee2:	460e      	mov	r6, r1
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	4605      	mov	r5, r0
 8006ee8:	b118      	cbz	r0, 8006ef2 <__swbuf_r+0x12>
 8006eea:	6983      	ldr	r3, [r0, #24]
 8006eec:	b90b      	cbnz	r3, 8006ef2 <__swbuf_r+0x12>
 8006eee:	f000 f9e7 	bl	80072c0 <__sinit>
 8006ef2:	4b21      	ldr	r3, [pc, #132]	; (8006f78 <__swbuf_r+0x98>)
 8006ef4:	429c      	cmp	r4, r3
 8006ef6:	d12b      	bne.n	8006f50 <__swbuf_r+0x70>
 8006ef8:	686c      	ldr	r4, [r5, #4]
 8006efa:	69a3      	ldr	r3, [r4, #24]
 8006efc:	60a3      	str	r3, [r4, #8]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	071a      	lsls	r2, r3, #28
 8006f02:	d52f      	bpl.n	8006f64 <__swbuf_r+0x84>
 8006f04:	6923      	ldr	r3, [r4, #16]
 8006f06:	b36b      	cbz	r3, 8006f64 <__swbuf_r+0x84>
 8006f08:	6923      	ldr	r3, [r4, #16]
 8006f0a:	6820      	ldr	r0, [r4, #0]
 8006f0c:	1ac0      	subs	r0, r0, r3
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	b2f6      	uxtb	r6, r6
 8006f12:	4283      	cmp	r3, r0
 8006f14:	4637      	mov	r7, r6
 8006f16:	dc04      	bgt.n	8006f22 <__swbuf_r+0x42>
 8006f18:	4621      	mov	r1, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	f000 f93c 	bl	8007198 <_fflush_r>
 8006f20:	bb30      	cbnz	r0, 8006f70 <__swbuf_r+0x90>
 8006f22:	68a3      	ldr	r3, [r4, #8]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	60a3      	str	r3, [r4, #8]
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	6022      	str	r2, [r4, #0]
 8006f2e:	701e      	strb	r6, [r3, #0]
 8006f30:	6963      	ldr	r3, [r4, #20]
 8006f32:	3001      	adds	r0, #1
 8006f34:	4283      	cmp	r3, r0
 8006f36:	d004      	beq.n	8006f42 <__swbuf_r+0x62>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d506      	bpl.n	8006f4c <__swbuf_r+0x6c>
 8006f3e:	2e0a      	cmp	r6, #10
 8006f40:	d104      	bne.n	8006f4c <__swbuf_r+0x6c>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f000 f927 	bl	8007198 <_fflush_r>
 8006f4a:	b988      	cbnz	r0, 8006f70 <__swbuf_r+0x90>
 8006f4c:	4638      	mov	r0, r7
 8006f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f50:	4b0a      	ldr	r3, [pc, #40]	; (8006f7c <__swbuf_r+0x9c>)
 8006f52:	429c      	cmp	r4, r3
 8006f54:	d101      	bne.n	8006f5a <__swbuf_r+0x7a>
 8006f56:	68ac      	ldr	r4, [r5, #8]
 8006f58:	e7cf      	b.n	8006efa <__swbuf_r+0x1a>
 8006f5a:	4b09      	ldr	r3, [pc, #36]	; (8006f80 <__swbuf_r+0xa0>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	bf08      	it	eq
 8006f60:	68ec      	ldreq	r4, [r5, #12]
 8006f62:	e7ca      	b.n	8006efa <__swbuf_r+0x1a>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4628      	mov	r0, r5
 8006f68:	f000 f81a 	bl	8006fa0 <__swsetup_r>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d0cb      	beq.n	8006f08 <__swbuf_r+0x28>
 8006f70:	f04f 37ff 	mov.w	r7, #4294967295
 8006f74:	e7ea      	b.n	8006f4c <__swbuf_r+0x6c>
 8006f76:	bf00      	nop
 8006f78:	08007abc 	.word	0x08007abc
 8006f7c:	08007adc 	.word	0x08007adc
 8006f80:	08007a9c 	.word	0x08007a9c

08006f84 <__ascii_wctomb>:
 8006f84:	b149      	cbz	r1, 8006f9a <__ascii_wctomb+0x16>
 8006f86:	2aff      	cmp	r2, #255	; 0xff
 8006f88:	bf85      	ittet	hi
 8006f8a:	238a      	movhi	r3, #138	; 0x8a
 8006f8c:	6003      	strhi	r3, [r0, #0]
 8006f8e:	700a      	strbls	r2, [r1, #0]
 8006f90:	f04f 30ff 	movhi.w	r0, #4294967295
 8006f94:	bf98      	it	ls
 8006f96:	2001      	movls	r0, #1
 8006f98:	4770      	bx	lr
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	4770      	bx	lr
	...

08006fa0 <__swsetup_r>:
 8006fa0:	4b32      	ldr	r3, [pc, #200]	; (800706c <__swsetup_r+0xcc>)
 8006fa2:	b570      	push	{r4, r5, r6, lr}
 8006fa4:	681d      	ldr	r5, [r3, #0]
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	b125      	cbz	r5, 8006fb6 <__swsetup_r+0x16>
 8006fac:	69ab      	ldr	r3, [r5, #24]
 8006fae:	b913      	cbnz	r3, 8006fb6 <__swsetup_r+0x16>
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	f000 f985 	bl	80072c0 <__sinit>
 8006fb6:	4b2e      	ldr	r3, [pc, #184]	; (8007070 <__swsetup_r+0xd0>)
 8006fb8:	429c      	cmp	r4, r3
 8006fba:	d10f      	bne.n	8006fdc <__swsetup_r+0x3c>
 8006fbc:	686c      	ldr	r4, [r5, #4]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fc4:	0719      	lsls	r1, r3, #28
 8006fc6:	d42c      	bmi.n	8007022 <__swsetup_r+0x82>
 8006fc8:	06dd      	lsls	r5, r3, #27
 8006fca:	d411      	bmi.n	8006ff0 <__swsetup_r+0x50>
 8006fcc:	2309      	movs	r3, #9
 8006fce:	6033      	str	r3, [r6, #0]
 8006fd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8006fda:	e03e      	b.n	800705a <__swsetup_r+0xba>
 8006fdc:	4b25      	ldr	r3, [pc, #148]	; (8007074 <__swsetup_r+0xd4>)
 8006fde:	429c      	cmp	r4, r3
 8006fe0:	d101      	bne.n	8006fe6 <__swsetup_r+0x46>
 8006fe2:	68ac      	ldr	r4, [r5, #8]
 8006fe4:	e7eb      	b.n	8006fbe <__swsetup_r+0x1e>
 8006fe6:	4b24      	ldr	r3, [pc, #144]	; (8007078 <__swsetup_r+0xd8>)
 8006fe8:	429c      	cmp	r4, r3
 8006fea:	bf08      	it	eq
 8006fec:	68ec      	ldreq	r4, [r5, #12]
 8006fee:	e7e6      	b.n	8006fbe <__swsetup_r+0x1e>
 8006ff0:	0758      	lsls	r0, r3, #29
 8006ff2:	d512      	bpl.n	800701a <__swsetup_r+0x7a>
 8006ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ff6:	b141      	cbz	r1, 800700a <__swsetup_r+0x6a>
 8006ff8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ffc:	4299      	cmp	r1, r3
 8006ffe:	d002      	beq.n	8007006 <__swsetup_r+0x66>
 8007000:	4630      	mov	r0, r6
 8007002:	f7ff fb31 	bl	8006668 <_free_r>
 8007006:	2300      	movs	r3, #0
 8007008:	6363      	str	r3, [r4, #52]	; 0x34
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007010:	81a3      	strh	r3, [r4, #12]
 8007012:	2300      	movs	r3, #0
 8007014:	6063      	str	r3, [r4, #4]
 8007016:	6923      	ldr	r3, [r4, #16]
 8007018:	6023      	str	r3, [r4, #0]
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f043 0308 	orr.w	r3, r3, #8
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	b94b      	cbnz	r3, 800703a <__swsetup_r+0x9a>
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800702c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007030:	d003      	beq.n	800703a <__swsetup_r+0x9a>
 8007032:	4621      	mov	r1, r4
 8007034:	4630      	mov	r0, r6
 8007036:	f000 fa09 	bl	800744c <__smakebuf_r>
 800703a:	89a0      	ldrh	r0, [r4, #12]
 800703c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007040:	f010 0301 	ands.w	r3, r0, #1
 8007044:	d00a      	beq.n	800705c <__swsetup_r+0xbc>
 8007046:	2300      	movs	r3, #0
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	6963      	ldr	r3, [r4, #20]
 800704c:	425b      	negs	r3, r3
 800704e:	61a3      	str	r3, [r4, #24]
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	b943      	cbnz	r3, 8007066 <__swsetup_r+0xc6>
 8007054:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007058:	d1ba      	bne.n	8006fd0 <__swsetup_r+0x30>
 800705a:	bd70      	pop	{r4, r5, r6, pc}
 800705c:	0781      	lsls	r1, r0, #30
 800705e:	bf58      	it	pl
 8007060:	6963      	ldrpl	r3, [r4, #20]
 8007062:	60a3      	str	r3, [r4, #8]
 8007064:	e7f4      	b.n	8007050 <__swsetup_r+0xb0>
 8007066:	2000      	movs	r0, #0
 8007068:	e7f7      	b.n	800705a <__swsetup_r+0xba>
 800706a:	bf00      	nop
 800706c:	2000000c 	.word	0x2000000c
 8007070:	08007abc 	.word	0x08007abc
 8007074:	08007adc 	.word	0x08007adc
 8007078:	08007a9c 	.word	0x08007a9c

0800707c <abort>:
 800707c:	b508      	push	{r3, lr}
 800707e:	2006      	movs	r0, #6
 8007080:	f000 fa54 	bl	800752c <raise>
 8007084:	2001      	movs	r0, #1
 8007086:	f7fa fc6f 	bl	8001968 <_exit>
	...

0800708c <__sflush_r>:
 800708c:	898a      	ldrh	r2, [r1, #12]
 800708e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	4605      	mov	r5, r0
 8007094:	0710      	lsls	r0, r2, #28
 8007096:	460c      	mov	r4, r1
 8007098:	d458      	bmi.n	800714c <__sflush_r+0xc0>
 800709a:	684b      	ldr	r3, [r1, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	dc05      	bgt.n	80070ac <__sflush_r+0x20>
 80070a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dc02      	bgt.n	80070ac <__sflush_r+0x20>
 80070a6:	2000      	movs	r0, #0
 80070a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ae:	2e00      	cmp	r6, #0
 80070b0:	d0f9      	beq.n	80070a6 <__sflush_r+0x1a>
 80070b2:	2300      	movs	r3, #0
 80070b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070b8:	682f      	ldr	r7, [r5, #0]
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	d032      	beq.n	8007124 <__sflush_r+0x98>
 80070be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070c0:	89a3      	ldrh	r3, [r4, #12]
 80070c2:	075a      	lsls	r2, r3, #29
 80070c4:	d505      	bpl.n	80070d2 <__sflush_r+0x46>
 80070c6:	6863      	ldr	r3, [r4, #4]
 80070c8:	1ac0      	subs	r0, r0, r3
 80070ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070cc:	b10b      	cbz	r3, 80070d2 <__sflush_r+0x46>
 80070ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070d0:	1ac0      	subs	r0, r0, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	4602      	mov	r2, r0
 80070d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070d8:	6a21      	ldr	r1, [r4, #32]
 80070da:	4628      	mov	r0, r5
 80070dc:	47b0      	blx	r6
 80070de:	1c43      	adds	r3, r0, #1
 80070e0:	89a3      	ldrh	r3, [r4, #12]
 80070e2:	d106      	bne.n	80070f2 <__sflush_r+0x66>
 80070e4:	6829      	ldr	r1, [r5, #0]
 80070e6:	291d      	cmp	r1, #29
 80070e8:	d82c      	bhi.n	8007144 <__sflush_r+0xb8>
 80070ea:	4a2a      	ldr	r2, [pc, #168]	; (8007194 <__sflush_r+0x108>)
 80070ec:	40ca      	lsrs	r2, r1
 80070ee:	07d6      	lsls	r6, r2, #31
 80070f0:	d528      	bpl.n	8007144 <__sflush_r+0xb8>
 80070f2:	2200      	movs	r2, #0
 80070f4:	6062      	str	r2, [r4, #4]
 80070f6:	04d9      	lsls	r1, r3, #19
 80070f8:	6922      	ldr	r2, [r4, #16]
 80070fa:	6022      	str	r2, [r4, #0]
 80070fc:	d504      	bpl.n	8007108 <__sflush_r+0x7c>
 80070fe:	1c42      	adds	r2, r0, #1
 8007100:	d101      	bne.n	8007106 <__sflush_r+0x7a>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	b903      	cbnz	r3, 8007108 <__sflush_r+0x7c>
 8007106:	6560      	str	r0, [r4, #84]	; 0x54
 8007108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800710a:	602f      	str	r7, [r5, #0]
 800710c:	2900      	cmp	r1, #0
 800710e:	d0ca      	beq.n	80070a6 <__sflush_r+0x1a>
 8007110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007114:	4299      	cmp	r1, r3
 8007116:	d002      	beq.n	800711e <__sflush_r+0x92>
 8007118:	4628      	mov	r0, r5
 800711a:	f7ff faa5 	bl	8006668 <_free_r>
 800711e:	2000      	movs	r0, #0
 8007120:	6360      	str	r0, [r4, #52]	; 0x34
 8007122:	e7c1      	b.n	80070a8 <__sflush_r+0x1c>
 8007124:	6a21      	ldr	r1, [r4, #32]
 8007126:	2301      	movs	r3, #1
 8007128:	4628      	mov	r0, r5
 800712a:	47b0      	blx	r6
 800712c:	1c41      	adds	r1, r0, #1
 800712e:	d1c7      	bne.n	80070c0 <__sflush_r+0x34>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0c4      	beq.n	80070c0 <__sflush_r+0x34>
 8007136:	2b1d      	cmp	r3, #29
 8007138:	d001      	beq.n	800713e <__sflush_r+0xb2>
 800713a:	2b16      	cmp	r3, #22
 800713c:	d101      	bne.n	8007142 <__sflush_r+0xb6>
 800713e:	602f      	str	r7, [r5, #0]
 8007140:	e7b1      	b.n	80070a6 <__sflush_r+0x1a>
 8007142:	89a3      	ldrh	r3, [r4, #12]
 8007144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007148:	81a3      	strh	r3, [r4, #12]
 800714a:	e7ad      	b.n	80070a8 <__sflush_r+0x1c>
 800714c:	690f      	ldr	r7, [r1, #16]
 800714e:	2f00      	cmp	r7, #0
 8007150:	d0a9      	beq.n	80070a6 <__sflush_r+0x1a>
 8007152:	0793      	lsls	r3, r2, #30
 8007154:	680e      	ldr	r6, [r1, #0]
 8007156:	bf08      	it	eq
 8007158:	694b      	ldreq	r3, [r1, #20]
 800715a:	600f      	str	r7, [r1, #0]
 800715c:	bf18      	it	ne
 800715e:	2300      	movne	r3, #0
 8007160:	eba6 0807 	sub.w	r8, r6, r7
 8007164:	608b      	str	r3, [r1, #8]
 8007166:	f1b8 0f00 	cmp.w	r8, #0
 800716a:	dd9c      	ble.n	80070a6 <__sflush_r+0x1a>
 800716c:	6a21      	ldr	r1, [r4, #32]
 800716e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007170:	4643      	mov	r3, r8
 8007172:	463a      	mov	r2, r7
 8007174:	4628      	mov	r0, r5
 8007176:	47b0      	blx	r6
 8007178:	2800      	cmp	r0, #0
 800717a:	dc06      	bgt.n	800718a <__sflush_r+0xfe>
 800717c:	89a3      	ldrh	r3, [r4, #12]
 800717e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007182:	81a3      	strh	r3, [r4, #12]
 8007184:	f04f 30ff 	mov.w	r0, #4294967295
 8007188:	e78e      	b.n	80070a8 <__sflush_r+0x1c>
 800718a:	4407      	add	r7, r0
 800718c:	eba8 0800 	sub.w	r8, r8, r0
 8007190:	e7e9      	b.n	8007166 <__sflush_r+0xda>
 8007192:	bf00      	nop
 8007194:	20400001 	.word	0x20400001

08007198 <_fflush_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	690b      	ldr	r3, [r1, #16]
 800719c:	4605      	mov	r5, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	b913      	cbnz	r3, 80071a8 <_fflush_r+0x10>
 80071a2:	2500      	movs	r5, #0
 80071a4:	4628      	mov	r0, r5
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	b118      	cbz	r0, 80071b2 <_fflush_r+0x1a>
 80071aa:	6983      	ldr	r3, [r0, #24]
 80071ac:	b90b      	cbnz	r3, 80071b2 <_fflush_r+0x1a>
 80071ae:	f000 f887 	bl	80072c0 <__sinit>
 80071b2:	4b14      	ldr	r3, [pc, #80]	; (8007204 <_fflush_r+0x6c>)
 80071b4:	429c      	cmp	r4, r3
 80071b6:	d11b      	bne.n	80071f0 <_fflush_r+0x58>
 80071b8:	686c      	ldr	r4, [r5, #4]
 80071ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0ef      	beq.n	80071a2 <_fflush_r+0xa>
 80071c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071c4:	07d0      	lsls	r0, r2, #31
 80071c6:	d404      	bmi.n	80071d2 <_fflush_r+0x3a>
 80071c8:	0599      	lsls	r1, r3, #22
 80071ca:	d402      	bmi.n	80071d2 <_fflush_r+0x3a>
 80071cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ce:	f000 f915 	bl	80073fc <__retarget_lock_acquire_recursive>
 80071d2:	4628      	mov	r0, r5
 80071d4:	4621      	mov	r1, r4
 80071d6:	f7ff ff59 	bl	800708c <__sflush_r>
 80071da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071dc:	07da      	lsls	r2, r3, #31
 80071de:	4605      	mov	r5, r0
 80071e0:	d4e0      	bmi.n	80071a4 <_fflush_r+0xc>
 80071e2:	89a3      	ldrh	r3, [r4, #12]
 80071e4:	059b      	lsls	r3, r3, #22
 80071e6:	d4dd      	bmi.n	80071a4 <_fflush_r+0xc>
 80071e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ea:	f000 f908 	bl	80073fe <__retarget_lock_release_recursive>
 80071ee:	e7d9      	b.n	80071a4 <_fflush_r+0xc>
 80071f0:	4b05      	ldr	r3, [pc, #20]	; (8007208 <_fflush_r+0x70>)
 80071f2:	429c      	cmp	r4, r3
 80071f4:	d101      	bne.n	80071fa <_fflush_r+0x62>
 80071f6:	68ac      	ldr	r4, [r5, #8]
 80071f8:	e7df      	b.n	80071ba <_fflush_r+0x22>
 80071fa:	4b04      	ldr	r3, [pc, #16]	; (800720c <_fflush_r+0x74>)
 80071fc:	429c      	cmp	r4, r3
 80071fe:	bf08      	it	eq
 8007200:	68ec      	ldreq	r4, [r5, #12]
 8007202:	e7da      	b.n	80071ba <_fflush_r+0x22>
 8007204:	08007abc 	.word	0x08007abc
 8007208:	08007adc 	.word	0x08007adc
 800720c:	08007a9c 	.word	0x08007a9c

08007210 <std>:
 8007210:	2300      	movs	r3, #0
 8007212:	b510      	push	{r4, lr}
 8007214:	4604      	mov	r4, r0
 8007216:	e9c0 3300 	strd	r3, r3, [r0]
 800721a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800721e:	6083      	str	r3, [r0, #8]
 8007220:	8181      	strh	r1, [r0, #12]
 8007222:	6643      	str	r3, [r0, #100]	; 0x64
 8007224:	81c2      	strh	r2, [r0, #14]
 8007226:	6183      	str	r3, [r0, #24]
 8007228:	4619      	mov	r1, r3
 800722a:	2208      	movs	r2, #8
 800722c:	305c      	adds	r0, #92	; 0x5c
 800722e:	f7fd fb67 	bl	8004900 <memset>
 8007232:	4b05      	ldr	r3, [pc, #20]	; (8007248 <std+0x38>)
 8007234:	6263      	str	r3, [r4, #36]	; 0x24
 8007236:	4b05      	ldr	r3, [pc, #20]	; (800724c <std+0x3c>)
 8007238:	62a3      	str	r3, [r4, #40]	; 0x28
 800723a:	4b05      	ldr	r3, [pc, #20]	; (8007250 <std+0x40>)
 800723c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800723e:	4b05      	ldr	r3, [pc, #20]	; (8007254 <std+0x44>)
 8007240:	6224      	str	r4, [r4, #32]
 8007242:	6323      	str	r3, [r4, #48]	; 0x30
 8007244:	bd10      	pop	{r4, pc}
 8007246:	bf00      	nop
 8007248:	08007565 	.word	0x08007565
 800724c:	08007587 	.word	0x08007587
 8007250:	080075bf 	.word	0x080075bf
 8007254:	080075e3 	.word	0x080075e3

08007258 <_cleanup_r>:
 8007258:	4901      	ldr	r1, [pc, #4]	; (8007260 <_cleanup_r+0x8>)
 800725a:	f000 b8af 	b.w	80073bc <_fwalk_reent>
 800725e:	bf00      	nop
 8007260:	08007199 	.word	0x08007199

08007264 <__sfmoreglue>:
 8007264:	b570      	push	{r4, r5, r6, lr}
 8007266:	2268      	movs	r2, #104	; 0x68
 8007268:	1e4d      	subs	r5, r1, #1
 800726a:	4355      	muls	r5, r2
 800726c:	460e      	mov	r6, r1
 800726e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007272:	f7ff fa65 	bl	8006740 <_malloc_r>
 8007276:	4604      	mov	r4, r0
 8007278:	b140      	cbz	r0, 800728c <__sfmoreglue+0x28>
 800727a:	2100      	movs	r1, #0
 800727c:	e9c0 1600 	strd	r1, r6, [r0]
 8007280:	300c      	adds	r0, #12
 8007282:	60a0      	str	r0, [r4, #8]
 8007284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007288:	f7fd fb3a 	bl	8004900 <memset>
 800728c:	4620      	mov	r0, r4
 800728e:	bd70      	pop	{r4, r5, r6, pc}

08007290 <__sfp_lock_acquire>:
 8007290:	4801      	ldr	r0, [pc, #4]	; (8007298 <__sfp_lock_acquire+0x8>)
 8007292:	f000 b8b3 	b.w	80073fc <__retarget_lock_acquire_recursive>
 8007296:	bf00      	nop
 8007298:	200003c9 	.word	0x200003c9

0800729c <__sfp_lock_release>:
 800729c:	4801      	ldr	r0, [pc, #4]	; (80072a4 <__sfp_lock_release+0x8>)
 800729e:	f000 b8ae 	b.w	80073fe <__retarget_lock_release_recursive>
 80072a2:	bf00      	nop
 80072a4:	200003c9 	.word	0x200003c9

080072a8 <__sinit_lock_acquire>:
 80072a8:	4801      	ldr	r0, [pc, #4]	; (80072b0 <__sinit_lock_acquire+0x8>)
 80072aa:	f000 b8a7 	b.w	80073fc <__retarget_lock_acquire_recursive>
 80072ae:	bf00      	nop
 80072b0:	200003ca 	.word	0x200003ca

080072b4 <__sinit_lock_release>:
 80072b4:	4801      	ldr	r0, [pc, #4]	; (80072bc <__sinit_lock_release+0x8>)
 80072b6:	f000 b8a2 	b.w	80073fe <__retarget_lock_release_recursive>
 80072ba:	bf00      	nop
 80072bc:	200003ca 	.word	0x200003ca

080072c0 <__sinit>:
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4604      	mov	r4, r0
 80072c4:	f7ff fff0 	bl	80072a8 <__sinit_lock_acquire>
 80072c8:	69a3      	ldr	r3, [r4, #24]
 80072ca:	b11b      	cbz	r3, 80072d4 <__sinit+0x14>
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	f7ff bff0 	b.w	80072b4 <__sinit_lock_release>
 80072d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80072d8:	6523      	str	r3, [r4, #80]	; 0x50
 80072da:	4b13      	ldr	r3, [pc, #76]	; (8007328 <__sinit+0x68>)
 80072dc:	4a13      	ldr	r2, [pc, #76]	; (800732c <__sinit+0x6c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	bf04      	itt	eq
 80072e6:	2301      	moveq	r3, #1
 80072e8:	61a3      	streq	r3, [r4, #24]
 80072ea:	4620      	mov	r0, r4
 80072ec:	f000 f820 	bl	8007330 <__sfp>
 80072f0:	6060      	str	r0, [r4, #4]
 80072f2:	4620      	mov	r0, r4
 80072f4:	f000 f81c 	bl	8007330 <__sfp>
 80072f8:	60a0      	str	r0, [r4, #8]
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 f818 	bl	8007330 <__sfp>
 8007300:	2200      	movs	r2, #0
 8007302:	60e0      	str	r0, [r4, #12]
 8007304:	2104      	movs	r1, #4
 8007306:	6860      	ldr	r0, [r4, #4]
 8007308:	f7ff ff82 	bl	8007210 <std>
 800730c:	68a0      	ldr	r0, [r4, #8]
 800730e:	2201      	movs	r2, #1
 8007310:	2109      	movs	r1, #9
 8007312:	f7ff ff7d 	bl	8007210 <std>
 8007316:	68e0      	ldr	r0, [r4, #12]
 8007318:	2202      	movs	r2, #2
 800731a:	2112      	movs	r1, #18
 800731c:	f7ff ff78 	bl	8007210 <std>
 8007320:	2301      	movs	r3, #1
 8007322:	61a3      	str	r3, [r4, #24]
 8007324:	e7d2      	b.n	80072cc <__sinit+0xc>
 8007326:	bf00      	nop
 8007328:	08007720 	.word	0x08007720
 800732c:	08007259 	.word	0x08007259

08007330 <__sfp>:
 8007330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007332:	4607      	mov	r7, r0
 8007334:	f7ff ffac 	bl	8007290 <__sfp_lock_acquire>
 8007338:	4b1e      	ldr	r3, [pc, #120]	; (80073b4 <__sfp+0x84>)
 800733a:	681e      	ldr	r6, [r3, #0]
 800733c:	69b3      	ldr	r3, [r6, #24]
 800733e:	b913      	cbnz	r3, 8007346 <__sfp+0x16>
 8007340:	4630      	mov	r0, r6
 8007342:	f7ff ffbd 	bl	80072c0 <__sinit>
 8007346:	3648      	adds	r6, #72	; 0x48
 8007348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800734c:	3b01      	subs	r3, #1
 800734e:	d503      	bpl.n	8007358 <__sfp+0x28>
 8007350:	6833      	ldr	r3, [r6, #0]
 8007352:	b30b      	cbz	r3, 8007398 <__sfp+0x68>
 8007354:	6836      	ldr	r6, [r6, #0]
 8007356:	e7f7      	b.n	8007348 <__sfp+0x18>
 8007358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800735c:	b9d5      	cbnz	r5, 8007394 <__sfp+0x64>
 800735e:	4b16      	ldr	r3, [pc, #88]	; (80073b8 <__sfp+0x88>)
 8007360:	60e3      	str	r3, [r4, #12]
 8007362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007366:	6665      	str	r5, [r4, #100]	; 0x64
 8007368:	f000 f847 	bl	80073fa <__retarget_lock_init_recursive>
 800736c:	f7ff ff96 	bl	800729c <__sfp_lock_release>
 8007370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007378:	6025      	str	r5, [r4, #0]
 800737a:	61a5      	str	r5, [r4, #24]
 800737c:	2208      	movs	r2, #8
 800737e:	4629      	mov	r1, r5
 8007380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007384:	f7fd fabc 	bl	8004900 <memset>
 8007388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800738c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007390:	4620      	mov	r0, r4
 8007392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007394:	3468      	adds	r4, #104	; 0x68
 8007396:	e7d9      	b.n	800734c <__sfp+0x1c>
 8007398:	2104      	movs	r1, #4
 800739a:	4638      	mov	r0, r7
 800739c:	f7ff ff62 	bl	8007264 <__sfmoreglue>
 80073a0:	4604      	mov	r4, r0
 80073a2:	6030      	str	r0, [r6, #0]
 80073a4:	2800      	cmp	r0, #0
 80073a6:	d1d5      	bne.n	8007354 <__sfp+0x24>
 80073a8:	f7ff ff78 	bl	800729c <__sfp_lock_release>
 80073ac:	230c      	movs	r3, #12
 80073ae:	603b      	str	r3, [r7, #0]
 80073b0:	e7ee      	b.n	8007390 <__sfp+0x60>
 80073b2:	bf00      	nop
 80073b4:	08007720 	.word	0x08007720
 80073b8:	ffff0001 	.word	0xffff0001

080073bc <_fwalk_reent>:
 80073bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073c0:	4606      	mov	r6, r0
 80073c2:	4688      	mov	r8, r1
 80073c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80073c8:	2700      	movs	r7, #0
 80073ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073ce:	f1b9 0901 	subs.w	r9, r9, #1
 80073d2:	d505      	bpl.n	80073e0 <_fwalk_reent+0x24>
 80073d4:	6824      	ldr	r4, [r4, #0]
 80073d6:	2c00      	cmp	r4, #0
 80073d8:	d1f7      	bne.n	80073ca <_fwalk_reent+0xe>
 80073da:	4638      	mov	r0, r7
 80073dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073e0:	89ab      	ldrh	r3, [r5, #12]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d907      	bls.n	80073f6 <_fwalk_reent+0x3a>
 80073e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073ea:	3301      	adds	r3, #1
 80073ec:	d003      	beq.n	80073f6 <_fwalk_reent+0x3a>
 80073ee:	4629      	mov	r1, r5
 80073f0:	4630      	mov	r0, r6
 80073f2:	47c0      	blx	r8
 80073f4:	4307      	orrs	r7, r0
 80073f6:	3568      	adds	r5, #104	; 0x68
 80073f8:	e7e9      	b.n	80073ce <_fwalk_reent+0x12>

080073fa <__retarget_lock_init_recursive>:
 80073fa:	4770      	bx	lr

080073fc <__retarget_lock_acquire_recursive>:
 80073fc:	4770      	bx	lr

080073fe <__retarget_lock_release_recursive>:
 80073fe:	4770      	bx	lr

08007400 <__swhatbuf_r>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	460e      	mov	r6, r1
 8007404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007408:	2900      	cmp	r1, #0
 800740a:	b096      	sub	sp, #88	; 0x58
 800740c:	4614      	mov	r4, r2
 800740e:	461d      	mov	r5, r3
 8007410:	da08      	bge.n	8007424 <__swhatbuf_r+0x24>
 8007412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	061a      	lsls	r2, r3, #24
 800741c:	d410      	bmi.n	8007440 <__swhatbuf_r+0x40>
 800741e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007422:	e00e      	b.n	8007442 <__swhatbuf_r+0x42>
 8007424:	466a      	mov	r2, sp
 8007426:	f000 f903 	bl	8007630 <_fstat_r>
 800742a:	2800      	cmp	r0, #0
 800742c:	dbf1      	blt.n	8007412 <__swhatbuf_r+0x12>
 800742e:	9a01      	ldr	r2, [sp, #4]
 8007430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007438:	425a      	negs	r2, r3
 800743a:	415a      	adcs	r2, r3
 800743c:	602a      	str	r2, [r5, #0]
 800743e:	e7ee      	b.n	800741e <__swhatbuf_r+0x1e>
 8007440:	2340      	movs	r3, #64	; 0x40
 8007442:	2000      	movs	r0, #0
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	b016      	add	sp, #88	; 0x58
 8007448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800744c <__smakebuf_r>:
 800744c:	898b      	ldrh	r3, [r1, #12]
 800744e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007450:	079d      	lsls	r5, r3, #30
 8007452:	4606      	mov	r6, r0
 8007454:	460c      	mov	r4, r1
 8007456:	d507      	bpl.n	8007468 <__smakebuf_r+0x1c>
 8007458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	2301      	movs	r3, #1
 8007462:	6163      	str	r3, [r4, #20]
 8007464:	b002      	add	sp, #8
 8007466:	bd70      	pop	{r4, r5, r6, pc}
 8007468:	ab01      	add	r3, sp, #4
 800746a:	466a      	mov	r2, sp
 800746c:	f7ff ffc8 	bl	8007400 <__swhatbuf_r>
 8007470:	9900      	ldr	r1, [sp, #0]
 8007472:	4605      	mov	r5, r0
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff f963 	bl	8006740 <_malloc_r>
 800747a:	b948      	cbnz	r0, 8007490 <__smakebuf_r+0x44>
 800747c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007480:	059a      	lsls	r2, r3, #22
 8007482:	d4ef      	bmi.n	8007464 <__smakebuf_r+0x18>
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	f043 0302 	orr.w	r3, r3, #2
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7e3      	b.n	8007458 <__smakebuf_r+0xc>
 8007490:	4b0d      	ldr	r3, [pc, #52]	; (80074c8 <__smakebuf_r+0x7c>)
 8007492:	62b3      	str	r3, [r6, #40]	; 0x28
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	6020      	str	r0, [r4, #0]
 8007498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800749c:	81a3      	strh	r3, [r4, #12]
 800749e:	9b00      	ldr	r3, [sp, #0]
 80074a0:	6163      	str	r3, [r4, #20]
 80074a2:	9b01      	ldr	r3, [sp, #4]
 80074a4:	6120      	str	r0, [r4, #16]
 80074a6:	b15b      	cbz	r3, 80074c0 <__smakebuf_r+0x74>
 80074a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ac:	4630      	mov	r0, r6
 80074ae:	f000 f8d1 	bl	8007654 <_isatty_r>
 80074b2:	b128      	cbz	r0, 80074c0 <__smakebuf_r+0x74>
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	f043 0301 	orr.w	r3, r3, #1
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	89a0      	ldrh	r0, [r4, #12]
 80074c2:	4305      	orrs	r5, r0
 80074c4:	81a5      	strh	r5, [r4, #12]
 80074c6:	e7cd      	b.n	8007464 <__smakebuf_r+0x18>
 80074c8:	08007259 	.word	0x08007259

080074cc <_malloc_usable_size_r>:
 80074cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074d0:	1f18      	subs	r0, r3, #4
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	bfbc      	itt	lt
 80074d6:	580b      	ldrlt	r3, [r1, r0]
 80074d8:	18c0      	addlt	r0, r0, r3
 80074da:	4770      	bx	lr

080074dc <_raise_r>:
 80074dc:	291f      	cmp	r1, #31
 80074de:	b538      	push	{r3, r4, r5, lr}
 80074e0:	4604      	mov	r4, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	d904      	bls.n	80074f0 <_raise_r+0x14>
 80074e6:	2316      	movs	r3, #22
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80074f2:	b112      	cbz	r2, 80074fa <_raise_r+0x1e>
 80074f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074f8:	b94b      	cbnz	r3, 800750e <_raise_r+0x32>
 80074fa:	4620      	mov	r0, r4
 80074fc:	f000 f830 	bl	8007560 <_getpid_r>
 8007500:	462a      	mov	r2, r5
 8007502:	4601      	mov	r1, r0
 8007504:	4620      	mov	r0, r4
 8007506:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800750a:	f000 b817 	b.w	800753c <_kill_r>
 800750e:	2b01      	cmp	r3, #1
 8007510:	d00a      	beq.n	8007528 <_raise_r+0x4c>
 8007512:	1c59      	adds	r1, r3, #1
 8007514:	d103      	bne.n	800751e <_raise_r+0x42>
 8007516:	2316      	movs	r3, #22
 8007518:	6003      	str	r3, [r0, #0]
 800751a:	2001      	movs	r0, #1
 800751c:	e7e7      	b.n	80074ee <_raise_r+0x12>
 800751e:	2400      	movs	r4, #0
 8007520:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007524:	4628      	mov	r0, r5
 8007526:	4798      	blx	r3
 8007528:	2000      	movs	r0, #0
 800752a:	e7e0      	b.n	80074ee <_raise_r+0x12>

0800752c <raise>:
 800752c:	4b02      	ldr	r3, [pc, #8]	; (8007538 <raise+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f7ff bfd3 	b.w	80074dc <_raise_r>
 8007536:	bf00      	nop
 8007538:	2000000c 	.word	0x2000000c

0800753c <_kill_r>:
 800753c:	b538      	push	{r3, r4, r5, lr}
 800753e:	4d07      	ldr	r5, [pc, #28]	; (800755c <_kill_r+0x20>)
 8007540:	2300      	movs	r3, #0
 8007542:	4604      	mov	r4, r0
 8007544:	4608      	mov	r0, r1
 8007546:	4611      	mov	r1, r2
 8007548:	602b      	str	r3, [r5, #0]
 800754a:	f7fa f9fd 	bl	8001948 <_kill>
 800754e:	1c43      	adds	r3, r0, #1
 8007550:	d102      	bne.n	8007558 <_kill_r+0x1c>
 8007552:	682b      	ldr	r3, [r5, #0]
 8007554:	b103      	cbz	r3, 8007558 <_kill_r+0x1c>
 8007556:	6023      	str	r3, [r4, #0]
 8007558:	bd38      	pop	{r3, r4, r5, pc}
 800755a:	bf00      	nop
 800755c:	200003c4 	.word	0x200003c4

08007560 <_getpid_r>:
 8007560:	f7fa b9ea 	b.w	8001938 <_getpid>

08007564 <__sread>:
 8007564:	b510      	push	{r4, lr}
 8007566:	460c      	mov	r4, r1
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	f000 f894 	bl	8007698 <_read_r>
 8007570:	2800      	cmp	r0, #0
 8007572:	bfab      	itete	ge
 8007574:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007576:	89a3      	ldrhlt	r3, [r4, #12]
 8007578:	181b      	addge	r3, r3, r0
 800757a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800757e:	bfac      	ite	ge
 8007580:	6563      	strge	r3, [r4, #84]	; 0x54
 8007582:	81a3      	strhlt	r3, [r4, #12]
 8007584:	bd10      	pop	{r4, pc}

08007586 <__swrite>:
 8007586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	461f      	mov	r7, r3
 800758c:	898b      	ldrh	r3, [r1, #12]
 800758e:	05db      	lsls	r3, r3, #23
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	4616      	mov	r6, r2
 8007596:	d505      	bpl.n	80075a4 <__swrite+0x1e>
 8007598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800759c:	2302      	movs	r3, #2
 800759e:	2200      	movs	r2, #0
 80075a0:	f000 f868 	bl	8007674 <_lseek_r>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	4632      	mov	r2, r6
 80075b2:	463b      	mov	r3, r7
 80075b4:	4628      	mov	r0, r5
 80075b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ba:	f000 b817 	b.w	80075ec <_write_r>

080075be <__sseek>:
 80075be:	b510      	push	{r4, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c6:	f000 f855 	bl	8007674 <_lseek_r>
 80075ca:	1c43      	adds	r3, r0, #1
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	bf15      	itete	ne
 80075d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075da:	81a3      	strheq	r3, [r4, #12]
 80075dc:	bf18      	it	ne
 80075de:	81a3      	strhne	r3, [r4, #12]
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <__sclose>:
 80075e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075e6:	f000 b813 	b.w	8007610 <_close_r>
	...

080075ec <_write_r>:
 80075ec:	b538      	push	{r3, r4, r5, lr}
 80075ee:	4d07      	ldr	r5, [pc, #28]	; (800760c <_write_r+0x20>)
 80075f0:	4604      	mov	r4, r0
 80075f2:	4608      	mov	r0, r1
 80075f4:	4611      	mov	r1, r2
 80075f6:	2200      	movs	r2, #0
 80075f8:	602a      	str	r2, [r5, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f7fa f9db 	bl	80019b6 <_write>
 8007600:	1c43      	adds	r3, r0, #1
 8007602:	d102      	bne.n	800760a <_write_r+0x1e>
 8007604:	682b      	ldr	r3, [r5, #0]
 8007606:	b103      	cbz	r3, 800760a <_write_r+0x1e>
 8007608:	6023      	str	r3, [r4, #0]
 800760a:	bd38      	pop	{r3, r4, r5, pc}
 800760c:	200003c4 	.word	0x200003c4

08007610 <_close_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4d06      	ldr	r5, [pc, #24]	; (800762c <_close_r+0x1c>)
 8007614:	2300      	movs	r3, #0
 8007616:	4604      	mov	r4, r0
 8007618:	4608      	mov	r0, r1
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f7fa f9e7 	bl	80019ee <_close>
 8007620:	1c43      	adds	r3, r0, #1
 8007622:	d102      	bne.n	800762a <_close_r+0x1a>
 8007624:	682b      	ldr	r3, [r5, #0]
 8007626:	b103      	cbz	r3, 800762a <_close_r+0x1a>
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	200003c4 	.word	0x200003c4

08007630 <_fstat_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d07      	ldr	r5, [pc, #28]	; (8007650 <_fstat_r+0x20>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	4611      	mov	r1, r2
 800763c:	602b      	str	r3, [r5, #0]
 800763e:	f7fa f9e2 	bl	8001a06 <_fstat>
 8007642:	1c43      	adds	r3, r0, #1
 8007644:	d102      	bne.n	800764c <_fstat_r+0x1c>
 8007646:	682b      	ldr	r3, [r5, #0]
 8007648:	b103      	cbz	r3, 800764c <_fstat_r+0x1c>
 800764a:	6023      	str	r3, [r4, #0]
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	200003c4 	.word	0x200003c4

08007654 <_isatty_r>:
 8007654:	b538      	push	{r3, r4, r5, lr}
 8007656:	4d06      	ldr	r5, [pc, #24]	; (8007670 <_isatty_r+0x1c>)
 8007658:	2300      	movs	r3, #0
 800765a:	4604      	mov	r4, r0
 800765c:	4608      	mov	r0, r1
 800765e:	602b      	str	r3, [r5, #0]
 8007660:	f7fa f9e1 	bl	8001a26 <_isatty>
 8007664:	1c43      	adds	r3, r0, #1
 8007666:	d102      	bne.n	800766e <_isatty_r+0x1a>
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	b103      	cbz	r3, 800766e <_isatty_r+0x1a>
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	bd38      	pop	{r3, r4, r5, pc}
 8007670:	200003c4 	.word	0x200003c4

08007674 <_lseek_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d07      	ldr	r5, [pc, #28]	; (8007694 <_lseek_r+0x20>)
 8007678:	4604      	mov	r4, r0
 800767a:	4608      	mov	r0, r1
 800767c:	4611      	mov	r1, r2
 800767e:	2200      	movs	r2, #0
 8007680:	602a      	str	r2, [r5, #0]
 8007682:	461a      	mov	r2, r3
 8007684:	f7fa f9da 	bl	8001a3c <_lseek>
 8007688:	1c43      	adds	r3, r0, #1
 800768a:	d102      	bne.n	8007692 <_lseek_r+0x1e>
 800768c:	682b      	ldr	r3, [r5, #0]
 800768e:	b103      	cbz	r3, 8007692 <_lseek_r+0x1e>
 8007690:	6023      	str	r3, [r4, #0]
 8007692:	bd38      	pop	{r3, r4, r5, pc}
 8007694:	200003c4 	.word	0x200003c4

08007698 <_read_r>:
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4d07      	ldr	r5, [pc, #28]	; (80076b8 <_read_r+0x20>)
 800769c:	4604      	mov	r4, r0
 800769e:	4608      	mov	r0, r1
 80076a0:	4611      	mov	r1, r2
 80076a2:	2200      	movs	r2, #0
 80076a4:	602a      	str	r2, [r5, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	f7fa f968 	bl	800197c <_read>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_read_r+0x1e>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_read_r+0x1e>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	200003c4 	.word	0x200003c4

080076bc <_init>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr

080076c8 <_fini>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr
