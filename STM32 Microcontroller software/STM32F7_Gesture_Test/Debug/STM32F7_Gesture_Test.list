
STM32F7_Gesture_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b214  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000633dc  0800b400  0800b400  0001b400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0806e7dc  0806e7dc  00080908  2**0
                  CONTENTS
  4 .ARM          00000008  0806e7dc  0806e7dc  0007e7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0806e7e4  0806e7e4  00080908  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0806e7e4  0806e7e4  0007e7e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0806e7e8  0806e7e8  0007e7e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000908  20000000  0806e7ec  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000331c  20000920  0806f0f4  00080920  2**5
                  ALLOC
 10 ._user_heap_stack 00001004  20003c3c  0806f0f4  00083c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00080908  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012956  00000000  00000000  00080938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b34  00000000  00000000  0009328e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00095dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00096a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028430  00000000  00000000  00097598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d5f  00000000  00000000  000bf9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4338  00000000  00000000  000d2727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c6a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004574  00000000  00000000  001c6ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001cb024  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001cb0f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000920 	.word	0x20000920
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b3cc 	.word	0x0800b3cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000924 	.word	0x20000924
 800020c:	0800b3cc 	.word	0x0800b3cc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <bno055_assignHandel>:
#include "bno055_acc.h"
#include "i2c_master.h"

I2C_HandleTypeDef  bno055_i2c_port;

void bno055_assignHandel(I2C_HandleTypeDef hi2c_device) {
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	b580      	push	{r7, lr}
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	f107 0c08 	add.w	ip, r7, #8
 8000f96:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  bno055_i2c_port = hi2c_device;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <bno055_assignHandel+0x2c>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	2254      	movs	r2, #84	; 0x54
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f007 f9bb 	bl	8008320 <memcpy>
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb2:	b004      	add	sp, #16
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	2000093c 	.word	0x2000093c

08000fbc <bno055_setPageID>:

void bno055_setPageID(uint8_t pageID){
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b097      	sub	sp, #92	; 0x5c
 8000fc0:	af14      	add	r7, sp, #80	; 0x50
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]

	I2C_transmitData(bno055_i2c_port, PAGE_ID, pageID);
 8000fc6:	4c0a      	ldr	r4, [pc, #40]	; (8000ff0 <bno055_setPageID+0x34>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	9312      	str	r3, [sp, #72]	; 0x48
 8000fcc:	2307      	movs	r3, #7
 8000fce:	9311      	str	r3, [sp, #68]	; 0x44
 8000fd0:	4668      	mov	r0, sp
 8000fd2:	f104 0310 	add.w	r3, r4, #16
 8000fd6:	2244      	movs	r2, #68	; 0x44
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f007 f9a1 	bl	8008320 <memcpy>
 8000fde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fe2:	f000 fc7b 	bl	80018dc <I2C_transmitData>
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	2000093c 	.word	0x2000093c

08000ff4 <bno055_setOperationMode>:

void bno055_setOperationMode(uint8_t mode){
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b097      	sub	sp, #92	; 0x5c
 8000ff8:	af14      	add	r7, sp, #80	; 0x50
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]

	bno055_setPageID(0);
 8000ffe:	2000      	movs	r0, #0
 8001000:	f7ff ffdc 	bl	8000fbc <bno055_setPageID>

	I2C_transmitData(bno055_i2c_port, OPERATION_MODE, mode);
 8001004:	4c0e      	ldr	r4, [pc, #56]	; (8001040 <bno055_setOperationMode+0x4c>)
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	9312      	str	r3, [sp, #72]	; 0x48
 800100a:	233d      	movs	r3, #61	; 0x3d
 800100c:	9311      	str	r3, [sp, #68]	; 0x44
 800100e:	4668      	mov	r0, sp
 8001010:	f104 0310 	add.w	r3, r4, #16
 8001014:	2244      	movs	r2, #68	; 0x44
 8001016:	4619      	mov	r1, r3
 8001018:	f007 f982 	bl	8008320 <memcpy>
 800101c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001020:	f000 fc5c 	bl	80018dc <I2C_transmitData>

	// Operating mode switching time
	if(mode == CONFIGMODE){
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d103      	bne.n	8001032 <bno055_setOperationMode+0x3e>
		HAL_Delay(19);
 800102a:	2013      	movs	r0, #19
 800102c:	f001 faea 	bl	8002604 <HAL_Delay>
	}else{
		HAL_Delay(7);
	}
}
 8001030:	e002      	b.n	8001038 <bno055_setOperationMode+0x44>
		HAL_Delay(7);
 8001032:	2007      	movs	r0, #7
 8001034:	f001 fae6 	bl	8002604 <HAL_Delay>
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bd90      	pop	{r4, r7, pc}
 8001040:	2000093c 	.word	0x2000093c

08001044 <bno055_readUnit>:

uint8_t bno055_readUnit(){
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b097      	sub	sp, #92	; 0x5c
 8001048:	af14      	add	r7, sp, #80	; 0x50
	uint8_t unit[1];
	I2C_readData(bno055_i2c_port, UNIT_SEL, unit, 1);
 800104a:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <bno055_readUnit+0x34>)
 800104c:	2301      	movs	r3, #1
 800104e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	9312      	str	r3, [sp, #72]	; 0x48
 8001054:	233b      	movs	r3, #59	; 0x3b
 8001056:	9311      	str	r3, [sp, #68]	; 0x44
 8001058:	4668      	mov	r0, sp
 800105a:	f104 0310 	add.w	r3, r4, #16
 800105e:	2244      	movs	r2, #68	; 0x44
 8001060:	4619      	mov	r1, r3
 8001062:	f007 f95d 	bl	8008320 <memcpy>
 8001066:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800106a:	f000 fc18 	bl	800189e <I2C_readData>
	return unit[0];
 800106e:	793b      	ldrb	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	2000093c 	.word	0x2000093c

0800107c <bno055_setUnit>:

uint8_t bno055_setUnit(){
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b095      	sub	sp, #84	; 0x54
 8001080:	af14      	add	r7, sp, #80	; 0x50
	I2C_transmitData(bno055_i2c_port, UNIT_SEL, 0x80);
 8001082:	4c0a      	ldr	r4, [pc, #40]	; (80010ac <bno055_setUnit+0x30>)
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	9312      	str	r3, [sp, #72]	; 0x48
 8001088:	233b      	movs	r3, #59	; 0x3b
 800108a:	9311      	str	r3, [sp, #68]	; 0x44
 800108c:	4668      	mov	r0, sp
 800108e:	f104 0310 	add.w	r3, r4, #16
 8001092:	2244      	movs	r2, #68	; 0x44
 8001094:	4619      	mov	r1, r3
 8001096:	f007 f943 	bl	8008320 <memcpy>
 800109a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800109e:	f000 fc1d 	bl	80018dc <I2C_transmitData>

	return 1;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3704      	adds	r7, #4
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd90      	pop	{r4, r7, pc}
 80010ac:	2000093c 	.word	0x2000093c

080010b0 <readSensorValues>:
	*x = bno055_getRegValue(GYR_DATA_X_LSB);
	*y = bno055_getRegValue(GYR_DATA_Y_LSB);
	*z = bno055_getRegValue(GYR_DATA_Z_LSB);
}

void readSensorValues(uint8_t* dataBuffer){
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b097      	sub	sp, #92	; 0x5c
 80010b4:	af14      	add	r7, sp, #80	; 0x50
 80010b6:	6078      	str	r0, [r7, #4]

	// Read all ACC and GYR register values
	I2C_readData(bno055_i2c_port, ACC_DATA_X_LSB, dataBuffer, 0x18);
 80010b8:	4c0a      	ldr	r4, [pc, #40]	; (80010e4 <readSensorValues+0x34>)
 80010ba:	2318      	movs	r3, #24
 80010bc:	9313      	str	r3, [sp, #76]	; 0x4c
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	9312      	str	r3, [sp, #72]	; 0x48
 80010c2:	2308      	movs	r3, #8
 80010c4:	9311      	str	r3, [sp, #68]	; 0x44
 80010c6:	4668      	mov	r0, sp
 80010c8:	f104 0310 	add.w	r3, r4, #16
 80010cc:	2244      	movs	r2, #68	; 0x44
 80010ce:	4619      	mov	r1, r3
 80010d0:	f007 f926 	bl	8008320 <memcpy>
 80010d4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010d8:	f000 fbe1 	bl	800189e <I2C_readData>
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	2000093c 	.word	0x2000093c

080010e8 <acquire_and_process_data>:
#include "uart.h"
#include <stdio.h>
#include <string.h>
#include "bno055_acc.h"

void acquire_and_process_data(float* input_data){
 80010e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ec:	f5ad 5dea 	sub.w	sp, sp, #7488	; 0x1d40
 80010f0:	b083      	sub	sp, #12
 80010f2:	af0c      	add	r7, sp, #48	; 0x30
 80010f4:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80010f8:	f6a3 5304 	subw	r3, r3, #3332	; 0xd04
 80010fc:	6018      	str	r0, [r3, #0]
	float gY[251];
	float gZ[251];

	char str[300];

	uint16_t counter = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	f641 5216 	movw	r2, #7446	; 0x1d16
 8001104:	443a      	add	r2, r7
 8001106:	8013      	strh	r3, [r2, #0]
	float normalize_data_buffer[251];

	GPIO_PinState userButton;

	// Gather 251 Sensor data samples of a motion for a gesture when the Button B1 was pressed
	userButton = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 8001108:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800110c:	4807      	ldr	r0, [pc, #28]	; (800112c <acquire_and_process_data+0x44>)
 800110e:	f001 fe19 	bl	8002d44 <HAL_GPIO_ReadPin>
 8001112:	4603      	mov	r3, r0
 8001114:	f641 42fb 	movw	r2, #7419	; 0x1cfb
 8001118:	443a      	add	r2, r7
 800111a:	7013      	strb	r3, [r2, #0]

	if(userButton == GPIO_PIN_SET){
 800111c:	f641 43fb 	movw	r3, #7419	; 0x1cfb
 8001120:	443b      	add	r3, r7
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b01      	cmp	r3, #1
 8001126:	f040 81c9 	bne.w	80014bc <acquire_and_process_data+0x3d4>

		while(counter != 251){
 800112a:	e1b7      	b.n	800149c <acquire_and_process_data+0x3b4>
 800112c:	40022000 	.word	0x40022000

		// Read in the raw sensor values out of the acceleration and gyroscope sensor registers
		readSensorValues((uint8_t*)reg_readings);
 8001130:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 8001134:	443b      	add	r3, r7
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ffba 	bl	80010b0 <readSensorValues>

		// Convert the 8 bit values of the acceleration register to a 16 bit value
		raw_acc_data[0] = (((int16_t)((uint8_t *)(reg_readings))[1] << 8) | ((uint8_t *)(reg_readings))[0]);
 800113c:	f641 43cd 	movw	r3, #7373	; 0x1ccd
 8001140:	443b      	add	r3, r7
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	b21a      	sxth	r2, r3
 8001148:	f641 43cc 	movw	r3, #7372	; 0x1ccc
 800114c:	443b      	add	r3, r7
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21b      	sxth	r3, r3
 8001156:	f641 42c4 	movw	r2, #7364	; 0x1cc4
 800115a:	443a      	add	r2, r7
 800115c:	8013      	strh	r3, [r2, #0]
		raw_acc_data[1] = (((int16_t)((uint8_t *)(reg_readings))[3] << 8) | ((uint8_t *)(reg_readings))[2]);
 800115e:	f641 43cf 	movw	r3, #7375	; 0x1ccf
 8001162:	443b      	add	r3, r7
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	021b      	lsls	r3, r3, #8
 8001168:	b21a      	sxth	r2, r3
 800116a:	f641 43ce 	movw	r3, #7374	; 0x1cce
 800116e:	443b      	add	r3, r7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	f641 42c6 	movw	r2, #7366	; 0x1cc6
 800117c:	443a      	add	r2, r7
 800117e:	8013      	strh	r3, [r2, #0]
		raw_acc_data[2] = (((int16_t)((uint8_t *)(reg_readings))[5] << 8) | ((uint8_t *)(reg_readings))[4]);
 8001180:	f641 43d1 	movw	r3, #7377	; 0x1cd1
 8001184:	443b      	add	r3, r7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	f641 43d0 	movw	r3, #7376	; 0x1cd0
 8001190:	443b      	add	r3, r7
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b21b      	sxth	r3, r3
 8001196:	4313      	orrs	r3, r2
 8001198:	b21b      	sxth	r3, r3
 800119a:	f641 42c8 	movw	r2, #7368	; 0x1cc8
 800119e:	443a      	add	r2, r7
 80011a0:	8013      	strh	r3, [r2, #0]

		// Convert the raw sensor values to a real acceleration value of the unit m/s^2
		accX = (float)(raw_acc_data[0] / ACC_DIV_MSQ);
 80011a2:	f641 43c4 	movw	r3, #7364	; 0x1cc4
 80011a6:	443b      	add	r3, r7
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d9 	bl	8000564 <__aeabi_i2d>
 80011b2:	f04f 0200 	mov.w	r2, #0
 80011b6:	4bbd      	ldr	r3, [pc, #756]	; (80014ac <acquire_and_process_data+0x3c4>)
 80011b8:	f7ff fb68 	bl	800088c <__aeabi_ddiv>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4603      	mov	r3, r0
 80011ca:	f641 42f4 	movw	r2, #7412	; 0x1cf4
 80011ce:	443a      	add	r2, r7
 80011d0:	6013      	str	r3, [r2, #0]
		accY = (float)(raw_acc_data[1] / ACC_DIV_MSQ);
 80011d2:	f641 43c6 	movw	r3, #7366	; 0x1cc6
 80011d6:	443b      	add	r3, r7
 80011d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9c1 	bl	8000564 <__aeabi_i2d>
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4bb1      	ldr	r3, [pc, #708]	; (80014ac <acquire_and_process_data+0x3c4>)
 80011e8:	f7ff fb50 	bl	800088c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	f7ff fcf8 	bl	8000be8 <__aeabi_d2f>
 80011f8:	4603      	mov	r3, r0
 80011fa:	f641 42f0 	movw	r2, #7408	; 0x1cf0
 80011fe:	443a      	add	r2, r7
 8001200:	6013      	str	r3, [r2, #0]
		accZ = (float)(raw_acc_data[2] / ACC_DIV_MSQ);
 8001202:	f641 43c8 	movw	r3, #7368	; 0x1cc8
 8001206:	443b      	add	r3, r7
 8001208:	f9b3 3000 	ldrsh.w	r3, [r3]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9a9 	bl	8000564 <__aeabi_i2d>
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4ba5      	ldr	r3, [pc, #660]	; (80014ac <acquire_and_process_data+0x3c4>)
 8001218:	f7ff fb38 	bl	800088c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fce0 	bl	8000be8 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	f641 42ec 	movw	r2, #7404	; 0x1cec
 800122e:	443a      	add	r2, r7
 8001230:	6013      	str	r3, [r2, #0]

		// Convert the 8 bit values of the gyroscope register to a 16 bit value
		raw_gyr_data[0] = (((int16_t)((uint8_t *)(reg_readings))[13] << 8) | ((uint8_t *)(reg_readings))[12]);
 8001232:	f641 43d9 	movw	r3, #7385	; 0x1cd9
 8001236:	443b      	add	r3, r7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	f641 43d8 	movw	r3, #7384	; 0x1cd8
 8001242:	443b      	add	r3, r7
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21b      	sxth	r3, r3
 800124c:	f641 42bc 	movw	r2, #7356	; 0x1cbc
 8001250:	443a      	add	r2, r7
 8001252:	8013      	strh	r3, [r2, #0]
		raw_gyr_data[1] = (((int16_t)((uint8_t *)(reg_readings))[15] << 8) | ((uint8_t *)(reg_readings))[14]);
 8001254:	f641 43db 	movw	r3, #7387	; 0x1cdb
 8001258:	443b      	add	r3, r7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	021b      	lsls	r3, r3, #8
 800125e:	b21a      	sxth	r2, r3
 8001260:	f641 43da 	movw	r3, #7386	; 0x1cda
 8001264:	443b      	add	r3, r7
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	f641 42be 	movw	r2, #7358	; 0x1cbe
 8001272:	443a      	add	r2, r7
 8001274:	8013      	strh	r3, [r2, #0]
		raw_gyr_data[2] = (((int16_t)((uint8_t *)(reg_readings))[17] << 8) | ((uint8_t *)(reg_readings))[16]);
 8001276:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 800127a:	443b      	add	r3, r7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	021b      	lsls	r3, r3, #8
 8001280:	b21a      	sxth	r2, r3
 8001282:	f641 43dc 	movw	r3, #7388	; 0x1cdc
 8001286:	443b      	add	r3, r7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21b      	sxth	r3, r3
 8001290:	f507 52e6 	add.w	r2, r7, #7360	; 0x1cc0
 8001294:	8013      	strh	r3, [r2, #0]

		// Convert the raw sensor values to Deg./s
		gyrX = (float)(raw_gyr_data[0] / GYR_DIV_DPS);
 8001296:	f641 43bc 	movw	r3, #7356	; 0x1cbc
 800129a:	443b      	add	r3, r7
 800129c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff f95f 	bl	8000564 <__aeabi_i2d>
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b81      	ldr	r3, [pc, #516]	; (80014b0 <acquire_and_process_data+0x3c8>)
 80012ac:	f7ff faee 	bl	800088c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4610      	mov	r0, r2
 80012b6:	4619      	mov	r1, r3
 80012b8:	f7ff fc96 	bl	8000be8 <__aeabi_d2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 80012c2:	443a      	add	r2, r7
 80012c4:	6013      	str	r3, [r2, #0]
		gyrY = (float)(raw_gyr_data[1] / GYR_DIV_DPS);
 80012c6:	f641 43be 	movw	r3, #7358	; 0x1cbe
 80012ca:	443b      	add	r3, r7
 80012cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f947 	bl	8000564 <__aeabi_i2d>
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	4b75      	ldr	r3, [pc, #468]	; (80014b0 <acquire_and_process_data+0x3c8>)
 80012dc:	f7ff fad6 	bl	800088c <__aeabi_ddiv>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	f7ff fc7e 	bl	8000be8 <__aeabi_d2f>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f641 42e4 	movw	r2, #7396	; 0x1ce4
 80012f2:	443a      	add	r2, r7
 80012f4:	6013      	str	r3, [r2, #0]
		gyrZ = (float)(raw_gyr_data[2] / GYR_DIV_DPS);
 80012f6:	f507 53e6 	add.w	r3, r7, #7360	; 0x1cc0
 80012fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f930 	bl	8000564 <__aeabi_i2d>
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b69      	ldr	r3, [pc, #420]	; (80014b0 <acquire_and_process_data+0x3c8>)
 800130a:	f7ff fabf 	bl	800088c <__aeabi_ddiv>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001320:	6013      	str	r3, [r2, #0]

		sprintf(str,"%d, %.2f, %.2f, %.2f, %.2f, %.2f, %.2f",counter , accX, accY, accZ, gyrX, gyrY, gyrZ);
 8001322:	f641 5316 	movw	r3, #7446	; 0x1d16
 8001326:	443b      	add	r3, r7
 8001328:	881e      	ldrh	r6, [r3, #0]
 800132a:	f641 43f4 	movw	r3, #7412	; 0x1cf4
 800132e:	443b      	add	r3, r7
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f7ff f929 	bl	8000588 <__aeabi_f2d>
 8001336:	4604      	mov	r4, r0
 8001338:	460d      	mov	r5, r1
 800133a:	f641 43f0 	movw	r3, #7408	; 0x1cf0
 800133e:	443b      	add	r3, r7
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f7ff f921 	bl	8000588 <__aeabi_f2d>
 8001346:	4680      	mov	r8, r0
 8001348:	4689      	mov	r9, r1
 800134a:	f641 43ec 	movw	r3, #7404	; 0x1cec
 800134e:	443b      	add	r3, r7
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f7ff f919 	bl	8000588 <__aeabi_f2d>
 8001356:	4682      	mov	sl, r0
 8001358:	468b      	mov	fp, r1
 800135a:	f641 43e8 	movw	r3, #7400	; 0x1ce8
 800135e:	443b      	add	r3, r7
 8001360:	6818      	ldr	r0, [r3, #0]
 8001362:	f7ff f911 	bl	8000588 <__aeabi_f2d>
 8001366:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800136a:	f641 43e4 	movw	r3, #7396	; 0x1ce4
 800136e:	443b      	add	r3, r7
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	f7ff f909 	bl	8000588 <__aeabi_f2d>
 8001376:	e9c7 0100 	strd	r0, r1, [r7]
 800137a:	f507 53e7 	add.w	r3, r7, #7392	; 0x1ce0
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	f7ff f902 	bl	8000588 <__aeabi_f2d>
 8001384:	4b4b      	ldr	r3, [pc, #300]	; (80014b4 <acquire_and_process_data+0x3cc>)
 8001386:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 800138a:	f103 0308 	add.w	r3, r3, #8
 800138e:	f107 0210 	add.w	r2, r7, #16
 8001392:	4413      	add	r3, r2
 8001394:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001398:	ed97 7b00 	vldr	d7, [r7]
 800139c:	ed8d 7b08 	vstr	d7, [sp, #32]
 80013a0:	ed97 7b02 	vldr	d7, [r7, #8]
 80013a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80013a8:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80013ac:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80013b0:	e9cd 4500 	strd	r4, r5, [sp]
 80013b4:	4632      	mov	r2, r6
 80013b6:	4940      	ldr	r1, [pc, #256]	; (80014b8 <acquire_and_process_data+0x3d0>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f007 fd21 	bl	8008e00 <siprintf>
		UARTprintln(str);
 80013be:	4b3d      	ldr	r3, [pc, #244]	; (80014b4 <acquire_and_process_data+0x3cc>)
 80013c0:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80013c4:	f103 0308 	add.w	r3, r3, #8
 80013c8:	f107 0210 	add.w	r2, r7, #16
 80013cc:	4413      	add	r3, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f001 f874 	bl	80024bc <UARTprintln>

		// Store all sensor values to create later on the input data of the NN
		aX[counter] = accX;
 80013d4:	f641 5316 	movw	r3, #7446	; 0x1d16
 80013d8:	443b      	add	r3, r7
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	f641 5218 	movw	r2, #7448	; 0x1d18
 80013e0:	443a      	add	r2, r7
 80013e2:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	f641 42f4 	movw	r2, #7412	; 0x1cf4
 80013ee:	443a      	add	r2, r7
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	601a      	str	r2, [r3, #0]
		aY[counter] = accY;
 80013f4:	f641 5316 	movw	r3, #7446	; 0x1d16
 80013f8:	443b      	add	r3, r7
 80013fa:	881b      	ldrh	r3, [r3, #0]
 80013fc:	f641 5218 	movw	r2, #7448	; 0x1d18
 8001400:	443a      	add	r2, r7
 8001402:	f6a2 0234 	subw	r2, r2, #2100	; 0x834
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	f641 42f0 	movw	r2, #7408	; 0x1cf0
 800140e:	443a      	add	r2, r7
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	601a      	str	r2, [r3, #0]
		aZ[counter] = accZ;
 8001414:	f641 5316 	movw	r3, #7446	; 0x1d16
 8001418:	443b      	add	r3, r7
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	f641 5218 	movw	r2, #7448	; 0x1d18
 8001420:	443a      	add	r2, r7
 8001422:	f5a2 6242 	sub.w	r2, r2, #3104	; 0xc20
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	f641 42ec 	movw	r2, #7404	; 0x1cec
 800142e:	443a      	add	r2, r7
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	601a      	str	r2, [r3, #0]

		gX[counter] = gyrX;
 8001434:	f641 5316 	movw	r3, #7446	; 0x1d16
 8001438:	443b      	add	r3, r7
 800143a:	881b      	ldrh	r3, [r3, #0]
 800143c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	3b0c      	subs	r3, #12
 8001446:	f641 42e8 	movw	r2, #7400	; 0x1ce8
 800144a:	443a      	add	r2, r7
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	601a      	str	r2, [r3, #0]
		gY[counter] = gyrY;
 8001450:	f641 5316 	movw	r3, #7446	; 0x1d16
 8001454:	443b      	add	r3, r7
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800145c:	f5a2 727e 	sub.w	r2, r2, #1016	; 0x3f8
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	f641 42e4 	movw	r2, #7396	; 0x1ce4
 8001468:	443a      	add	r2, r7
 800146a:	6812      	ldr	r2, [r2, #0]
 800146c:	601a      	str	r2, [r3, #0]
		gZ[counter] = gyrZ;
 800146e:	f641 5316 	movw	r3, #7446	; 0x1d16
 8001472:	443b      	add	r3, r7
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800147a:	f2a2 72e4 	subw	r2, r2, #2020	; 0x7e4
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	f507 52e7 	add.w	r2, r7, #7392	; 0x1ce0
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	601a      	str	r2, [r3, #0]

		counter += 1;
 800148a:	f641 5316 	movw	r3, #7446	; 0x1d16
 800148e:	443b      	add	r3, r7
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	3301      	adds	r3, #1
 8001494:	f641 5216 	movw	r2, #7446	; 0x1d16
 8001498:	443a      	add	r2, r7
 800149a:	8013      	strh	r3, [r2, #0]
		while(counter != 251){
 800149c:	f641 5316 	movw	r3, #7446	; 0x1d16
 80014a0:	443b      	add	r3, r7
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	2bfb      	cmp	r3, #251	; 0xfb
 80014a6:	f47f ae43 	bne.w	8001130 <acquire_and_process_data+0x48>
 80014aa:	e00c      	b.n	80014c6 <acquire_and_process_data+0x3de>
 80014ac:	40590000 	.word	0x40590000
 80014b0:	40300000 	.word	0x40300000
 80014b4:	ffffe6f0 	.word	0xffffe6f0
 80014b8:	0800b400 	.word	0x0800b400
		}

	}else{
		counter = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	f641 5216 	movw	r2, #7446	; 0x1d16
 80014c2:	443a      	add	r2, r7
 80014c4:	8013      	strh	r3, [r2, #0]
	}

	// Further process of the sensor data ...
	// Create normalized input vector of the shape (1506, 1) for the NN

	if(counter == 251){
 80014c6:	f641 5316 	movw	r3, #7446	; 0x1d16
 80014ca:	443b      	add	r3, r7
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	2bfb      	cmp	r3, #251	; 0xfb
 80014d0:	f040 8171 	bne.w	80017b6 <acquire_and_process_data+0x6ce>
		// Normalization of aX
		min_max_normalize(aX, 251, normalize_data_buffer);
 80014d4:	4bbb      	ldr	r3, [pc, #748]	; (80017c4 <acquire_and_process_data+0x6dc>)
 80014d6:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80014da:	f103 0308 	add.w	r3, r3, #8
 80014de:	f107 0210 	add.w	r2, r7, #16
 80014e2:	4413      	add	r3, r2
 80014e4:	f641 00d0 	movw	r0, #6352	; 0x18d0
 80014e8:	4438      	add	r0, r7
 80014ea:	461a      	mov	r2, r3
 80014ec:	21fb      	movs	r1, #251	; 0xfb
 80014ee:	f000 f971 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 80014f2:	2300      	movs	r3, #0
 80014f4:	f641 5210 	movw	r2, #7440	; 0x1d10
 80014f8:	443a      	add	r2, r7
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	e01f      	b.n	800153e <acquire_and_process_data+0x456>
			input_data[i] = normalize_data_buffer[i];
 80014fe:	f641 5310 	movw	r3, #7440	; 0x1d10
 8001502:	443b      	add	r3, r7
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800150c:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	4413      	add	r3, r2
 8001514:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001518:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 800151c:	f641 5210 	movw	r2, #7440	; 0x1d10
 8001520:	443a      	add	r2, r7
 8001522:	6812      	ldr	r2, [r2, #0]
 8001524:	0092      	lsls	r2, r2, #2
 8001526:	440a      	add	r2, r1
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 800152c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8001530:	443b      	add	r3, r7
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	f641 5210 	movw	r2, #7440	; 0x1d10
 800153a:	443a      	add	r2, r7
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	f641 5310 	movw	r3, #7440	; 0x1d10
 8001542:	443b      	add	r3, r7
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2bfa      	cmp	r3, #250	; 0xfa
 8001548:	ddd9      	ble.n	80014fe <acquire_and_process_data+0x416>
		}

		// Normalization of aY
		min_max_normalize(aY, 251, normalize_data_buffer);
 800154a:	4b9e      	ldr	r3, [pc, #632]	; (80017c4 <acquire_and_process_data+0x6dc>)
 800154c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8001550:	f103 0308 	add.w	r3, r3, #8
 8001554:	f107 0210 	add.w	r2, r7, #16
 8001558:	4413      	add	r3, r2
 800155a:	f241 40e4 	movw	r0, #5348	; 0x14e4
 800155e:	4438      	add	r0, r7
 8001560:	461a      	mov	r2, r3
 8001562:	21fb      	movs	r1, #251	; 0xfb
 8001564:	f000 f936 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 8001568:	2300      	movs	r3, #0
 800156a:	f641 520c 	movw	r2, #7436	; 0x1d0c
 800156e:	443a      	add	r2, r7
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e020      	b.n	80015b6 <acquire_and_process_data+0x4ce>
			input_data[i+251] = normalize_data_buffer[i];
 8001574:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8001578:	443b      	add	r3, r7
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	33fb      	adds	r3, #251	; 0xfb
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001584:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	4413      	add	r3, r2
 800158c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001590:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 8001594:	f641 520c 	movw	r2, #7436	; 0x1d0c
 8001598:	443a      	add	r2, r7
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	0092      	lsls	r2, r2, #2
 800159e:	440a      	add	r2, r1
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 80015a4:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80015a8:	443b      	add	r3, r7
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80015b2:	443a      	add	r2, r7
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	f641 530c 	movw	r3, #7436	; 0x1d0c
 80015ba:	443b      	add	r3, r7
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2bfa      	cmp	r3, #250	; 0xfa
 80015c0:	ddd8      	ble.n	8001574 <acquire_and_process_data+0x48c>
		}

		// Normalization of aZ
		min_max_normalize(aZ, 251, normalize_data_buffer);
 80015c2:	4b80      	ldr	r3, [pc, #512]	; (80017c4 <acquire_and_process_data+0x6dc>)
 80015c4:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80015c8:	f103 0308 	add.w	r3, r3, #8
 80015cc:	f107 0210 	add.w	r2, r7, #16
 80015d0:	4413      	add	r3, r2
 80015d2:	f241 00f8 	movw	r0, #4344	; 0x10f8
 80015d6:	4438      	add	r0, r7
 80015d8:	461a      	mov	r2, r3
 80015da:	21fb      	movs	r1, #251	; 0xfb
 80015dc:	f000 f8fa 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 80015e0:	2300      	movs	r3, #0
 80015e2:	f641 5208 	movw	r2, #7432	; 0x1d08
 80015e6:	443a      	add	r2, r7
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e021      	b.n	8001630 <acquire_and_process_data+0x548>
			input_data[i+502] = normalize_data_buffer[i];
 80015ec:	f641 5308 	movw	r3, #7432	; 0x1d08
 80015f0:	443b      	add	r3, r7
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f503 73fb 	add.w	r3, r3, #502	; 0x1f6
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80015fe:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	4413      	add	r3, r2
 8001606:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800160a:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 800160e:	f641 5208 	movw	r2, #7432	; 0x1d08
 8001612:	443a      	add	r2, r7
 8001614:	6812      	ldr	r2, [r2, #0]
 8001616:	0092      	lsls	r2, r2, #2
 8001618:	440a      	add	r2, r1
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 800161e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8001622:	443b      	add	r3, r7
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	f641 5208 	movw	r2, #7432	; 0x1d08
 800162c:	443a      	add	r2, r7
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	f641 5308 	movw	r3, #7432	; 0x1d08
 8001634:	443b      	add	r3, r7
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2bfa      	cmp	r3, #250	; 0xfa
 800163a:	ddd7      	ble.n	80015ec <acquire_and_process_data+0x504>
		}

		// Normalization of gX
		min_max_normalize(gX, 251, normalize_data_buffer);
 800163c:	4a61      	ldr	r2, [pc, #388]	; (80017c4 <acquire_and_process_data+0x6dc>)
 800163e:	f641 5308 	movw	r3, #7432	; 0x1d08
 8001642:	4413      	add	r3, r2
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	189a      	adds	r2, r3, r2
 800164a:	4b5f      	ldr	r3, [pc, #380]	; (80017c8 <acquire_and_process_data+0x6e0>)
 800164c:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8001650:	f103 0308 	add.w	r3, r3, #8
 8001654:	f107 0110 	add.w	r1, r7, #16
 8001658:	440b      	add	r3, r1
 800165a:	21fb      	movs	r1, #251	; 0xfb
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f8b9 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 8001662:	2300      	movs	r3, #0
 8001664:	f641 5204 	movw	r2, #7428	; 0x1d04
 8001668:	443a      	add	r2, r7
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	e021      	b.n	80016b2 <acquire_and_process_data+0x5ca>
			input_data[i+753] = normalize_data_buffer[i];
 800166e:	f641 5304 	movw	r3, #7428	; 0x1d04
 8001672:	443b      	add	r3, r7
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f203 23f1 	addw	r3, r3, #753	; 0x2f1
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001680:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 8001684:	6812      	ldr	r2, [r2, #0]
 8001686:	4413      	add	r3, r2
 8001688:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800168c:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 8001690:	f641 5204 	movw	r2, #7428	; 0x1d04
 8001694:	443a      	add	r2, r7
 8001696:	6812      	ldr	r2, [r2, #0]
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	440a      	add	r2, r1
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 80016a0:	f641 5304 	movw	r3, #7428	; 0x1d04
 80016a4:	443b      	add	r3, r7
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	f641 5204 	movw	r2, #7428	; 0x1d04
 80016ae:	443a      	add	r2, r7
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	f641 5304 	movw	r3, #7428	; 0x1d04
 80016b6:	443b      	add	r3, r7
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2bfa      	cmp	r3, #250	; 0xfa
 80016bc:	ddd7      	ble.n	800166e <acquire_and_process_data+0x586>
		}

		// Normalization of gY
		min_max_normalize(gY, 251, normalize_data_buffer);
 80016be:	4a41      	ldr	r2, [pc, #260]	; (80017c4 <acquire_and_process_data+0x6dc>)
 80016c0:	f641 5308 	movw	r3, #7432	; 0x1d08
 80016c4:	4413      	add	r3, r2
 80016c6:	f107 0210 	add.w	r2, r7, #16
 80016ca:	189a      	adds	r2, r3, r2
 80016cc:	4b3f      	ldr	r3, [pc, #252]	; (80017cc <acquire_and_process_data+0x6e4>)
 80016ce:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 80016d2:	f103 0308 	add.w	r3, r3, #8
 80016d6:	f107 0110 	add.w	r1, r7, #16
 80016da:	440b      	add	r3, r1
 80016dc:	21fb      	movs	r1, #251	; 0xfb
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f878 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 80016e4:	2300      	movs	r3, #0
 80016e6:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e01d      	b.n	800172a <acquire_and_process_data+0x642>
			input_data[i+1004] = normalize_data_buffer[i];
 80016ee:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f503 737b 	add.w	r3, r3, #1004	; 0x3ec
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80016fe:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	4413      	add	r3, r2
 8001706:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 800170a:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 800170e:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	0092      	lsls	r2, r2, #2
 8001716:	440a      	add	r2, r1
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 800171c:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	f507 52e8 	add.w	r2, r7, #7424	; 0x1d00
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	f507 53e8 	add.w	r3, r7, #7424	; 0x1d00
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2bfa      	cmp	r3, #250	; 0xfa
 8001732:	dddc      	ble.n	80016ee <acquire_and_process_data+0x606>
		}

		// Normalization of gZ
		min_max_normalize(gZ, 251, normalize_data_buffer);
 8001734:	4a23      	ldr	r2, [pc, #140]	; (80017c4 <acquire_and_process_data+0x6dc>)
 8001736:	f641 5308 	movw	r3, #7432	; 0x1d08
 800173a:	4413      	add	r3, r2
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	189a      	adds	r2, r3, r2
 8001742:	4b23      	ldr	r3, [pc, #140]	; (80017d0 <acquire_and_process_data+0x6e8>)
 8001744:	f503 53e8 	add.w	r3, r3, #7424	; 0x1d00
 8001748:	f103 0308 	add.w	r3, r3, #8
 800174c:	f107 0110 	add.w	r1, r7, #16
 8001750:	440b      	add	r3, r1
 8001752:	21fb      	movs	r1, #251	; 0xfb
 8001754:	4618      	mov	r0, r3
 8001756:	f000 f83d 	bl	80017d4 <min_max_normalize>

		for(int i = 0; i < 251; i++){
 800175a:	2300      	movs	r3, #0
 800175c:	f641 42fc 	movw	r2, #7420	; 0x1cfc
 8001760:	443a      	add	r2, r7
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e021      	b.n	80017aa <acquire_and_process_data+0x6c2>
			input_data[i+1255] = normalize_data_buffer[i];
 8001766:	f641 43fc 	movw	r3, #7420	; 0x1cfc
 800176a:	443b      	add	r3, r7
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f203 43e7 	addw	r3, r3, #1255	; 0x4e7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001778:	f6a2 5204 	subw	r2, r2, #3332	; 0xd04
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	4413      	add	r3, r2
 8001780:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8001784:	f6a2 41fc 	subw	r1, r2, #3324	; 0xcfc
 8001788:	f641 42fc 	movw	r2, #7420	; 0x1cfc
 800178c:	443a      	add	r2, r7
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	0092      	lsls	r2, r2, #2
 8001792:	440a      	add	r2, r1
 8001794:	6812      	ldr	r2, [r2, #0]
 8001796:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 251; i++){
 8001798:	f641 43fc 	movw	r3, #7420	; 0x1cfc
 800179c:	443b      	add	r3, r7
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3301      	adds	r3, #1
 80017a2:	f641 42fc 	movw	r2, #7420	; 0x1cfc
 80017a6:	443a      	add	r2, r7
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	f641 43fc 	movw	r3, #7420	; 0x1cfc
 80017ae:	443b      	add	r3, r7
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2bfa      	cmp	r3, #250	; 0xfa
 80017b4:	ddd7      	ble.n	8001766 <acquire_and_process_data+0x67e>
		}
	}
}
 80017b6:	bf00      	nop
 80017b8:	f507 57e8 	add.w	r7, r7, #7424	; 0x1d00
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017c4:	ffffe304 	.word	0xffffe304
 80017c8:	ffffeff4 	.word	0xffffeff4
 80017cc:	ffffec08 	.word	0xffffec08
 80017d0:	ffffe81c 	.word	0xffffe81c

080017d4 <min_max_normalize>:

void min_max_normalize(float data[], int length, float* normalize_data){
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	float min = data[0];
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	61fb      	str	r3, [r7, #28]
	float max = data[0];
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]

	for(int i = 0; i < length; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e028      	b.n	8001844 <min_max_normalize+0x70>
		if(data[i] < min){
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4413      	add	r3, r2
 80017fa:	edd3 7a00 	vldr	s15, [r3]
 80017fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001802:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800180a:	dd05      	ble.n	8001818 <min_max_normalize+0x44>
			min = data[i];
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	61fb      	str	r3, [r7, #28]
		}

		if(data[i] > max){
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4413      	add	r3, r2
 8001820:	edd3 7a00 	vldr	s15, [r3]
 8001824:	ed97 7a06 	vldr	s14, [r7, #24]
 8001828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001830:	d505      	bpl.n	800183e <min_max_normalize+0x6a>
			max = data[i];
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	4413      	add	r3, r2
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < length; i++){
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbd2      	blt.n	80017f2 <min_max_normalize+0x1e>
		}
	}

	for(int i = 0; i < length; i++){
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	e01a      	b.n	8001888 <min_max_normalize+0xb4>
		normalize_data[i] = (data[i]-min) / (max-min);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	ed93 7a00 	vldr	s14, [r3]
 800185e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001862:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001866:	ed97 7a06 	vldr	s14, [r7, #24]
 800186a:	edd7 7a07 	vldr	s15, [r7, #28]
 800186e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < length; i++){
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	3301      	adds	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	429a      	cmp	r2, r3
 800188e:	dbe0      	blt.n	8001852 <min_max_normalize+0x7e>
	}
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3724      	adds	r7, #36	; 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <I2C_readData>:
#include "i2c_master.h"


#define I2C_ADDR_ACC 0x28

void I2C_readData(I2C_HandleTypeDef hi2c, uint8_t reg, uint8_t *data, uint8_t len){
 800189e:	b084      	sub	sp, #16
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af04      	add	r7, sp, #16
 80018a6:	f107 0c08 	add.w	ip, r7, #8
 80018aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	HAL_I2C_Mem_Read(&hi2c, I2C_ADDR_ACC << 1, reg, I2C_MEMADD_SIZE_8BIT, data, len, 100);
 80018ae:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	2164      	movs	r1, #100	; 0x64
 80018bc:	9102      	str	r1, [sp, #8]
 80018be:	9301      	str	r3, [sp, #4]
 80018c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	2301      	movs	r3, #1
 80018c6:	2150      	movs	r1, #80	; 0x50
 80018c8:	f107 0008 	add.w	r0, r7, #8
 80018cc:	f001 fbf0 	bl	80030b0 <HAL_I2C_Mem_Read>

}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018d8:	b004      	add	sp, #16
 80018da:	4770      	bx	lr

080018dc <I2C_transmitData>:
	HAL_I2C_Master_Receive(&hi2c, I2C_ADDR_ACC << 1, data, len, HAL_MAX_DELAY);
	HAL_Delay(100);

}

void I2C_transmitData(I2C_HandleTypeDef hi2c, uint8_t reg, uint8_t data){
 80018dc:	b084      	sub	sp, #16
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af02      	add	r7, sp, #8
 80018e4:	f107 0c18 	add.w	ip, r7, #24
 80018e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uint8_t txdata[2] = {reg, data};
 80018ec:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80018f0:	713b      	strb	r3, [r7, #4]
 80018f2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 80018f6:	717b      	strb	r3, [r7, #5]
	HAL_StatusTypeDef status;

	status = HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR_ACC << 1, txdata, sizeof(txdata), 10);
 80018f8:	1d3a      	adds	r2, r7, #4
 80018fa:	230a      	movs	r3, #10
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2302      	movs	r3, #2
 8001900:	2150      	movs	r1, #80	; 0x50
 8001902:	f107 0018 	add.w	r0, r7, #24
 8001906:	f001 fadf 	bl	8002ec8 <HAL_I2C_Master_Transmit>
 800190a:	4603      	mov	r3, r0
 800190c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800190e:	200a      	movs	r0, #10
 8001910:	f000 fe78 	bl	8002604 <HAL_Delay>

	if(status == HAL_OK){
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d104      	bne.n	8001924 <I2C_transmitData+0x48>
		int z = 0;
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
		z = z + 1;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	3301      	adds	r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
	}

}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800192e:	b004      	add	sp, #16
 8001930:	4770      	bx	lr
	...

08001934 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001938:	f3bf 8f4f 	dsb	sy
}
 800193c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800193e:	f3bf 8f6f 	isb	sy
}
 8001942:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001944:	4b0d      	ldr	r3, [pc, #52]	; (800197c <SCB_EnableICache+0x48>)
 8001946:	2200      	movs	r2, #0
 8001948:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800194c:	f3bf 8f4f 	dsb	sy
}
 8001950:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001952:	f3bf 8f6f 	isb	sy
}
 8001956:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <SCB_EnableICache+0x48>)
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	4a07      	ldr	r2, [pc, #28]	; (800197c <SCB_EnableICache+0x48>)
 800195e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001962:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001964:	f3bf 8f4f 	dsb	sy
}
 8001968:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800196a:	f3bf 8f6f 	isb	sy
}
 800196e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8001986:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <SCB_EnableDCache+0x84>)
 8001988:	2200      	movs	r2, #0
 800198a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800198e:	f3bf 8f4f 	dsb	sy
}
 8001992:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <SCB_EnableDCache+0x84>)
 8001996:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800199a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	0b5b      	lsrs	r3, r3, #13
 80019a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019a4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	08db      	lsrs	r3, r3, #3
 80019aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80019ae:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	015a      	lsls	r2, r3, #5
 80019b4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80019b8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80019be:	4911      	ldr	r1, [pc, #68]	; (8001a04 <SCB_EnableDCache+0x84>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1e5a      	subs	r2, r3, #1
 80019ca:	60ba      	str	r2, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ef      	bne.n	80019b0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	60fa      	str	r2, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1e5      	bne.n	80019a6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80019da:	f3bf 8f4f 	dsb	sy
}
 80019de:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <SCB_EnableDCache+0x84>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <SCB_EnableDCache+0x84>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019ec:	f3bf 8f4f 	dsb	sy
}
 80019f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019f2:	f3bf 8f6f 	isb	sy
}
 80019f6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a0c:	f5ad 5dd3 	sub.w	sp, sp, #6752	; 0x1a60
 8001a10:	b084      	sub	sp, #16
 8001a12:	af1e      	add	r7, sp, #120	; 0x78
  float input_data[1506];
  char str[500];
  ai_error ai_err;
  ai_i32 nbatch;
  float y_val[10];
  int predicted_number = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	f641 12f4 	movw	r2, #6644	; 0x19f4
 8001a1a:	443a      	add	r2, r7
 8001a1c:	6013      	str	r3, [r2, #0]
  static ai_buffer *ai_output;

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8001a1e:	f7ff ff89 	bl	8001934 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8001a22:	f7ff ffad 	bl	8001980 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a26:	f000 fd90 	bl	800254a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a2a:	f000 fa19 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a2e:	f000 fb17 	bl	8002060 <MX_GPIO_Init>
  MX_CRC_Init();
 8001a32:	f000 fa83 	bl	8001f3c <MX_CRC_Init>
  MX_USART1_UART_Init();
 8001a36:	f000 fae3 	bl	8002000 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001a3a:	f000 faa1 	bl	8001f80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Reset sequence -> bno055 can be configured
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2108      	movs	r1, #8
 8001a42:	487d      	ldr	r0, [pc, #500]	; (8001c38 <main+0x230>)
 8001a44:	f001 f996 	bl	8002d74 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 8001a48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001a4c:	f000 fdda 	bl	8002604 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_SET);
 8001a50:	2201      	movs	r2, #1
 8001a52:	2108      	movs	r1, #8
 8001a54:	4878      	ldr	r0, [pc, #480]	; (8001c38 <main+0x230>)
 8001a56:	f001 f98d 	bl	8002d74 <HAL_GPIO_WritePin>
  HAL_Delay(600);
 8001a5a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8001a5e:	f000 fdd1 	bl	8002604 <HAL_Delay>

  UART_assignHandel(huart1);
 8001a62:	4c76      	ldr	r4, [pc, #472]	; (8001c3c <main+0x234>)
 8001a64:	4668      	mov	r0, sp
 8001a66:	f104 0310 	add.w	r3, r4, #16
 8001a6a:	2278      	movs	r2, #120	; 0x78
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f006 fc57 	bl	8008320 <memcpy>
 8001a72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a76:	f000 fcf5 	bl	8002464 <UART_assignHandel>
  bno055_assignHandel(hi2c1);
 8001a7a:	4c71      	ldr	r4, [pc, #452]	; (8001c40 <main+0x238>)
 8001a7c:	4668      	mov	r0, sp
 8001a7e:	f104 0310 	add.w	r3, r4, #16
 8001a82:	2244      	movs	r2, #68	; 0x44
 8001a84:	4619      	mov	r1, r3
 8001a86:	f006 fc4b 	bl	8008320 <memcpy>
 8001a8a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a8e:	f7ff fa7d 	bl	8000f8c <bno055_assignHandel>

  bno055_setOperationMode(ACCGYRO);
 8001a92:	2005      	movs	r0, #5
 8001a94:	f7ff faae 	bl	8000ff4 <bno055_setOperationMode>

  unit = bno055_readUnit();
 8001a98:	f7ff fad4 	bl	8001044 <bno055_readUnit>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f641 12e7 	movw	r2, #6631	; 0x19e7
 8001aa2:	443a      	add	r2, r7
 8001aa4:	7013      	strb	r3, [r2, #0]

  // Check if the unit of the sensor values is m/s^2 and Deg./sec
  if(unit != 0x80){
 8001aa6:	f641 13e7 	movw	r3, #6631	; 0x19e7
 8001aaa:	443b      	add	r3, r7
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b80      	cmp	r3, #128	; 0x80
 8001ab0:	d001      	beq.n	8001ab6 <main+0xae>
	  bno055_setUnit();
 8001ab2:	f7ff fae3 	bl	800107c <bno055_setUnit>
  }

  // Clear Terminal and print header
  UARTprintf("\033[2J\033[H");
 8001ab6:	4863      	ldr	r0, [pc, #396]	; (8001c44 <main+0x23c>)
 8001ab8:	f000 fcec 	bl	8002494 <UARTprintf>
  UARTprintln("\r\n\r\nSTM32 X-Cube-AI - Gesture recognition NN\r\n");
 8001abc:	4862      	ldr	r0, [pc, #392]	; (8001c48 <main+0x240>)
 8001abe:	f000 fcfd 	bl	80024bc <UARTprintln>

  // Create and initialize the c-model
  const ai_handle acts[] = { activations };
 8001ac2:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001ac6:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8001aca:	4a60      	ldr	r2, [pc, #384]	; (8001c4c <main+0x244>)
 8001acc:	601a      	str	r2, [r3, #0]
  ai_err = ai_gesture_recognition_create_and_init(&gesture_recognition, acts, NULL);
 8001ace:	4b60      	ldr	r3, [pc, #384]	; (8001c50 <main+0x248>)
 8001ad0:	f503 53ce 	add.w	r3, r3, #6592	; 0x19c0
 8001ad4:	f103 0308 	add.w	r3, r3, #8
 8001ad8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001adc:	4413      	add	r3, r2
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	485c      	ldr	r0, [pc, #368]	; (8001c54 <main+0x24c>)
 8001ae4:	f003 fda2 	bl	800562c <ai_gesture_recognition_create_and_init>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001aee:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8001af2:	601a      	str	r2, [r3, #0]
  if (ai_err.type != AI_ERROR_NONE){
 8001af4:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001af8:	f6a3 1398 	subw	r3, r3, #2456	; 0x998
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <main+0x100>
	  UARTprintln("Error: could not initialize NN\r\n");
 8001b02:	4855      	ldr	r0, [pc, #340]	; (8001c58 <main+0x250>)
 8001b04:	f000 fcda 	bl	80024bc <UARTprintln>
  }

  // Receive pointers to the model's input/output tensors
  ai_input = ai_gesture_recognition_inputs_get(gesture_recognition, NULL);
 8001b08:	4b52      	ldr	r3, [pc, #328]	; (8001c54 <main+0x24c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 fe00 	bl	8005714 <ai_gesture_recognition_inputs_get>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a51      	ldr	r2, [pc, #324]	; (8001c5c <main+0x254>)
 8001b18:	6013      	str	r3, [r2, #0]
  ai_output = ai_gesture_recognition_outputs_get(gesture_recognition, NULL);
 8001b1a:	4b4e      	ldr	r3, [pc, #312]	; (8001c54 <main+0x24c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fe11 	bl	8005748 <ai_gesture_recognition_outputs_get>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a4d      	ldr	r2, [pc, #308]	; (8001c60 <main+0x258>)
 8001b2a:	6013      	str	r3, [r2, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	userButton = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 8001b2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b30:	4841      	ldr	r0, [pc, #260]	; (8001c38 <main+0x230>)
 8001b32:	f001 f907 	bl	8002d44 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b4a      	ldr	r3, [pc, #296]	; (8001c64 <main+0x25c>)
 8001b3c:	701a      	strb	r2, [r3, #0]

	if(userButton == GPIO_PIN_SET){
 8001b3e:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <main+0x25c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d1f2      	bne.n	8001b2c <main+0x124>

		// Receive input data for the NN
		acquire_and_process_data(input_data);
 8001b46:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff facc 	bl	80010e8 <acquire_and_process_data>

		// Fill the input buffer
		for(uint32_t i = 0; i < AI_GESTURE_RECOGNITION_IN_1_SIZE; i++){
 8001b50:	2300      	movs	r3, #0
 8001b52:	f641 12f0 	movw	r2, #6640	; 0x19f0
 8001b56:	443a      	add	r2, r7
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e01b      	b.n	8001b94 <main+0x18c>
			((ai_float *)in_data)[i] = (ai_float)input_data[i];
 8001b5c:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8001b60:	443b      	add	r3, r7
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4a40      	ldr	r2, [pc, #256]	; (8001c68 <main+0x260>)
 8001b68:	4413      	add	r3, r2
 8001b6a:	f607 12f8 	addw	r2, r7, #2552	; 0x9f8
 8001b6e:	f5a2 61f4 	sub.w	r1, r2, #1952	; 0x7a0
 8001b72:	f641 12f0 	movw	r2, #6640	; 0x19f0
 8001b76:	443a      	add	r2, r7
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	440a      	add	r2, r1
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	601a      	str	r2, [r3, #0]
		for(uint32_t i = 0; i < AI_GESTURE_RECOGNITION_IN_1_SIZE; i++){
 8001b82:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8001b86:	443b      	add	r3, r7
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f641 12f0 	movw	r2, #6640	; 0x19f0
 8001b90:	443a      	add	r2, r7
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	f641 13f0 	movw	r3, #6640	; 0x19f0
 8001b98:	443b      	add	r3, r7
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f240 52e1 	movw	r2, #1505	; 0x5e1
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d9db      	bls.n	8001b5c <main+0x154>
		}

		// Update IO handlers with the data payload
		ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <main+0x254>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2f      	ldr	r2, [pc, #188]	; (8001c68 <main+0x260>)
 8001baa:	605a      	str	r2, [r3, #4]
		ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <main+0x258>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a2e      	ldr	r2, [pc, #184]	; (8001c6c <main+0x264>)
 8001bb2:	605a      	str	r2, [r3, #4]

		// Perform the inference (feed in the input data to the NN)
		nbatch = ai_gesture_recognition_run(gesture_recognition, &ai_input[0], &ai_output[0]);
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <main+0x24c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a28      	ldr	r2, [pc, #160]	; (8001c5c <main+0x254>)
 8001bba:	6811      	ldr	r1, [r2, #0]
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <main+0x258>)
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 fe17 	bl	80057f4 <ai_gesture_recognition_run>
 8001bc6:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8001bca:	6018      	str	r0, [r3, #0]
		if (nbatch != 1) {
 8001bcc:	f507 53cf 	add.w	r3, r7, #6624	; 0x19e0
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d002      	beq.n	8001bdc <main+0x1d4>
			UARTprintln("Error: could not run inference\r\n");
 8001bd6:	4826      	ldr	r0, [pc, #152]	; (8001c70 <main+0x268>)
 8001bd8:	f000 fc70 	bl	80024bc <UARTprintln>
		}

		// Transfer the output data (output data = probability of the gestures 0 to 9)
		for(int i = 0; i < AI_GESTURE_RECOGNITION_OUT_1_SIZE; i++){
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f641 12ec 	movw	r2, #6636	; 0x19ec
 8001be2:	443a      	add	r2, r7
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01b      	b.n	8001c20 <main+0x218>
			y_val[i] = ((float *)out_data)[i];
 8001be8:	f641 13ec 	movw	r3, #6636	; 0x19ec
 8001bec:	443b      	add	r3, r7
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	; (8001c6c <main+0x264>)
 8001bf4:	4413      	add	r3, r2
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001bfc:	f5a3 611c 	sub.w	r1, r3, #2496	; 0x9c0
 8001c00:	f641 13ec 	movw	r3, #6636	; 0x19ec
 8001c04:	443b      	add	r3, r7
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < AI_GESTURE_RECOGNITION_OUT_1_SIZE; i++){
 8001c0e:	f641 13ec 	movw	r3, #6636	; 0x19ec
 8001c12:	443b      	add	r3, r7
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	f641 12ec 	movw	r2, #6636	; 0x19ec
 8001c1c:	443a      	add	r2, r7
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	f641 13ec 	movw	r3, #6636	; 0x19ec
 8001c24:	443b      	add	r3, r7
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b09      	cmp	r3, #9
 8001c2a:	dddd      	ble.n	8001be8 <main+0x1e0>
		}

		// Determine the number of the gesture with the highest probability
		for(int i = 0; i < AI_GESTURE_RECOGNITION_OUT_1_SIZE; i++){
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f641 12e8 	movw	r2, #6632	; 0x19e8
 8001c32:	443a      	add	r2, r7
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e04b      	b.n	8001cd0 <main+0x2c8>
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	20000a08 	.word	0x20000a08
 8001c40:	200009b4 	.word	0x200009b4
 8001c44:	0800b428 	.word	0x0800b428
 8001c48:	0800b430 	.word	0x0800b430
 8001c4c:	20000aa0 	.word	0x20000aa0
 8001c50:	ffffe63c 	.word	0xffffe63c
 8001c54:	20002328 	.word	0x20002328
 8001c58:	0800b460 	.word	0x0800b460
 8001c5c:	2000232c 	.word	0x2000232c
 8001c60:	20002330 	.word	0x20002330
 8001c64:	20000a90 	.word	0x20000a90
 8001c68:	20002340 	.word	0x20002340
 8001c6c:	20003ae0 	.word	0x20003ae0
 8001c70:	0800b484 	.word	0x0800b484
			if(y_val[i] > y_val[predicted_number]){
 8001c74:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001c78:	f5a3 621c 	sub.w	r2, r3, #2496	; 0x9c0
 8001c7c:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8001c80:	443b      	add	r3, r7
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001c90:	f5a3 621c 	sub.w	r2, r3, #2496	; 0x9c0
 8001c94:	f641 13f4 	movw	r3, #6644	; 0x19f4
 8001c98:	443b      	add	r3, r7
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cac:	dd07      	ble.n	8001cbe <main+0x2b6>
				predicted_number = i;
 8001cae:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8001cb2:	443b      	add	r3, r7
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f641 12f4 	movw	r2, #6644	; 0x19f4
 8001cba:	443a      	add	r2, r7
 8001cbc:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < AI_GESTURE_RECOGNITION_OUT_1_SIZE; i++){
 8001cbe:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8001cc2:	443b      	add	r3, r7
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	f641 12e8 	movw	r2, #6632	; 0x19e8
 8001ccc:	443a      	add	r2, r7
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	f641 13e8 	movw	r3, #6632	; 0x19e8
 8001cd4:	443b      	add	r3, r7
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2b09      	cmp	r3, #9
 8001cda:	ddcb      	ble.n	8001c74 <main+0x26c>
			}
		}

		// Print the results of the NN on to the serial terminal
		UARTprintln("\n");
 8001cdc:	485c      	ldr	r0, [pc, #368]	; (8001e50 <main+0x448>)
 8001cde:	f000 fbed 	bl	80024bc <UARTprintln>
		sprintf(str, "Probability: 0: %.4f, 1: %.4f, 2, %.4f, 3: %.4f, 4: %.4f, 5: %.4f, 6: %.4f, 7: %.4f, 8: %.4f, 9: %.4f", y_val[0], y_val[1], y_val[2], y_val[3], y_val[4], y_val[5], y_val[6], y_val[7], y_val[8], y_val[9]);
 8001ce2:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001ce6:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fc4b 	bl	8000588 <__aeabi_f2d>
 8001cf2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8001cf6:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001cfa:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc41 	bl	8000588 <__aeabi_f2d>
 8001d06:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8001d0a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d0e:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc37 	bl	8000588 <__aeabi_f2d>
 8001d1a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001d1e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d22:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001d32:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d36:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d46:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d4a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fc19 	bl	8000588 <__aeabi_f2d>
 8001d56:	e9c7 0100 	strd	r0, r1, [r7]
 8001d5a:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d5e:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fc0f 	bl	8000588 <__aeabi_f2d>
 8001d6a:	4682      	mov	sl, r0
 8001d6c:	468b      	mov	fp, r1
 8001d6e:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d72:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fc05 	bl	8000588 <__aeabi_f2d>
 8001d7e:	4680      	mov	r8, r0
 8001d80:	4689      	mov	r9, r1
 8001d82:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d86:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe fbfb 	bl	8000588 <__aeabi_f2d>
 8001d92:	4604      	mov	r4, r0
 8001d94:	460d      	mov	r5, r1
 8001d96:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8001d9a:	f5a3 631c 	sub.w	r3, r3, #2496	; 0x9c0
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbf1 	bl	8000588 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	482a      	ldr	r0, [pc, #168]	; (8001e54 <main+0x44c>)
 8001dac:	f641 11c8 	movw	r1, #6600	; 0x19c8
 8001db0:	4401      	add	r1, r0
 8001db2:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001db6:	1808      	adds	r0, r1, r0
 8001db8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8001dbc:	e9cd 450e 	strd	r4, r5, [sp, #56]	; 0x38
 8001dc0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8001dc4:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8001dc8:	ed97 7b00 	vldr	d7, [r7]
 8001dcc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001dd0:	ed97 7b02 	vldr	d7, [r7, #8]
 8001dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001dd8:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001de0:	ed97 7b06 	vldr	d7, [r7, #24]
 8001de4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001de8:	ed97 7b08 	vldr	d7, [r7, #32]
 8001dec:	ed8d 7b00 	vstr	d7, [sp]
 8001df0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001df4:	4918      	ldr	r1, [pc, #96]	; (8001e58 <main+0x450>)
 8001df6:	f007 f803 	bl	8008e00 <siprintf>
		UARTprintln(str);
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <main+0x44c>)
 8001dfc:	f503 53ce 	add.w	r3, r3, #6592	; 0x19c0
 8001e00:	f103 0308 	add.w	r3, r3, #8
 8001e04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e08:	4413      	add	r3, r2
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f000 fb56 	bl	80024bc <UARTprintln>

		sprintf(str, "Predicted number: %d", predicted_number);
 8001e10:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <main+0x44c>)
 8001e12:	f503 53ce 	add.w	r3, r3, #6592	; 0x19c0
 8001e16:	f103 0308 	add.w	r3, r3, #8
 8001e1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e1e:	4413      	add	r3, r2
 8001e20:	f641 12f4 	movw	r2, #6644	; 0x19f4
 8001e24:	443a      	add	r2, r7
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	490c      	ldr	r1, [pc, #48]	; (8001e5c <main+0x454>)
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f006 ffe8 	bl	8008e00 <siprintf>
		UARTprintln(str);
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <main+0x44c>)
 8001e32:	f503 53ce 	add.w	r3, r3, #6592	; 0x19c0
 8001e36:	f103 0308 	add.w	r3, r3, #8
 8001e3a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e3e:	4413      	add	r3, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 fb3b 	bl	80024bc <UARTprintln>

		// Delay of 500ms
		HAL_Delay(500);
 8001e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e4a:	f000 fbdb 	bl	8002604 <HAL_Delay>
	userButton = HAL_GPIO_ReadPin(GPIOI, GPIO_PIN_11);
 8001e4e:	e66d      	b.n	8001b2c <main+0x124>
 8001e50:	0800b4a8 	.word	0x0800b4a8
 8001e54:	ffffe66c 	.word	0xffffe66c
 8001e58:	0800b4ac 	.word	0x0800b4ac
 8001e5c:	0800b514 	.word	0x0800b514

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	; 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2230      	movs	r2, #48	; 0x30
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f006 fa64 	bl	800833c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 030c 	add.w	r3, r7, #12
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <SystemClock_Config+0xd4>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a2a      	ldr	r2, [pc, #168]	; (8001f34 <SystemClock_Config+0xd4>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b28      	ldr	r3, [pc, #160]	; (8001f34 <SystemClock_Config+0xd4>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9c:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <SystemClock_Config+0xd8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a25      	ldr	r2, [pc, #148]	; (8001f38 <SystemClock_Config+0xd8>)
 8001ea2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b23      	ldr	r3, [pc, #140]	; (8001f38 <SystemClock_Config+0xd8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001ec8:	2319      	movs	r3, #25
 8001eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001ecc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ed0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001ed6:	2309      	movs	r3, #9
 8001ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eda:	f107 0320 	add.w	r3, r7, #32
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f001 fd2e 	bl	8003940 <HAL_RCC_OscConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001eea:	f000 f91d 	bl	8002128 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001eee:	f001 fcd7 	bl	80038a0 <HAL_PWREx_EnableOverDrive>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ef8:	f000 f916 	bl	8002128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001efc:	230f      	movs	r3, #15
 8001efe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f00:	2302      	movs	r3, #2
 8001f02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2107      	movs	r1, #7
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f001 ffb4 	bl	8003e88 <HAL_RCC_ClockConfig>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f26:	f000 f8ff 	bl	8002128 <Error_Handler>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	3750      	adds	r7, #80	; 0x50
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000

08001f3c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f42:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <MX_CRC_Init+0x40>)
 8001f44:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001f46:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001f64:	4804      	ldr	r0, [pc, #16]	; (8001f78 <MX_CRC_Init+0x3c>)
 8001f66:	f000 fc57 	bl	8002818 <HAL_CRC_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001f70:	f000 f8da 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000990 	.word	0x20000990
 8001f7c:	40023000 	.word	0x40023000

08001f80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001f86:	4a1c      	ldr	r2, [pc, #112]	; (8001ff8 <MX_I2C1_Init+0x78>)
 8001f88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001f8a:	4b1a      	ldr	r3, [pc, #104]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001f8c:	4a1b      	ldr	r2, [pc, #108]	; (8001ffc <MX_I2C1_Init+0x7c>)
 8001f8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f90:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fa8:	4b12      	ldr	r3, [pc, #72]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fbc:	f000 fef4 	bl	8002da8 <HAL_I2C_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fc6:	f000 f8af 	bl	8002128 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fce:	f001 fbcf 	bl	8003770 <HAL_I2CEx_ConfigAnalogFilter>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fd8:	f000 f8a6 	bl	8002128 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_I2C1_Init+0x74>)
 8001fe0:	f001 fc11 	bl	8003806 <HAL_I2CEx_ConfigDigitalFilter>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fea:	f000 f89d 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	200009b4 	.word	0x200009b4
 8001ff8:	40005400 	.word	0x40005400
 8001ffc:	6000030d 	.word	0x6000030d

08002000 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002004:	4b14      	ldr	r3, [pc, #80]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002006:	4a15      	ldr	r2, [pc, #84]	; (800205c <MX_USART1_UART_Init+0x5c>)
 8002008:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002038:	2200      	movs	r2, #0
 800203a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <MX_USART1_UART_Init+0x58>)
 800203e:	2200      	movs	r2, #0
 8002040:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002042:	4805      	ldr	r0, [pc, #20]	; (8002058 <MX_USART1_UART_Init+0x58>)
 8002044:	f002 fcf6 	bl	8004a34 <HAL_UART_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800204e:	f000 f86b 	bl	8002128 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000a08 	.word	0x20000a08
 800205c:	40011000 	.word	0x40011000

08002060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	605a      	str	r2, [r3, #4]
 8002070:	609a      	str	r2, [r3, #8]
 8002072:	60da      	str	r2, [r3, #12]
 8002074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002076:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <MX_GPIO_Init+0xc0>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	4a29      	ldr	r2, [pc, #164]	; (8002120 <MX_GPIO_Init+0xc0>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	6313      	str	r3, [r2, #48]	; 0x30
 8002082:	4b27      	ldr	r3, [pc, #156]	; (8002120 <MX_GPIO_Init+0xc0>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800208e:	4b24      	ldr	r3, [pc, #144]	; (8002120 <MX_GPIO_Init+0xc0>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a23      	ldr	r2, [pc, #140]	; (8002120 <MX_GPIO_Init+0xc0>)
 8002094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <MX_GPIO_Init+0xc0>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
 80020bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_GPIO_Init+0xc0>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 80020d6:	2200      	movs	r2, #0
 80020d8:	2108      	movs	r1, #8
 80020da:	4812      	ldr	r0, [pc, #72]	; (8002124 <MX_GPIO_Init+0xc4>)
 80020dc:	f000 fe4a 	bl	8002d74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020e0:	2308      	movs	r3, #8
 80020e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e4:	2301      	movs	r3, #1
 80020e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	4619      	mov	r1, r3
 80020f6:	480b      	ldr	r0, [pc, #44]	; (8002124 <MX_GPIO_Init+0xc4>)
 80020f8:	f000 fc78 	bl	80029ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80020fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_GPIO_Init+0xc4>)
 8002112:	f000 fc6b 	bl	80029ec <HAL_GPIO_Init>

}
 8002116:	bf00      	nop
 8002118:	3728      	adds	r7, #40	; 0x28
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40022000 	.word	0x40022000

08002128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800212c:	b672      	cpsid	i
}
 800212e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002130:	e7fe      	b.n	8002130 <Error_Handler+0x8>
	...

08002134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800213a:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_MspInit+0x44>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_MspInit+0x44>)
 8002140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002144:	6413      	str	r3, [r2, #64]	; 0x40
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_MspInit+0x44>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	4b09      	ldr	r3, [pc, #36]	; (8002178 <HAL_MspInit+0x44>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <HAL_MspInit+0x44>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_MspInit+0x44>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	603b      	str	r3, [r7, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40023800 	.word	0x40023800

0800217c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_CRC_MspInit+0x38>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10b      	bne.n	80021a6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800218e:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 8002194:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_CRC_MspInit+0x3c>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023000 	.word	0x40023000
 80021b8:	40023800 	.word	0x40023800

080021bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b0aa      	sub	sp, #168	; 0xa8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
 80021d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021d4:	f107 0310 	add.w	r3, r7, #16
 80021d8:	2284      	movs	r2, #132	; 0x84
 80021da:	2100      	movs	r1, #0
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 f8ad 	bl	800833c <memset>
  if(hi2c->Instance==I2C1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a22      	ldr	r2, [pc, #136]	; (8002270 <HAL_I2C_MspInit+0xb4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d13c      	bne.n	8002266 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80021ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f6:	f107 0310 	add.w	r3, r7, #16
 80021fa:	4618      	mov	r0, r3
 80021fc:	f002 f82a 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002206:	f7ff ff8f 	bl	8002128 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220a:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b17      	ldr	r3, [pc, #92]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002222:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222a:	2312      	movs	r3, #18
 800222c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002236:	2303      	movs	r3, #3
 8002238:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800223c:	2304      	movs	r3, #4
 800223e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002242:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002246:	4619      	mov	r1, r3
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <HAL_I2C_MspInit+0xbc>)
 800224a:	f000 fbcf 	bl	80029ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 8002254:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_I2C_MspInit+0xb8>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	37a8      	adds	r7, #168	; 0xa8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40005400 	.word	0x40005400
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b0ac      	sub	sp, #176	; 0xb0
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002294:	f107 0318 	add.w	r3, r7, #24
 8002298:	2284      	movs	r2, #132	; 0x84
 800229a:	2100      	movs	r1, #0
 800229c:	4618      	mov	r0, r3
 800229e:	f006 f84d 	bl	800833c <memset>
  if(huart->Instance==USART1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a32      	ldr	r2, [pc, #200]	; (8002370 <HAL_UART_MspInit+0xf4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d15c      	bne.n	8002366 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80022b0:	2300      	movs	r3, #0
 80022b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	4618      	mov	r0, r3
 80022ba:	f001 ffcb 	bl	8004254 <HAL_RCCEx_PeriphCLKConfig>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022c4:	f7ff ff30 	bl	8002128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022cc:	4a29      	ldr	r2, [pc, #164]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022ce:	f043 0310 	orr.w	r3, r3, #16
 80022d2:	6453      	str	r3, [r2, #68]	; 0x44
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d8:	f003 0310 	and.w	r3, r3, #16
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	4a23      	ldr	r2, [pc, #140]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022e6:	f043 0302 	orr.w	r3, r3, #2
 80022ea:	6313      	str	r3, [r2, #48]	; 0x30
 80022ec:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f8:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <HAL_UART_MspInit+0xf8>)
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_UART_MspInit+0xf8>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002310:	2380      	movs	r3, #128	; 0x80
 8002312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002328:	2307      	movs	r3, #7
 800232a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002332:	4619      	mov	r1, r3
 8002334:	4810      	ldr	r0, [pc, #64]	; (8002378 <HAL_UART_MspInit+0xfc>)
 8002336:	f000 fb59 	bl	80029ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800233a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800233e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002354:	2307      	movs	r3, #7
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800235e:	4619      	mov	r1, r3
 8002360:	4806      	ldr	r0, [pc, #24]	; (800237c <HAL_UART_MspInit+0x100>)
 8002362:	f000 fb43 	bl	80029ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002366:	bf00      	nop
 8002368:	37b0      	adds	r7, #176	; 0xb0
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40011000 	.word	0x40011000
 8002374:	40023800 	.word	0x40023800
 8002378:	40020400 	.word	0x40020400
 800237c:	40020000 	.word	0x40020000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <NMI_Handler+0x4>

08002386 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800238a:	e7fe      	b.n	800238a <HardFault_Handler+0x4>

0800238c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <MemManage_Handler+0x4>

08002392 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <UsageFault_Handler+0x4>

0800239e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b0:	bf00      	nop
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023cc:	f000 f8fa 	bl	80025c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023dc:	4a14      	ldr	r2, [pc, #80]	; (8002430 <_sbrk+0x5c>)
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <_sbrk+0x60>)
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e8:	4b13      	ldr	r3, [pc, #76]	; (8002438 <_sbrk+0x64>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d102      	bne.n	80023f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <_sbrk+0x64>)
 80023f2:	4a12      	ldr	r2, [pc, #72]	; (800243c <_sbrk+0x68>)
 80023f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <_sbrk+0x64>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4413      	add	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d207      	bcs.n	8002414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002404:	f005 ff5a 	bl	80082bc <__errno>
 8002408:	4603      	mov	r3, r0
 800240a:	220c      	movs	r2, #12
 800240c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800240e:	f04f 33ff 	mov.w	r3, #4294967295
 8002412:	e009      	b.n	8002428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <_sbrk+0x64>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800241a:	4b07      	ldr	r3, [pc, #28]	; (8002438 <_sbrk+0x64>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4413      	add	r3, r2
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <_sbrk+0x64>)
 8002424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002426:	68fb      	ldr	r3, [r7, #12]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20050000 	.word	0x20050000
 8002434:	00000800 	.word	0x00000800
 8002438:	20003b08 	.word	0x20003b08
 800243c:	20003c40 	.word	0x20003c40

08002440 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <SystemInit+0x20>)
 8002446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <SystemInit+0x20>)
 800244c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00

08002464 <UART_assignHandel>:
#include "uart.h"
#include <string.h>

UART_HandleTypeDef uart_comPort;

void UART_assignHandel(UART_HandleTypeDef huart1_device){
 8002464:	b084      	sub	sp, #16
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
 800246a:	f107 0c08 	add.w	ip, r7, #8
 800246e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	uart_comPort = huart1_device;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <UART_assignHandel+0x2c>)
 8002474:	4618      	mov	r0, r3
 8002476:	f107 0308 	add.w	r3, r7, #8
 800247a:	2288      	movs	r2, #136	; 0x88
 800247c:	4619      	mov	r1, r3
 800247e:	f005 ff4f 	bl	8008320 <memcpy>

}
 8002482:	bf00      	nop
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800248a:	b004      	add	sp, #16
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20003b0c 	.word	0x20003b0c

08002494 <UARTprintf>:

void UARTprintf(char pcString[]){
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_comPort, (uint8_t *) pcString, strlen(pcString), 10);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7fd feb7 	bl	8000210 <strlen>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	230a      	movs	r3, #10
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4803      	ldr	r0, [pc, #12]	; (80024b8 <UARTprintf+0x24>)
 80024ac:	f002 fb10 	bl	8004ad0 <HAL_UART_Transmit>

}
 80024b0:	bf00      	nop
 80024b2:	3708      	adds	r7, #8
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20003b0c 	.word	0x20003b0c

080024bc <UARTprintln>:

void UARTprintln(char pcString[]){
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&uart_comPort, (uint8_t *) pcString, strlen(pcString), 10);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7fd fea3 	bl	8000210 <strlen>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	230a      	movs	r3, #10
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4808      	ldr	r0, [pc, #32]	; (80024f4 <UARTprintln+0x38>)
 80024d4:	f002 fafc 	bl	8004ad0 <HAL_UART_Transmit>

	char newline[2] = "\r\n";
 80024d8:	f640 230d 	movw	r3, #2573	; 0xa0d
 80024dc:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&uart_comPort, (uint8_t *) newline, 2, 10);
 80024de:	f107 010c 	add.w	r1, r7, #12
 80024e2:	230a      	movs	r3, #10
 80024e4:	2202      	movs	r2, #2
 80024e6:	4803      	ldr	r0, [pc, #12]	; (80024f4 <UARTprintln+0x38>)
 80024e8:	f002 faf2 	bl	8004ad0 <HAL_UART_Transmit>

}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20003b0c 	.word	0x20003b0c

080024f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024fc:	480d      	ldr	r0, [pc, #52]	; (8002534 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024fe:	490e      	ldr	r1, [pc, #56]	; (8002538 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002504:	e002      	b.n	800250c <LoopCopyDataInit>

08002506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250a:	3304      	adds	r3, #4

0800250c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800250c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800250e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002510:	d3f9      	bcc.n	8002506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002514:	4c0b      	ldr	r4, [pc, #44]	; (8002544 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002518:	e001      	b.n	800251e <LoopFillZerobss>

0800251a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800251c:	3204      	adds	r2, #4

0800251e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800251e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002520:	d3fb      	bcc.n	800251a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002522:	f7ff ff8d 	bl	8002440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002526:	f005 fecf 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252a:	f7ff fa6d 	bl	8001a08 <main>
  bx  lr    
 800252e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	20000908 	.word	0x20000908
  ldr r2, =_sidata
 800253c:	0806e7ec 	.word	0x0806e7ec
  ldr r2, =_sbss
 8002540:	20000920 	.word	0x20000920
  ldr r4, =_ebss
 8002544:	20003c3c 	.word	0x20003c3c

08002548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>

0800254a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800254e:	2003      	movs	r0, #3
 8002550:	f000 f92e 	bl	80027b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002554:	200f      	movs	r0, #15
 8002556:	f000 f805 	bl	8002564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800255a:	f7ff fdeb 	bl	8002134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_InitTick+0x54>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_InitTick+0x58>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	4619      	mov	r1, r3
 8002576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257a:	fbb3 f3f1 	udiv	r3, r3, r1
 800257e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f93b 	bl	80027fe <HAL_SYSTICK_Config>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00e      	b.n	80025b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d80a      	bhi.n	80025ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002598:	2200      	movs	r2, #0
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	f04f 30ff 	mov.w	r0, #4294967295
 80025a0:	f000 f911 	bl	80027c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025a4:	4a06      	ldr	r2, [pc, #24]	; (80025c0 <HAL_InitTick+0x5c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	e000      	b.n	80025b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20000008 	.word	0x20000008
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_IncTick+0x20>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x24>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4413      	add	r3, r2
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_IncTick+0x24>)
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008
 80025e8:	20003b94 	.word	0x20003b94

080025ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return uwTick;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <HAL_GetTick+0x14>)
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20003b94 	.word	0x20003b94

08002604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800260c:	f7ff ffee 	bl	80025ec <HAL_GetTick>
 8002610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261c:	d005      	beq.n	800262a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_Delay+0x44>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4413      	add	r3, r2
 8002628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262a:	bf00      	nop
 800262c:	f7ff ffde 	bl	80025ec <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	429a      	cmp	r2, r3
 800263a:	d8f7      	bhi.n	800262c <HAL_Delay+0x28>
  {
  }
}
 800263c:	bf00      	nop
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000008 	.word	0x20000008

0800264c <__NVIC_SetPriorityGrouping>:
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0b      	ldr	r3, [pc, #44]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002676:	4313      	orrs	r3, r2
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x40>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00
 8002690:	05fa0000 	.word	0x05fa0000

08002694 <__NVIC_GetPriorityGrouping>:
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_SetPriority>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	6039      	str	r1, [r7, #0]
 80026ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	db0a      	blt.n	80026da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	490c      	ldr	r1, [pc, #48]	; (80026fc <__NVIC_SetPriority+0x4c>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	0112      	lsls	r2, r2, #4
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	440b      	add	r3, r1
 80026d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80026d8:	e00a      	b.n	80026f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4908      	ldr	r1, [pc, #32]	; (8002700 <__NVIC_SetPriority+0x50>)
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	3b04      	subs	r3, #4
 80026e8:	0112      	lsls	r2, r2, #4
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	440b      	add	r3, r1
 80026ee:	761a      	strb	r2, [r3, #24]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000e100 	.word	0xe000e100
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <NVIC_EncodePriority>:
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	; 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f1c3 0307 	rsb	r3, r3, #7
 800271e:	2b04      	cmp	r3, #4
 8002720:	bf28      	it	cs
 8002722:	2304      	movcs	r3, #4
 8002724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3304      	adds	r3, #4
 800272a:	2b06      	cmp	r3, #6
 800272c:	d902      	bls.n	8002734 <NVIC_EncodePriority+0x30>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3b03      	subs	r3, #3
 8002732:	e000      	b.n	8002736 <NVIC_EncodePriority+0x32>
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002738:	f04f 32ff 	mov.w	r2, #4294967295
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	401a      	ands	r2, r3
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800274c:	f04f 31ff 	mov.w	r1, #4294967295
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa01 f303 	lsl.w	r3, r1, r3
 8002756:	43d9      	mvns	r1, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	4313      	orrs	r3, r2
}
 800275e:	4618      	mov	r0, r3
 8002760:	3724      	adds	r7, #36	; 0x24
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3b01      	subs	r3, #1
 8002778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800277c:	d301      	bcc.n	8002782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800277e:	2301      	movs	r3, #1
 8002780:	e00f      	b.n	80027a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <SysTick_Config+0x40>)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	3b01      	subs	r3, #1
 8002788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800278a:	210f      	movs	r1, #15
 800278c:	f04f 30ff 	mov.w	r0, #4294967295
 8002790:	f7ff ff8e 	bl	80026b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <SysTick_Config+0x40>)
 8002796:	2200      	movs	r2, #0
 8002798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <SysTick_Config+0x40>)
 800279c:	2207      	movs	r2, #7
 800279e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	e000e010 	.word	0xe000e010

080027b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f7ff ff47 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027be:	bf00      	nop
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
 80027d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d8:	f7ff ff5c 	bl	8002694 <__NVIC_GetPriorityGrouping>
 80027dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff8e 	bl	8002704 <NVIC_EncodePriority>
 80027e8:	4602      	mov	r2, r0
 80027ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff5d 	bl	80026b0 <__NVIC_SetPriority>
}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b082      	sub	sp, #8
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff ffb0 	bl	800276c <SysTick_Config>
 800280c:	4603      	mov	r3, r0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e054      	b.n	80028d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7f5b      	ldrb	r3, [r3, #29]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fc9e 	bl	800217c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	791b      	ldrb	r3, [r3, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d10c      	bne.n	8002868 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <HAL_CRC_Init+0xc4>)
 8002854:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0218 	bic.w	r2, r2, #24
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	e00c      	b.n	8002882 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6899      	ldr	r1, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	461a      	mov	r2, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f834 	bl	80028e0 <HAL_CRCEx_Polynomial_Set>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e028      	b.n	80028d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	795b      	ldrb	r3, [r3, #5]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d105      	bne.n	8002896 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f04f 32ff 	mov.w	r2, #4294967295
 8002892:	611a      	str	r2, [r3, #16]
 8002894:	e004      	b.n	80028a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6912      	ldr	r2, [r2, #16]
 800289e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695a      	ldr	r2, [r3, #20]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	699a      	ldr	r2, [r3, #24]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	04c11db7 	.word	0x04c11db7

080028e0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028f0:	231f      	movs	r3, #31
 80028f2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028f4:	bf00      	nop
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1e5a      	subs	r2, r3, #1
 80028fa:	613a      	str	r2, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_CRCEx_Polynomial_Set+0x34>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b18      	cmp	r3, #24
 8002918:	d846      	bhi.n	80029a8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <HAL_CRCEx_Polynomial_Set+0x40>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	080029af 	.word	0x080029af
 8002924:	080029a9 	.word	0x080029a9
 8002928:	080029a9 	.word	0x080029a9
 800292c:	080029a9 	.word	0x080029a9
 8002930:	080029a9 	.word	0x080029a9
 8002934:	080029a9 	.word	0x080029a9
 8002938:	080029a9 	.word	0x080029a9
 800293c:	080029a9 	.word	0x080029a9
 8002940:	0800299d 	.word	0x0800299d
 8002944:	080029a9 	.word	0x080029a9
 8002948:	080029a9 	.word	0x080029a9
 800294c:	080029a9 	.word	0x080029a9
 8002950:	080029a9 	.word	0x080029a9
 8002954:	080029a9 	.word	0x080029a9
 8002958:	080029a9 	.word	0x080029a9
 800295c:	080029a9 	.word	0x080029a9
 8002960:	08002991 	.word	0x08002991
 8002964:	080029a9 	.word	0x080029a9
 8002968:	080029a9 	.word	0x080029a9
 800296c:	080029a9 	.word	0x080029a9
 8002970:	080029a9 	.word	0x080029a9
 8002974:	080029a9 	.word	0x080029a9
 8002978:	080029a9 	.word	0x080029a9
 800297c:	080029a9 	.word	0x080029a9
 8002980:	08002985 	.word	0x08002985
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	2b06      	cmp	r3, #6
 8002988:	d913      	bls.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800298e:	e010      	b.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b07      	cmp	r3, #7
 8002994:	d90f      	bls.n	80029b6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800299a:	e00c      	b.n	80029b6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d90b      	bls.n	80029ba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80029a6:	e008      	b.n	80029ba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	75fb      	strb	r3, [r7, #23]
      break;
 80029ac:	e006      	b.n	80029bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029ae:	bf00      	nop
 80029b0:	e004      	b.n	80029bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029b2:	bf00      	nop
 80029b4:	e002      	b.n	80029bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80029ba:	bf00      	nop
  }
  if (status == HAL_OK)
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10d      	bne.n	80029de <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f023 0118 	bic.w	r1, r3, #24
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	430a      	orrs	r2, r1
 80029dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029de:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	371c      	adds	r7, #28
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
 8002a0a:	e175      	b.n	8002cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	f040 8164 	bne.w	8002cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d005      	beq.n	8002a42 <HAL_GPIO_Init+0x56>
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d130      	bne.n	8002aa4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a78:	2201      	movs	r2, #1
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	091b      	lsrs	r3, r3, #4
 8002a8e:	f003 0201 	and.w	r2, r3, #1
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	2b03      	cmp	r3, #3
 8002aae:	d017      	beq.n	8002ae0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	2203      	movs	r2, #3
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0303 	and.w	r3, r3, #3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d123      	bne.n	8002b34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	08da      	lsrs	r2, r3, #3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3208      	adds	r2, #8
 8002af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	220f      	movs	r2, #15
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691a      	ldr	r2, [r3, #16]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	08da      	lsrs	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	3208      	adds	r2, #8
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	2203      	movs	r2, #3
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80be 	beq.w	8002cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b76:	4b66      	ldr	r3, [pc, #408]	; (8002d10 <HAL_GPIO_Init+0x324>)
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	4a65      	ldr	r2, [pc, #404]	; (8002d10 <HAL_GPIO_Init+0x324>)
 8002b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b80:	6453      	str	r3, [r2, #68]	; 0x44
 8002b82:	4b63      	ldr	r3, [pc, #396]	; (8002d10 <HAL_GPIO_Init+0x324>)
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b8e:	4a61      	ldr	r2, [pc, #388]	; (8002d14 <HAL_GPIO_Init+0x328>)
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <HAL_GPIO_Init+0x32c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d037      	beq.n	8002c2a <HAL_GPIO_Init+0x23e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <HAL_GPIO_Init+0x330>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d031      	beq.n	8002c26 <HAL_GPIO_Init+0x23a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a56      	ldr	r2, [pc, #344]	; (8002d20 <HAL_GPIO_Init+0x334>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d02b      	beq.n	8002c22 <HAL_GPIO_Init+0x236>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a55      	ldr	r2, [pc, #340]	; (8002d24 <HAL_GPIO_Init+0x338>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d025      	beq.n	8002c1e <HAL_GPIO_Init+0x232>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a54      	ldr	r2, [pc, #336]	; (8002d28 <HAL_GPIO_Init+0x33c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <HAL_GPIO_Init+0x22e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a53      	ldr	r2, [pc, #332]	; (8002d2c <HAL_GPIO_Init+0x340>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d019      	beq.n	8002c16 <HAL_GPIO_Init+0x22a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a52      	ldr	r2, [pc, #328]	; (8002d30 <HAL_GPIO_Init+0x344>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_GPIO_Init+0x226>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a51      	ldr	r2, [pc, #324]	; (8002d34 <HAL_GPIO_Init+0x348>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_GPIO_Init+0x222>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a50      	ldr	r2, [pc, #320]	; (8002d38 <HAL_GPIO_Init+0x34c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x21e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a4f      	ldr	r2, [pc, #316]	; (8002d3c <HAL_GPIO_Init+0x350>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d101      	bne.n	8002c06 <HAL_GPIO_Init+0x21a>
 8002c02:	2309      	movs	r3, #9
 8002c04:	e012      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c06:	230a      	movs	r3, #10
 8002c08:	e010      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	e00e      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c0e:	2307      	movs	r3, #7
 8002c10:	e00c      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c12:	2306      	movs	r3, #6
 8002c14:	e00a      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c16:	2305      	movs	r3, #5
 8002c18:	e008      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	e006      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e004      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c22:	2302      	movs	r3, #2
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <HAL_GPIO_Init+0x240>
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	69fa      	ldr	r2, [r7, #28]
 8002c2e:	f002 0203 	and.w	r2, r2, #3
 8002c32:	0092      	lsls	r2, r2, #2
 8002c34:	4093      	lsls	r3, r2
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c3c:	4935      	ldr	r1, [pc, #212]	; (8002d14 <HAL_GPIO_Init+0x328>)
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	089b      	lsrs	r3, r3, #2
 8002c42:	3302      	adds	r3, #2
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c74:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c98:	4a29      	ldr	r2, [pc, #164]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c9e:	4b28      	ldr	r3, [pc, #160]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc2:	4a1f      	ldr	r2, [pc, #124]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cc8:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cec:	4a14      	ldr	r2, [pc, #80]	; (8002d40 <HAL_GPIO_Init+0x354>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	2b0f      	cmp	r3, #15
 8002cfc:	f67f ae86 	bls.w	8002a0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40013800 	.word	0x40013800
 8002d18:	40020000 	.word	0x40020000
 8002d1c:	40020400 	.word	0x40020400
 8002d20:	40020800 	.word	0x40020800
 8002d24:	40020c00 	.word	0x40020c00
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40021400 	.word	0x40021400
 8002d30:	40021800 	.word	0x40021800
 8002d34:	40021c00 	.word	0x40021c00
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40022400 	.word	0x40022400
 8002d40:	40013c00 	.word	0x40013c00

08002d44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	887b      	ldrh	r3, [r7, #2]
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
 8002d60:	e001      	b.n	8002d66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3714      	adds	r7, #20
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d84:	787b      	ldrb	r3, [r7, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d90:	e003      	b.n	8002d9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d92:	887b      	ldrh	r3, [r7, #2]
 8002d94:	041a      	lsls	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	619a      	str	r2, [r3, #24]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07f      	b.n	8002eba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff f9f4 	bl	80021bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 0201 	bic.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002df8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d107      	bne.n	8002e22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	e006      	b.n	8002e30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d104      	bne.n	8002e42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	6859      	ldr	r1, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_I2C_Init+0x11c>)
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	69d9      	ldr	r1, [r3, #28]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	02008000 	.word	0x02008000

08002ec8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	817b      	strh	r3, [r7, #10]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b20      	cmp	r3, #32
 8002ee6:	f040 80da 	bne.w	800309e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_I2C_Master_Transmit+0x30>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e0d3      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f00:	f7ff fb74 	bl	80025ec <HAL_GetTick>
 8002f04:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	2319      	movs	r3, #25
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fa5e 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e0be      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2221      	movs	r2, #33	; 0x21
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	893a      	ldrh	r2, [r7, #8]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2bff      	cmp	r3, #255	; 0xff
 8002f52:	d90e      	bls.n	8002f72 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	22ff      	movs	r2, #255	; 0xff
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fbce 	bl	800370c <I2C_TransferConfig>
 8002f70:	e06c      	b.n	800304c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	8979      	ldrh	r1, [r7, #10]
 8002f84:	4b48      	ldr	r3, [pc, #288]	; (80030a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fbbd 	bl	800370c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f92:	e05b      	b.n	800304c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f94:	697a      	ldr	r2, [r7, #20]
 8002f96:	6a39      	ldr	r1, [r7, #32]
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 fa5b 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e07b      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	781a      	ldrb	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	b29a      	uxth	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d034      	beq.n	800304c <HAL_I2C_Master_Transmit+0x184>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d130      	bne.n	800304c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f9ed 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e04d      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	2bff      	cmp	r3, #255	; 0xff
 800300c:	d90e      	bls.n	800302c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	22ff      	movs	r2, #255	; 0xff
 8003012:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	b2da      	uxtb	r2, r3
 800301a:	8979      	ldrh	r1, [r7, #10]
 800301c:	2300      	movs	r3, #0
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 fb71 	bl	800370c <I2C_TransferConfig>
 800302a:	e00f      	b.n	800304c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003030:	b29a      	uxth	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303a:	b2da      	uxtb	r2, r3
 800303c:	8979      	ldrh	r1, [r7, #10]
 800303e:	2300      	movs	r3, #0
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003046:	68f8      	ldr	r0, [r7, #12]
 8003048:	f000 fb60 	bl	800370c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d19e      	bne.n	8002f94 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	6a39      	ldr	r1, [r7, #32]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fa3a 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e01a      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2220      	movs	r2, #32
 8003070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <HAL_I2C_Master_Transmit+0x1e4>)
 800307e:	400b      	ands	r3, r1
 8003080:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800309a:	2300      	movs	r3, #0
 800309c:	e000      	b.n	80030a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
  }
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	80002000 	.word	0x80002000
 80030ac:	fe00e800 	.word	0xfe00e800

080030b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	4608      	mov	r0, r1
 80030ba:	4611      	mov	r1, r2
 80030bc:	461a      	mov	r2, r3
 80030be:	4603      	mov	r3, r0
 80030c0:	817b      	strh	r3, [r7, #10]
 80030c2:	460b      	mov	r3, r1
 80030c4:	813b      	strh	r3, [r7, #8]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	f040 80fd 	bne.w	80032d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_I2C_Mem_Read+0x34>
 80030de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d105      	bne.n	80030f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0f1      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Read+0x4e>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e0ea      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003106:	f7ff fa71 	bl	80025ec <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003118:	68f8      	ldr	r0, [r7, #12]
 800311a:	f000 f95b 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e0d5      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2222      	movs	r2, #34	; 0x22
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003148:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003150:	88f8      	ldrh	r0, [r7, #6]
 8003152:	893a      	ldrh	r2, [r7, #8]
 8003154:	8979      	ldrh	r1, [r7, #10]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	4603      	mov	r3, r0
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f8bf 	bl	80032e4 <I2C_RequestMemoryRead>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0ad      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2bff      	cmp	r3, #255	; 0xff
 8003180:	d90e      	bls.n	80031a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	; 0xff
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_I2C_Mem_Read+0x22c>)
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fab7 	bl	800370c <I2C_TransferConfig>
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	4b4a      	ldr	r3, [pc, #296]	; (80032dc <HAL_I2C_Mem_Read+0x22c>)
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 faa6 	bl	800370c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c6:	2200      	movs	r2, #0
 80031c8:	2104      	movs	r1, #4
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f902 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e07c      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	b2d2      	uxtb	r2, r2
 80031e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f6:	3b01      	subs	r3, #1
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003202:	b29b      	uxth	r3, r3
 8003204:	3b01      	subs	r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d034      	beq.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d130      	bne.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8d3 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e04d      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29b      	uxth	r3, r3
 800323e:	2bff      	cmp	r3, #255	; 0xff
 8003240:	d90e      	bls.n	8003260 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	b2da      	uxtb	r2, r3
 800324e:	8979      	ldrh	r1, [r7, #10]
 8003250:	2300      	movs	r3, #0
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fa57 	bl	800370c <I2C_TransferConfig>
 800325e:	e00f      	b.n	8003280 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003264:	b29a      	uxth	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326e:	b2da      	uxtb	r2, r3
 8003270:	8979      	ldrh	r1, [r7, #10]
 8003272:	2300      	movs	r3, #0
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 fa46 	bl	800370c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	d19a      	bne.n	80031c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f920 	bl	80034d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e01a      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2220      	movs	r2, #32
 80032a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_I2C_Mem_Read+0x230>)
 80032b2:	400b      	ands	r3, r1
 80032b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	80002400 	.word	0x80002400
 80032e0:	fe00e800 	.word	0xfe00e800

080032e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	461a      	mov	r2, r3
 80032f2:	4603      	mov	r3, r0
 80032f4:	817b      	strh	r3, [r7, #10]
 80032f6:	460b      	mov	r3, r1
 80032f8:	813b      	strh	r3, [r7, #8]
 80032fa:	4613      	mov	r3, r2
 80032fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	b2da      	uxtb	r2, r3
 8003302:	8979      	ldrh	r1, [r7, #10]
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <I2C_RequestMemoryRead+0xa4>)
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2300      	movs	r3, #0
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f9fe 	bl	800370c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	69b9      	ldr	r1, [r7, #24]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f89d 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e02c      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d105      	bne.n	8003336 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800332a:	893b      	ldrh	r3, [r7, #8]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	629a      	str	r2, [r3, #40]	; 0x28
 8003334:	e015      	b.n	8003362 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003336:	893b      	ldrh	r3, [r7, #8]
 8003338:	0a1b      	lsrs	r3, r3, #8
 800333a:	b29b      	uxth	r3, r3
 800333c:	b2da      	uxtb	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003344:	69fa      	ldr	r2, [r7, #28]
 8003346:	69b9      	ldr	r1, [r7, #24]
 8003348:	68f8      	ldr	r0, [r7, #12]
 800334a:	f000 f883 	bl	8003454 <I2C_WaitOnTXISFlagUntilTimeout>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d001      	beq.n	8003358 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e012      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003358:	893b      	ldrh	r3, [r7, #8]
 800335a:	b2da      	uxtb	r2, r3
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2200      	movs	r2, #0
 800336a:	2140      	movs	r1, #64	; 0x40
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f831 	bl	80033d4 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	80002000 	.word	0x80002000

0800338c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d103      	bne.n	80033aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2200      	movs	r2, #0
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d007      	beq.n	80033c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699a      	ldr	r2, [r3, #24]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	619a      	str	r2, [r3, #24]
  }
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	4613      	mov	r3, r2
 80033e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e4:	e022      	b.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ec:	d01e      	beq.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ee:	f7ff f8fd 	bl	80025ec <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d302      	bcc.n	8003404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d113      	bne.n	800342c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2220      	movs	r2, #32
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e00f      	b.n	800344c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	699a      	ldr	r2, [r3, #24]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	4013      	ands	r3, r2
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	bf0c      	ite	eq
 800343c:	2301      	moveq	r3, #1
 800343e:	2300      	movne	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	461a      	mov	r2, r3
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	429a      	cmp	r2, r3
 8003448:	d0cd      	beq.n	80033e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003460:	e02c      	b.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f870 	bl	800354c <I2C_IsErrorOccurred>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02a      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347c:	d01e      	beq.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800347e:	f7ff f8b5 	bl	80025ec <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	68ba      	ldr	r2, [r7, #8]
 800348a:	429a      	cmp	r2, r3
 800348c:	d302      	bcc.n	8003494 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	f043 0220 	orr.w	r2, r3, #32
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d1cb      	bne.n	8003462 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e0:	e028      	b.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f830 	bl	800354c <I2C_IsErrorOccurred>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e026      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7ff f879 	bl	80025ec <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d113      	bne.n	8003534 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b20      	cmp	r3, #32
 8003540:	d1cf      	bne.n	80034e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08a      	sub	sp, #40	; 0x28
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d068      	beq.n	800364a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2210      	movs	r2, #16
 800357e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003580:	e049      	b.n	8003616 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d045      	beq.n	8003616 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7ff f82f 	bl	80025ec <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_IsErrorOccurred+0x54>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d13a      	bne.n	8003616 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035c2:	d121      	bne.n	8003608 <I2C_IsErrorOccurred+0xbc>
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ca:	d01d      	beq.n	8003608 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80035cc:	7cfb      	ldrb	r3, [r7, #19]
 80035ce:	2b20      	cmp	r3, #32
 80035d0:	d01a      	beq.n	8003608 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685a      	ldr	r2, [r3, #4]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035e2:	f7ff f803 	bl	80025ec <HAL_GetTick>
 80035e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e8:	e00e      	b.n	8003608 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035ea:	f7fe ffff 	bl	80025ec <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b19      	cmp	r3, #25
 80035f6:	d907      	bls.n	8003608 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f043 0320 	orr.w	r3, r3, #32
 80035fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003606:	e006      	b.n	8003616 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0320 	and.w	r3, r3, #32
 8003612:	2b20      	cmp	r3, #32
 8003614:	d1e9      	bne.n	80035ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b20      	cmp	r3, #32
 8003622:	d003      	beq.n	800362c <I2C_IsErrorOccurred+0xe0>
 8003624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0aa      	beq.n	8003582 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800362c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2220      	movs	r2, #32
 800363a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	f043 0304 	orr.w	r3, r3, #4
 8003642:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00b      	beq.n	8003674 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800366c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	f043 0308 	orr.w	r3, r3, #8
 8003684:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800368e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d01c      	beq.n	80036fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7ff fe63 	bl	800338c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6859      	ldr	r1, [r3, #4]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <I2C_IsErrorOccurred+0x1bc>)
 80036d2:	400b      	ands	r3, r1
 80036d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80036fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3728      	adds	r7, #40	; 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	fe00e800 	.word	0xfe00e800

0800370c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	607b      	str	r3, [r7, #4]
 8003716:	460b      	mov	r3, r1
 8003718:	817b      	strh	r3, [r7, #10]
 800371a:	4613      	mov	r3, r2
 800371c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003724:	7a7b      	ldrb	r3, [r7, #9]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800372c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	4313      	orrs	r3, r2
 8003736:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800373a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	0d5b      	lsrs	r3, r3, #21
 8003746:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800374a:	4b08      	ldr	r3, [pc, #32]	; (800376c <I2C_TransferConfig+0x60>)
 800374c:	430b      	orrs	r3, r1
 800374e:	43db      	mvns	r3, r3
 8003750:	ea02 0103 	and.w	r1, r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	03ff63ff 	.word	0x03ff63ff

08003770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d138      	bne.n	80037f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003790:	2302      	movs	r3, #2
 8003792:	e032      	b.n	80037fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2224      	movs	r2, #36	; 0x24
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0201 	bic.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	430a      	orrs	r2, r1
 80037d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0201 	orr.w	r2, r2, #1
 80037e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037f8:	2302      	movs	r3, #2
  }
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003806:	b480      	push	{r7}
 8003808:	b085      	sub	sp, #20
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
 800380e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b20      	cmp	r3, #32
 800381a:	d139      	bne.n	8003890 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003826:	2302      	movs	r3, #2
 8003828:	e033      	b.n	8003892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	; 0x24
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003858:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
	...

080038a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6413      	str	r3, [r2, #64]	; 0x40
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_PWREx_EnableOverDrive+0x98>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a1d      	ldr	r2, [pc, #116]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038ce:	f7fe fe8d 	bl	80025ec <HAL_GetTick>
 80038d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038d4:	e009      	b.n	80038ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80038d6:	f7fe fe89 	bl	80025ec <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e4:	d901      	bls.n	80038ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e022      	b.n	8003930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80038ea:	4b14      	ldr	r3, [pc, #80]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038f6:	d1ee      	bne.n	80038d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a0f      	ldr	r2, [pc, #60]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 80038fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003902:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003904:	f7fe fe72 	bl	80025ec <HAL_GetTick>
 8003908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800390a:	e009      	b.n	8003920 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800390c:	f7fe fe6e 	bl	80025ec <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800391a:	d901      	bls.n	8003920 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e007      	b.n	8003930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800392c:	d1ee      	bne.n	800390c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	40007000 	.word	0x40007000

08003940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003948:	2300      	movs	r3, #0
 800394a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e291      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8087 	beq.w	8003a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003964:	4b96      	ldr	r3, [pc, #600]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b04      	cmp	r3, #4
 800396e:	d00c      	beq.n	800398a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003970:	4b93      	ldr	r3, [pc, #588]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
 8003978:	2b08      	cmp	r3, #8
 800397a:	d112      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
 800397c:	4b90      	ldr	r3, [pc, #576]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003988:	d10b      	bne.n	80039a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800398a:	4b8d      	ldr	r3, [pc, #564]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d06c      	beq.n	8003a70 <HAL_RCC_OscConfig+0x130>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d168      	bne.n	8003a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e26b      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d106      	bne.n	80039ba <HAL_RCC_OscConfig+0x7a>
 80039ac:	4b84      	ldr	r3, [pc, #528]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a83      	ldr	r2, [pc, #524]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e02e      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_RCC_OscConfig+0x9c>
 80039c2:	4b7f      	ldr	r3, [pc, #508]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a7e      	ldr	r2, [pc, #504]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7b      	ldr	r2, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0xc0>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xd8>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fde4 	bl	80025ec <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fde0 	bl	80025ec <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e21f      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xe8>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fdd0 	bl	80025ec <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fdcc 	bl	80025ec <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e20b      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x110>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d069      	beq.n	8003b52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7e:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d11c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d116      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d001      	beq.n	8003aba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e1df      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	493d      	ldr	r1, [pc, #244]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ace:	e040      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d023      	beq.n	8003b20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad8:	4b39      	ldr	r3, [pc, #228]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a38      	ldr	r2, [pc, #224]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae4:	f7fe fd82 	bl	80025ec <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aec:	f7fe fd7e 	bl	80025ec <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e1bd      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b0a:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4929      	ldr	r1, [pc, #164]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
 8003b1e:	e018      	b.n	8003b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b20:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fd5e 	bl	80025ec <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b34:	f7fe fd5a 	bl	80025ec <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e199      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d038      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d019      	beq.n	8003b9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b66:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6a:	4a15      	ldr	r2, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b72:	f7fe fd3b 	bl	80025ec <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fd37 	bl	80025ec <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e176      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8c:	4b0c      	ldr	r3, [pc, #48]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x23a>
 8003b98:	e01a      	b.n	8003bd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b9e:	4a08      	ldr	r2, [pc, #32]	; (8003bc0 <HAL_RCC_OscConfig+0x280>)
 8003ba0:	f023 0301 	bic.w	r3, r3, #1
 8003ba4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe fd21 	bl	80025ec <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe fd1d 	bl	80025ec <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d903      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e15c      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
 8003bc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b91      	ldr	r3, [pc, #580]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ee      	bne.n	8003bae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 80a4 	beq.w	8003d26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bde:	4b8b      	ldr	r3, [pc, #556]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bea:	4b88      	ldr	r3, [pc, #544]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	4a87      	ldr	r2, [pc, #540]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bf6:	4b85      	ldr	r3, [pc, #532]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c02:	2301      	movs	r3, #1
 8003c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c06:	4b82      	ldr	r3, [pc, #520]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d118      	bne.n	8003c44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003c12:	4b7f      	ldr	r3, [pc, #508]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a7e      	ldr	r2, [pc, #504]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c1e:	f7fe fce5 	bl	80025ec <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c26:	f7fe fce1 	bl	80025ec <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	; 0x64
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e120      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c38:	4b75      	ldr	r3, [pc, #468]	; (8003e10 <HAL_RCC_OscConfig+0x4d0>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d106      	bne.n	8003c5a <HAL_RCC_OscConfig+0x31a>
 8003c4c:	4b6f      	ldr	r3, [pc, #444]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	4a6e      	ldr	r2, [pc, #440]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	6713      	str	r3, [r2, #112]	; 0x70
 8003c58:	e02d      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0x33c>
 8003c62:	4b6a      	ldr	r3, [pc, #424]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	4a69      	ldr	r2, [pc, #420]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c68:	f023 0301 	bic.w	r3, r3, #1
 8003c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6e:	4b67      	ldr	r3, [pc, #412]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c72:	4a66      	ldr	r2, [pc, #408]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c74:	f023 0304 	bic.w	r3, r3, #4
 8003c78:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7a:	e01c      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d10c      	bne.n	8003c9e <HAL_RCC_OscConfig+0x35e>
 8003c84:	4b61      	ldr	r3, [pc, #388]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a60      	ldr	r2, [pc, #384]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c8a:	f043 0304 	orr.w	r3, r3, #4
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a5d      	ldr	r2, [pc, #372]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003c9c:	e00b      	b.n	8003cb6 <HAL_RCC_OscConfig+0x376>
 8003c9e:	4b5b      	ldr	r3, [pc, #364]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca2:	4a5a      	ldr	r2, [pc, #360]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8003caa:	4b58      	ldr	r3, [pc, #352]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	4a57      	ldr	r2, [pc, #348]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cbe:	f7fe fc95 	bl	80025ec <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc4:	e00a      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cc6:	f7fe fc91 	bl	80025ec <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d901      	bls.n	8003cdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e0ce      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cdc:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d0ee      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x386>
 8003ce8:	e014      	b.n	8003d14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cea:	f7fe fc7f 	bl	80025ec <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf0:	e00a      	b.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf2:	f7fe fc7b 	bl	80025ec <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e0b8      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d08:	4b40      	ldr	r3, [pc, #256]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1ee      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d105      	bne.n	8003d26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d1a:	4b3c      	ldr	r3, [pc, #240]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	4a3b      	ldr	r2, [pc, #236]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f000 80a4 	beq.w	8003e78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d30:	4b36      	ldr	r3, [pc, #216]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 030c 	and.w	r3, r3, #12
 8003d38:	2b08      	cmp	r3, #8
 8003d3a:	d06b      	beq.n	8003e14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d149      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d44:	4b31      	ldr	r3, [pc, #196]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a30      	ldr	r2, [pc, #192]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe fc4c 	bl	80025ec <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d58:	f7fe fc48 	bl	80025ec <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e087      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d6a:	4b28      	ldr	r3, [pc, #160]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69da      	ldr	r2, [r3, #28]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	019b      	lsls	r3, r3, #6
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	085b      	lsrs	r3, r3, #1
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	041b      	lsls	r3, r3, #16
 8003d92:	431a      	orrs	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	061b      	lsls	r3, r3, #24
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	4a1b      	ldr	r2, [pc, #108]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003da2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003da4:	4b19      	ldr	r3, [pc, #100]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7fe fc1c 	bl	80025ec <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fe fc18 	bl	80025ec <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e057      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d0f0      	beq.n	8003db8 <HAL_RCC_OscConfig+0x478>
 8003dd6:	e04f      	b.n	8003e78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd8:	4b0c      	ldr	r3, [pc, #48]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a0b      	ldr	r2, [pc, #44]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fc02 	bl	80025ec <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dec:	f7fe fbfe 	bl	80025ec <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e03d      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <HAL_RCC_OscConfig+0x4cc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x4ac>
 8003e0a:	e035      	b.n	8003e78 <HAL_RCC_OscConfig+0x538>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCC_OscConfig+0x544>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d028      	beq.n	8003e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d121      	bne.n	8003e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d11a      	bne.n	8003e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e44:	4013      	ands	r3, r2
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d111      	bne.n	8003e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	085b      	lsrs	r3, r3, #1
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0d0      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d910      	bls.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b67      	ldr	r3, [pc, #412]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 020f 	bic.w	r2, r3, #15
 8003eb6:	4965      	ldr	r1, [pc, #404]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d001      	beq.n	8003ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e0b8      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d020      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee8:	4b59      	ldr	r3, [pc, #356]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f00:	4b53      	ldr	r3, [pc, #332]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b50      	ldr	r3, [pc, #320]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	494d      	ldr	r1, [pc, #308]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d040      	beq.n	8003fac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d115      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e07f      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e073      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3d      	ldr	r3, [pc, #244]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e06b      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b39      	ldr	r3, [pc, #228]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4936      	ldr	r1, [pc, #216]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f7c:	f7fe fb36 	bl	80025ec <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fe fb32 	bl	80025ec <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e053      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2d      	ldr	r3, [pc, #180]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b27      	ldr	r3, [pc, #156]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d210      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 020f 	bic.w	r2, r3, #15
 8003fc2:	4922      	ldr	r1, [pc, #136]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fca:	4b20      	ldr	r3, [pc, #128]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d001      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e032      	b.n	8004042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b19      	ldr	r3, [pc, #100]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	4916      	ldr	r1, [pc, #88]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	490e      	ldr	r1, [pc, #56]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800401a:	f000 f821 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800401e:	4602      	mov	r2, r0
 8004020:	4b0b      	ldr	r3, [pc, #44]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	091b      	lsrs	r3, r3, #4
 8004026:	f003 030f 	and.w	r3, r3, #15
 800402a:	490a      	ldr	r1, [pc, #40]	; (8004054 <HAL_RCC_ClockConfig+0x1cc>)
 800402c:	5ccb      	ldrb	r3, [r1, r3]
 800402e:	fa22 f303 	lsr.w	r3, r2, r3
 8004032:	4a09      	ldr	r2, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1d0>)
 8004034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004036:	4b09      	ldr	r3, [pc, #36]	; (800405c <HAL_RCC_ClockConfig+0x1d4>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fa92 	bl	8002564 <HAL_InitTick>

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40023c00 	.word	0x40023c00
 8004050:	40023800 	.word	0x40023800
 8004054:	0800b55c 	.word	0x0800b55c
 8004058:	20000000 	.word	0x20000000
 800405c:	20000004 	.word	0x20000004

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004064:	b090      	sub	sp, #64	; 0x40
 8004066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
 800406c:	2300      	movs	r3, #0
 800406e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004070:	2300      	movs	r3, #0
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004078:	4b59      	ldr	r3, [pc, #356]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b08      	cmp	r3, #8
 8004082:	d00d      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004084:	2b08      	cmp	r3, #8
 8004086:	f200 80a1 	bhi.w	80041cc <HAL_RCC_GetSysClockFreq+0x16c>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x34>
 800408e:	2b04      	cmp	r3, #4
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x3a>
 8004092:	e09b      	b.n	80041cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004096:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004098:	e09b      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800409a:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800409e:	e098      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040a0:	4b4f      	ldr	r3, [pc, #316]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80040aa:	4b4d      	ldr	r3, [pc, #308]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d028      	beq.n	8004108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040b6:	4b4a      	ldr	r3, [pc, #296]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	099b      	lsrs	r3, r3, #6
 80040bc:	2200      	movs	r2, #0
 80040be:	623b      	str	r3, [r7, #32]
 80040c0:	627a      	str	r2, [r7, #36]	; 0x24
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040c8:	2100      	movs	r1, #0
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040cc:	fb03 f201 	mul.w	r2, r3, r1
 80040d0:	2300      	movs	r3, #0
 80040d2:	fb00 f303 	mul.w	r3, r0, r3
 80040d6:	4413      	add	r3, r2
 80040d8:	4a43      	ldr	r2, [pc, #268]	; (80041e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80040da:	fba0 1202 	umull	r1, r2, r0, r2
 80040de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040e0:	460a      	mov	r2, r1
 80040e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80040e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e6:	4413      	add	r3, r2
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ec:	2200      	movs	r2, #0
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040fa:	f7fc fdc5 	bl	8000c88 <__aeabi_uldivmod>
 80040fe:	4602      	mov	r2, r0
 8004100:	460b      	mov	r3, r1
 8004102:	4613      	mov	r3, r2
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004106:	e053      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004108:	4b35      	ldr	r3, [pc, #212]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	099b      	lsrs	r3, r3, #6
 800410e:	2200      	movs	r2, #0
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	617a      	str	r2, [r7, #20]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800411a:	f04f 0b00 	mov.w	fp, #0
 800411e:	4652      	mov	r2, sl
 8004120:	465b      	mov	r3, fp
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f04f 0100 	mov.w	r1, #0
 800412a:	0159      	lsls	r1, r3, #5
 800412c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004130:	0150      	lsls	r0, r2, #5
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	ebb2 080a 	subs.w	r8, r2, sl
 800413a:	eb63 090b 	sbc.w	r9, r3, fp
 800413e:	f04f 0200 	mov.w	r2, #0
 8004142:	f04f 0300 	mov.w	r3, #0
 8004146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800414a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800414e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004152:	ebb2 0408 	subs.w	r4, r2, r8
 8004156:	eb63 0509 	sbc.w	r5, r3, r9
 800415a:	f04f 0200 	mov.w	r2, #0
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	00eb      	lsls	r3, r5, #3
 8004164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004168:	00e2      	lsls	r2, r4, #3
 800416a:	4614      	mov	r4, r2
 800416c:	461d      	mov	r5, r3
 800416e:	eb14 030a 	adds.w	r3, r4, sl
 8004172:	603b      	str	r3, [r7, #0]
 8004174:	eb45 030b 	adc.w	r3, r5, fp
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004186:	4629      	mov	r1, r5
 8004188:	028b      	lsls	r3, r1, #10
 800418a:	4621      	mov	r1, r4
 800418c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004190:	4621      	mov	r1, r4
 8004192:	028a      	lsls	r2, r1, #10
 8004194:	4610      	mov	r0, r2
 8004196:	4619      	mov	r1, r3
 8004198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419a:	2200      	movs	r2, #0
 800419c:	60bb      	str	r3, [r7, #8]
 800419e:	60fa      	str	r2, [r7, #12]
 80041a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a4:	f7fc fd70 	bl	8000c88 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4613      	mov	r3, r2
 80041ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	f003 0303 	and.w	r3, r3, #3
 80041ba:	3301      	adds	r3, #1
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80041c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041ca:	e002      	b.n	80041d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80041ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3740      	adds	r7, #64	; 0x40
 80041d8:	46bd      	mov	sp, r7
 80041da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041de:	bf00      	nop
 80041e0:	40023800 	.word	0x40023800
 80041e4:	00f42400 	.word	0x00f42400
 80041e8:	017d7840 	.word	0x017d7840

080041ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041f0:	4b03      	ldr	r3, [pc, #12]	; (8004200 <HAL_RCC_GetHCLKFreq+0x14>)
 80041f2:	681b      	ldr	r3, [r3, #0]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	20000000 	.word	0x20000000

08004204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004208:	f7ff fff0 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 800420c:	4602      	mov	r2, r0
 800420e:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	0a9b      	lsrs	r3, r3, #10
 8004214:	f003 0307 	and.w	r3, r3, #7
 8004218:	4903      	ldr	r1, [pc, #12]	; (8004228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800421a:	5ccb      	ldrb	r3, [r1, r3]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40023800 	.word	0x40023800
 8004228:	0800b56c 	.word	0x0800b56c

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004230:	f7ff ffdc 	bl	80041ec <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0b5b      	lsrs	r3, r3, #13
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4903      	ldr	r1, [pc, #12]	; (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004248:	4618      	mov	r0, r3
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40023800 	.word	0x40023800
 8004250:	0800b56c 	.word	0x0800b56c

08004254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800427c:	4b69      	ldr	r3, [pc, #420]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a68      	ldr	r2, [pc, #416]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004282:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004286:	6093      	str	r3, [r2, #8]
 8004288:	4b66      	ldr	r3, [pc, #408]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004290:	4964      	ldr	r1, [pc, #400]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800429e:	2301      	movs	r3, #1
 80042a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d017      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042bc:	4959      	ldr	r1, [pc, #356]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042cc:	d101      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80042ce:	2301      	movs	r3, #1
 80042d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80042da:	2301      	movs	r3, #1
 80042dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80042ea:	4b4e      	ldr	r3, [pc, #312]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	494a      	ldr	r1, [pc, #296]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004308:	d101      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800430a:	2301      	movs	r3, #1
 800430c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004316:	2301      	movs	r3, #1
 8004318:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004326:	2301      	movs	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 808b 	beq.w	800444e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	4a39      	ldr	r2, [pc, #228]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800433e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004342:	6413      	str	r3, [r2, #64]	; 0x40
 8004344:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800434c:	60bb      	str	r3, [r7, #8]
 800434e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004350:	4b35      	ldr	r3, [pc, #212]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800435a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800435c:	f7fe f946 	bl	80025ec <HAL_GetTick>
 8004360:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004364:	f7fe f942 	bl	80025ec <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b64      	cmp	r3, #100	; 0x64
 8004370:	d901      	bls.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e357      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004376:	4b2c      	ldr	r3, [pc, #176]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004382:	4b28      	ldr	r3, [pc, #160]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800438a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d035      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d02e      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043a0:	4b20      	ldr	r3, [pc, #128]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043b6:	4b1b      	ldr	r3, [pc, #108]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ba:	4a1a      	ldr	r2, [pc, #104]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80043c2:	4a18      	ldr	r2, [pc, #96]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80043c8:	4b16      	ldr	r3, [pc, #88]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d114      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fe f90a 	bl	80025ec <HAL_GetTick>
 80043d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	e00a      	b.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fe f906 	bl	80025ec <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d901      	bls.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e319      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043f2:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0ee      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800440a:	d111      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004418:	4b04      	ldr	r3, [pc, #16]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800441a:	400b      	ands	r3, r1
 800441c:	4901      	ldr	r1, [pc, #4]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
 8004422:	e00b      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004424:	40023800 	.word	0x40023800
 8004428:	40007000 	.word	0x40007000
 800442c:	0ffffcff 	.word	0x0ffffcff
 8004430:	4baa      	ldr	r3, [pc, #680]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	4aa9      	ldr	r2, [pc, #676]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004436:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800443a:	6093      	str	r3, [r2, #8]
 800443c:	4ba7      	ldr	r3, [pc, #668]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004448:	49a4      	ldr	r1, [pc, #656]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444a:	4313      	orrs	r3, r2
 800444c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	2b00      	cmp	r3, #0
 8004458:	d010      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800445a:	4ba0      	ldr	r3, [pc, #640]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004460:	4a9e      	ldr	r2, [pc, #632]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004466:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800446a:	4b9c      	ldr	r3, [pc, #624]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	4999      	ldr	r1, [pc, #612]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004476:	4313      	orrs	r3, r2
 8004478:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004488:	4b94      	ldr	r3, [pc, #592]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004496:	4991      	ldr	r1, [pc, #580]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80044aa:	4b8c      	ldr	r3, [pc, #560]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b8:	4988      	ldr	r1, [pc, #544]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80044cc:	4b83      	ldr	r3, [pc, #524]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044da:	4980      	ldr	r1, [pc, #512]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80044ee:	4b7b      	ldr	r3, [pc, #492]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4977      	ldr	r1, [pc, #476]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004510:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004516:	f023 0203 	bic.w	r2, r3, #3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451e:	496f      	ldr	r1, [pc, #444]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004538:	f023 020c 	bic.w	r2, r3, #12
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004540:	4966      	ldr	r1, [pc, #408]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004562:	495e      	ldr	r1, [pc, #376]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004564:	4313      	orrs	r3, r2
 8004566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004576:	4b59      	ldr	r3, [pc, #356]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	4955      	ldr	r1, [pc, #340]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004586:	4313      	orrs	r3, r2
 8004588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004598:	4b50      	ldr	r3, [pc, #320]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800459a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800459e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	494d      	ldr	r1, [pc, #308]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80045ba:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c8:	4944      	ldr	r1, [pc, #272]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	493c      	ldr	r1, [pc, #240]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	4933      	ldr	r1, [pc, #204]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00a      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004620:	4b2e      	ldr	r3, [pc, #184]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004626:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462e:	492b      	ldr	r1, [pc, #172]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004630:	4313      	orrs	r3, r2
 8004632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d011      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004648:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004650:	4922      	ldr	r1, [pc, #136]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004652:	4313      	orrs	r3, r2
 8004654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800465c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004660:	d101      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004662:	2301      	movs	r3, #1
 8004664:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004672:	2301      	movs	r3, #1
 8004674:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00a      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004688:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004690:	4912      	ldr	r1, [pc, #72]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00b      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046b4:	4909      	ldr	r1, [pc, #36]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b6:	4313      	orrs	r3, r2
 80046b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d006      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80d9 	beq.w	8004882 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046d0:	4b02      	ldr	r3, [pc, #8]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a01      	ldr	r2, [pc, #4]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046da:	e001      	b.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80046dc:	40023800 	.word	0x40023800
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e2:	f7fd ff83 	bl	80025ec <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046ea:	f7fd ff7f 	bl	80025ec <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b64      	cmp	r3, #100	; 0x64
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e194      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	4b6c      	ldr	r3, [pc, #432]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f0      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b00      	cmp	r3, #0
 8004712:	d021      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	2b00      	cmp	r3, #0
 800471a:	d11d      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800471c:	4b64      	ldr	r3, [pc, #400]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004722:	0c1b      	lsrs	r3, r3, #16
 8004724:	f003 0303 	and.w	r3, r3, #3
 8004728:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800472a:	4b61      	ldr	r3, [pc, #388]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800472c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004730:	0e1b      	lsrs	r3, r3, #24
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	019a      	lsls	r2, r3, #6
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	041b      	lsls	r3, r3, #16
 8004742:	431a      	orrs	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	061b      	lsls	r3, r3, #24
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	071b      	lsls	r3, r3, #28
 8004750:	4957      	ldr	r1, [pc, #348]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004776:	2b00      	cmp	r3, #0
 8004778:	d02e      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004782:	d129      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004784:	4b4a      	ldr	r3, [pc, #296]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	0c1b      	lsrs	r3, r3, #16
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004792:	4b47      	ldr	r3, [pc, #284]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004798:	0f1b      	lsrs	r3, r3, #28
 800479a:	f003 0307 	and.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	019a      	lsls	r2, r3, #6
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	041b      	lsls	r3, r3, #16
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	071b      	lsls	r3, r3, #28
 80047b8:	493d      	ldr	r1, [pc, #244]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047c6:	f023 021f 	bic.w	r2, r3, #31
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	3b01      	subs	r3, #1
 80047d0:	4937      	ldr	r1, [pc, #220]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d01d      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80047e4:	4b32      	ldr	r3, [pc, #200]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047ea:	0e1b      	lsrs	r3, r3, #24
 80047ec:	f003 030f 	and.w	r3, r3, #15
 80047f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80047f2:	4b2f      	ldr	r3, [pc, #188]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047f8:	0f1b      	lsrs	r3, r3, #28
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	019a      	lsls	r2, r3, #6
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	431a      	orrs	r2, r3
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	061b      	lsls	r3, r3, #24
 8004812:	431a      	orrs	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	071b      	lsls	r3, r3, #28
 8004818:	4925      	ldr	r1, [pc, #148]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d011      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	019a      	lsls	r2, r3, #6
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	071b      	lsls	r3, r3, #28
 8004848:	4919      	ldr	r1, [pc, #100]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004856:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800485a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800485c:	f7fd fec6 	bl	80025ec <HAL_GetTick>
 8004860:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004864:	f7fd fec2 	bl	80025ec <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b64      	cmp	r3, #100	; 0x64
 8004870:	d901      	bls.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e0d7      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004876:	4b0e      	ldr	r3, [pc, #56]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 80cd 	bne.w	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800488a:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004894:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004896:	f7fd fea9 	bl	80025ec <HAL_GetTick>
 800489a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800489e:	f7fd fea5 	bl	80025ec <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b64      	cmp	r3, #100	; 0x64
 80048aa:	d903      	bls.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0ba      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80048b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80048b4:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048c0:	d0ed      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d02e      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12a      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048ea:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	0c1b      	lsrs	r3, r3, #16
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80048f8:	4b4d      	ldr	r3, [pc, #308]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	0f1b      	lsrs	r3, r3, #28
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	019a      	lsls	r2, r3, #6
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	061b      	lsls	r3, r3, #24
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	071b      	lsls	r3, r3, #28
 800491e:	4944      	ldr	r1, [pc, #272]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004926:	4b42      	ldr	r3, [pc, #264]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800492c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	3b01      	subs	r3, #1
 8004936:	021b      	lsls	r3, r3, #8
 8004938:	493d      	ldr	r1, [pc, #244]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d022      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004954:	d11d      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495c:	0e1b      	lsrs	r3, r3, #24
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004964:	4b32      	ldr	r3, [pc, #200]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	0f1b      	lsrs	r3, r3, #28
 800496c:	f003 0307 	and.w	r3, r3, #7
 8004970:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	019a      	lsls	r2, r3, #6
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	041b      	lsls	r3, r3, #16
 800497e:	431a      	orrs	r2, r3
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	431a      	orrs	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	071b      	lsls	r3, r3, #28
 800498a:	4929      	ldr	r1, [pc, #164]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d028      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800499e:	4b24      	ldr	r3, [pc, #144]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	0e1b      	lsrs	r3, r3, #24
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ac:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	019a      	lsls	r2, r3, #6
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	041b      	lsls	r3, r3, #16
 80049c4:	431a      	orrs	r2, r3
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	061b      	lsls	r3, r3, #24
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	071b      	lsls	r3, r3, #28
 80049d2:	4917      	ldr	r1, [pc, #92]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80049da:	4b15      	ldr	r3, [pc, #84]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e8:	4911      	ldr	r1, [pc, #68]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a0e      	ldr	r2, [pc, #56]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80049f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049fc:	f7fd fdf6 	bl	80025ec <HAL_GetTick>
 8004a00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a04:	f7fd fdf2 	bl	80025ec <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b64      	cmp	r3, #100	; 0x64
 8004a10:	d901      	bls.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e007      	b.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a22:	d1ef      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3720      	adds	r7, #32
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023800 	.word	0x40023800

08004a34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e040      	b.n	8004ac8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f7fd fc10 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2224      	movs	r2, #36	; 0x24
 8004a60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0201 	bic.w	r2, r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8b0 	bl	8004bd8 <UART_SetConfig>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d101      	bne.n	8004a82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e022      	b.n	8004ac8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fb08 	bl	80050a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004aae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb8f 	bl	80051e4 <UART_CheckIdleState>
 8004ac6:	4603      	mov	r3, r0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	; 0x28
 8004ad4:	af02      	add	r7, sp, #8
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	4613      	mov	r3, r2
 8004ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae4:	2b20      	cmp	r3, #32
 8004ae6:	d171      	bne.n	8004bcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d002      	beq.n	8004af4 <HAL_UART_Transmit+0x24>
 8004aee:	88fb      	ldrh	r3, [r7, #6]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d101      	bne.n	8004af8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e06a      	b.n	8004bce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2221      	movs	r2, #33	; 0x21
 8004b04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b06:	f7fd fd71 	bl	80025ec <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	88fa      	ldrh	r2, [r7, #6]
 8004b10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b24:	d108      	bne.n	8004b38 <HAL_UART_Transmit+0x68>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d104      	bne.n	8004b38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e003      	b.n	8004b40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b40:	e02c      	b.n	8004b9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	2180      	movs	r1, #128	; 0x80
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fb80 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e038      	b.n	8004bce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	881b      	ldrh	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	3302      	adds	r3, #2
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	e007      	b.n	8004b8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	3301      	adds	r3, #1
 8004b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1cc      	bne.n	8004b42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	2140      	movs	r1, #64	; 0x40
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fb4d 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e005      	b.n	8004bce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	e000      	b.n	8004bce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004bcc:	2302      	movs	r3, #2
  }
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
	...

08004bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b088      	sub	sp, #32
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	4ba6      	ldr	r3, [pc, #664]	; (8004e9c <UART_SetConfig+0x2c4>)
 8004c04:	4013      	ands	r3, r2
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	6979      	ldr	r1, [r7, #20]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a1b      	ldr	r3, [r3, #32]
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	430a      	orrs	r2, r1
 8004c48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a94      	ldr	r2, [pc, #592]	; (8004ea0 <UART_SetConfig+0x2c8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d120      	bne.n	8004c96 <UART_SetConfig+0xbe>
 8004c54:	4b93      	ldr	r3, [pc, #588]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b03      	cmp	r3, #3
 8004c60:	d816      	bhi.n	8004c90 <UART_SetConfig+0xb8>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <UART_SetConfig+0x90>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c79 	.word	0x08004c79
 8004c6c:	08004c85 	.word	0x08004c85
 8004c70:	08004c7f 	.word	0x08004c7f
 8004c74:	08004c8b 	.word	0x08004c8b
 8004c78:	2301      	movs	r3, #1
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	e150      	b.n	8004f20 <UART_SetConfig+0x348>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	77fb      	strb	r3, [r7, #31]
 8004c82:	e14d      	b.n	8004f20 <UART_SetConfig+0x348>
 8004c84:	2304      	movs	r3, #4
 8004c86:	77fb      	strb	r3, [r7, #31]
 8004c88:	e14a      	b.n	8004f20 <UART_SetConfig+0x348>
 8004c8a:	2308      	movs	r3, #8
 8004c8c:	77fb      	strb	r3, [r7, #31]
 8004c8e:	e147      	b.n	8004f20 <UART_SetConfig+0x348>
 8004c90:	2310      	movs	r3, #16
 8004c92:	77fb      	strb	r3, [r7, #31]
 8004c94:	e144      	b.n	8004f20 <UART_SetConfig+0x348>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a83      	ldr	r2, [pc, #524]	; (8004ea8 <UART_SetConfig+0x2d0>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d132      	bne.n	8004d06 <UART_SetConfig+0x12e>
 8004ca0:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f003 030c 	and.w	r3, r3, #12
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d828      	bhi.n	8004d00 <UART_SetConfig+0x128>
 8004cae:	a201      	add	r2, pc, #4	; (adr r2, 8004cb4 <UART_SetConfig+0xdc>)
 8004cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb4:	08004ce9 	.word	0x08004ce9
 8004cb8:	08004d01 	.word	0x08004d01
 8004cbc:	08004d01 	.word	0x08004d01
 8004cc0:	08004d01 	.word	0x08004d01
 8004cc4:	08004cf5 	.word	0x08004cf5
 8004cc8:	08004d01 	.word	0x08004d01
 8004ccc:	08004d01 	.word	0x08004d01
 8004cd0:	08004d01 	.word	0x08004d01
 8004cd4:	08004cef 	.word	0x08004cef
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d01 	.word	0x08004d01
 8004ce0:	08004d01 	.word	0x08004d01
 8004ce4:	08004cfb 	.word	0x08004cfb
 8004ce8:	2300      	movs	r3, #0
 8004cea:	77fb      	strb	r3, [r7, #31]
 8004cec:	e118      	b.n	8004f20 <UART_SetConfig+0x348>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	77fb      	strb	r3, [r7, #31]
 8004cf2:	e115      	b.n	8004f20 <UART_SetConfig+0x348>
 8004cf4:	2304      	movs	r3, #4
 8004cf6:	77fb      	strb	r3, [r7, #31]
 8004cf8:	e112      	b.n	8004f20 <UART_SetConfig+0x348>
 8004cfa:	2308      	movs	r3, #8
 8004cfc:	77fb      	strb	r3, [r7, #31]
 8004cfe:	e10f      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d00:	2310      	movs	r3, #16
 8004d02:	77fb      	strb	r3, [r7, #31]
 8004d04:	e10c      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a68      	ldr	r2, [pc, #416]	; (8004eac <UART_SetConfig+0x2d4>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d120      	bne.n	8004d52 <UART_SetConfig+0x17a>
 8004d10:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004d1a:	2b30      	cmp	r3, #48	; 0x30
 8004d1c:	d013      	beq.n	8004d46 <UART_SetConfig+0x16e>
 8004d1e:	2b30      	cmp	r3, #48	; 0x30
 8004d20:	d814      	bhi.n	8004d4c <UART_SetConfig+0x174>
 8004d22:	2b20      	cmp	r3, #32
 8004d24:	d009      	beq.n	8004d3a <UART_SetConfig+0x162>
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	d810      	bhi.n	8004d4c <UART_SetConfig+0x174>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <UART_SetConfig+0x15c>
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d006      	beq.n	8004d40 <UART_SetConfig+0x168>
 8004d32:	e00b      	b.n	8004d4c <UART_SetConfig+0x174>
 8004d34:	2300      	movs	r3, #0
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e0f2      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e0ef      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d40:	2304      	movs	r3, #4
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e0ec      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d46:	2308      	movs	r3, #8
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e0e9      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e0e6      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a56      	ldr	r2, [pc, #344]	; (8004eb0 <UART_SetConfig+0x2d8>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d120      	bne.n	8004d9e <UART_SetConfig+0x1c6>
 8004d5c:	4b51      	ldr	r3, [pc, #324]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d66:	2bc0      	cmp	r3, #192	; 0xc0
 8004d68:	d013      	beq.n	8004d92 <UART_SetConfig+0x1ba>
 8004d6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d6c:	d814      	bhi.n	8004d98 <UART_SetConfig+0x1c0>
 8004d6e:	2b80      	cmp	r3, #128	; 0x80
 8004d70:	d009      	beq.n	8004d86 <UART_SetConfig+0x1ae>
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d810      	bhi.n	8004d98 <UART_SetConfig+0x1c0>
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d002      	beq.n	8004d80 <UART_SetConfig+0x1a8>
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d006      	beq.n	8004d8c <UART_SetConfig+0x1b4>
 8004d7e:	e00b      	b.n	8004d98 <UART_SetConfig+0x1c0>
 8004d80:	2300      	movs	r3, #0
 8004d82:	77fb      	strb	r3, [r7, #31]
 8004d84:	e0cc      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d86:	2302      	movs	r3, #2
 8004d88:	77fb      	strb	r3, [r7, #31]
 8004d8a:	e0c9      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	77fb      	strb	r3, [r7, #31]
 8004d90:	e0c6      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d92:	2308      	movs	r3, #8
 8004d94:	77fb      	strb	r3, [r7, #31]
 8004d96:	e0c3      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d98:	2310      	movs	r3, #16
 8004d9a:	77fb      	strb	r3, [r7, #31]
 8004d9c:	e0c0      	b.n	8004f20 <UART_SetConfig+0x348>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a44      	ldr	r2, [pc, #272]	; (8004eb4 <UART_SetConfig+0x2dc>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d125      	bne.n	8004df4 <UART_SetConfig+0x21c>
 8004da8:	4b3e      	ldr	r3, [pc, #248]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004db6:	d017      	beq.n	8004de8 <UART_SetConfig+0x210>
 8004db8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dbc:	d817      	bhi.n	8004dee <UART_SetConfig+0x216>
 8004dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc2:	d00b      	beq.n	8004ddc <UART_SetConfig+0x204>
 8004dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dc8:	d811      	bhi.n	8004dee <UART_SetConfig+0x216>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <UART_SetConfig+0x1fe>
 8004dce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd2:	d006      	beq.n	8004de2 <UART_SetConfig+0x20a>
 8004dd4:	e00b      	b.n	8004dee <UART_SetConfig+0x216>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	77fb      	strb	r3, [r7, #31]
 8004dda:	e0a1      	b.n	8004f20 <UART_SetConfig+0x348>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e09e      	b.n	8004f20 <UART_SetConfig+0x348>
 8004de2:	2304      	movs	r3, #4
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e09b      	b.n	8004f20 <UART_SetConfig+0x348>
 8004de8:	2308      	movs	r3, #8
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e098      	b.n	8004f20 <UART_SetConfig+0x348>
 8004dee:	2310      	movs	r3, #16
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e095      	b.n	8004f20 <UART_SetConfig+0x348>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a2f      	ldr	r2, [pc, #188]	; (8004eb8 <UART_SetConfig+0x2e0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d125      	bne.n	8004e4a <UART_SetConfig+0x272>
 8004dfe:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e0c:	d017      	beq.n	8004e3e <UART_SetConfig+0x266>
 8004e0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e12:	d817      	bhi.n	8004e44 <UART_SetConfig+0x26c>
 8004e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e18:	d00b      	beq.n	8004e32 <UART_SetConfig+0x25a>
 8004e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e1e:	d811      	bhi.n	8004e44 <UART_SetConfig+0x26c>
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <UART_SetConfig+0x254>
 8004e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e28:	d006      	beq.n	8004e38 <UART_SetConfig+0x260>
 8004e2a:	e00b      	b.n	8004e44 <UART_SetConfig+0x26c>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e076      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e32:	2302      	movs	r3, #2
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e073      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e38:	2304      	movs	r3, #4
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e070      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	77fb      	strb	r3, [r7, #31]
 8004e42:	e06d      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e44:	2310      	movs	r3, #16
 8004e46:	77fb      	strb	r3, [r7, #31]
 8004e48:	e06a      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1b      	ldr	r2, [pc, #108]	; (8004ebc <UART_SetConfig+0x2e4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d138      	bne.n	8004ec6 <UART_SetConfig+0x2ee>
 8004e54:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <UART_SetConfig+0x2cc>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e62:	d017      	beq.n	8004e94 <UART_SetConfig+0x2bc>
 8004e64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e68:	d82a      	bhi.n	8004ec0 <UART_SetConfig+0x2e8>
 8004e6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e6e:	d00b      	beq.n	8004e88 <UART_SetConfig+0x2b0>
 8004e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e74:	d824      	bhi.n	8004ec0 <UART_SetConfig+0x2e8>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <UART_SetConfig+0x2aa>
 8004e7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e7e:	d006      	beq.n	8004e8e <UART_SetConfig+0x2b6>
 8004e80:	e01e      	b.n	8004ec0 <UART_SetConfig+0x2e8>
 8004e82:	2300      	movs	r3, #0
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e04b      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e88:	2302      	movs	r3, #2
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e048      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e8e:	2304      	movs	r3, #4
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e045      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e94:	2308      	movs	r3, #8
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e042      	b.n	8004f20 <UART_SetConfig+0x348>
 8004e9a:	bf00      	nop
 8004e9c:	efff69f3 	.word	0xefff69f3
 8004ea0:	40011000 	.word	0x40011000
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40004400 	.word	0x40004400
 8004eac:	40004800 	.word	0x40004800
 8004eb0:	40004c00 	.word	0x40004c00
 8004eb4:	40005000 	.word	0x40005000
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	40007800 	.word	0x40007800
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e02c      	b.n	8004f20 <UART_SetConfig+0x348>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a72      	ldr	r2, [pc, #456]	; (8005094 <UART_SetConfig+0x4bc>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d125      	bne.n	8004f1c <UART_SetConfig+0x344>
 8004ed0:	4b71      	ldr	r3, [pc, #452]	; (8005098 <UART_SetConfig+0x4c0>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004eda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ede:	d017      	beq.n	8004f10 <UART_SetConfig+0x338>
 8004ee0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ee4:	d817      	bhi.n	8004f16 <UART_SetConfig+0x33e>
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d00b      	beq.n	8004f04 <UART_SetConfig+0x32c>
 8004eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ef0:	d811      	bhi.n	8004f16 <UART_SetConfig+0x33e>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <UART_SetConfig+0x326>
 8004ef6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004efa:	d006      	beq.n	8004f0a <UART_SetConfig+0x332>
 8004efc:	e00b      	b.n	8004f16 <UART_SetConfig+0x33e>
 8004efe:	2300      	movs	r3, #0
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e00d      	b.n	8004f20 <UART_SetConfig+0x348>
 8004f04:	2302      	movs	r3, #2
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e00a      	b.n	8004f20 <UART_SetConfig+0x348>
 8004f0a:	2304      	movs	r3, #4
 8004f0c:	77fb      	strb	r3, [r7, #31]
 8004f0e:	e007      	b.n	8004f20 <UART_SetConfig+0x348>
 8004f10:	2308      	movs	r3, #8
 8004f12:	77fb      	strb	r3, [r7, #31]
 8004f14:	e004      	b.n	8004f20 <UART_SetConfig+0x348>
 8004f16:	2310      	movs	r3, #16
 8004f18:	77fb      	strb	r3, [r7, #31]
 8004f1a:	e001      	b.n	8004f20 <UART_SetConfig+0x348>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f28:	d15b      	bne.n	8004fe2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004f2a:	7ffb      	ldrb	r3, [r7, #31]
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d828      	bhi.n	8004f82 <UART_SetConfig+0x3aa>
 8004f30:	a201      	add	r2, pc, #4	; (adr r2, 8004f38 <UART_SetConfig+0x360>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f65 	.word	0x08004f65
 8004f40:	08004f6d 	.word	0x08004f6d
 8004f44:	08004f83 	.word	0x08004f83
 8004f48:	08004f73 	.word	0x08004f73
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f5c:	f7ff f952 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8004f60:	61b8      	str	r0, [r7, #24]
        break;
 8004f62:	e013      	b.n	8004f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7ff f962 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b4b      	ldr	r3, [pc, #300]	; (800509c <UART_SetConfig+0x4c4>)
 8004f6e:	61bb      	str	r3, [r7, #24]
        break;
 8004f70:	e00c      	b.n	8004f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7ff f875 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8004f76:	61b8      	str	r0, [r7, #24]
        break;
 8004f78:	e008      	b.n	8004f8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	61bb      	str	r3, [r7, #24]
        break;
 8004f80:	e004      	b.n	8004f8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	77bb      	strb	r3, [r7, #30]
        break;
 8004f8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d074      	beq.n	800507c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	005a      	lsls	r2, r3, #1
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	085b      	lsrs	r3, r3, #1
 8004f9c:	441a      	add	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	d916      	bls.n	8004fdc <UART_SetConfig+0x404>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb4:	d212      	bcs.n	8004fdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f023 030f 	bic.w	r3, r3, #15
 8004fbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	085b      	lsrs	r3, r3, #1
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	89fb      	ldrh	r3, [r7, #14]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	89fa      	ldrh	r2, [r7, #14]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	e04f      	b.n	800507c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	77bb      	strb	r3, [r7, #30]
 8004fe0:	e04c      	b.n	800507c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe2:	7ffb      	ldrb	r3, [r7, #31]
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d828      	bhi.n	800503a <UART_SetConfig+0x462>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <UART_SetConfig+0x418>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	08005015 	.word	0x08005015
 8004ff4:	0800501d 	.word	0x0800501d
 8004ff8:	08005025 	.word	0x08005025
 8004ffc:	0800503b 	.word	0x0800503b
 8005000:	0800502b 	.word	0x0800502b
 8005004:	0800503b 	.word	0x0800503b
 8005008:	0800503b 	.word	0x0800503b
 800500c:	0800503b 	.word	0x0800503b
 8005010:	08005033 	.word	0x08005033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005014:	f7ff f8f6 	bl	8004204 <HAL_RCC_GetPCLK1Freq>
 8005018:	61b8      	str	r0, [r7, #24]
        break;
 800501a:	e013      	b.n	8005044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800501c:	f7ff f906 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005020:	61b8      	str	r0, [r7, #24]
        break;
 8005022:	e00f      	b.n	8005044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <UART_SetConfig+0x4c4>)
 8005026:	61bb      	str	r3, [r7, #24]
        break;
 8005028:	e00c      	b.n	8005044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7ff f819 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800502e:	61b8      	str	r0, [r7, #24]
        break;
 8005030:	e008      	b.n	8005044 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005036:	61bb      	str	r3, [r7, #24]
        break;
 8005038:	e004      	b.n	8005044 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	77bb      	strb	r3, [r7, #30]
        break;
 8005042:	bf00      	nop
    }

    if (pclk != 0U)
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d018      	beq.n	800507c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	085a      	lsrs	r2, r3, #1
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	441a      	add	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	fbb2 f3f3 	udiv	r3, r2, r3
 800505c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	2b0f      	cmp	r3, #15
 8005062:	d909      	bls.n	8005078 <UART_SetConfig+0x4a0>
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800506a:	d205      	bcs.n	8005078 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	b29a      	uxth	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e001      	b.n	800507c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005088:	7fbb      	ldrb	r3, [r7, #30]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3720      	adds	r7, #32
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40007c00 	.word	0x40007c00
 8005098:	40023800 	.word	0x40023800
 800509c:	00f42400 	.word	0x00f42400

080050a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0320 	and.w	r3, r3, #32
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00a      	beq.n	8005174 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517c:	2b00      	cmp	r3, #0
 800517e:	d01a      	beq.n	80051b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	430a      	orrs	r2, r1
 8005194:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800519e:	d10a      	bne.n	80051b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	430a      	orrs	r2, r1
 80051d6:	605a      	str	r2, [r3, #4]
  }
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051f4:	f7fd f9fa 	bl	80025ec <HAL_GetTick>
 80051f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b08      	cmp	r3, #8
 8005206:	d10e      	bne.n	8005226 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f81b 	bl	8005252 <UART_WaitOnFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e011      	b.n	800524a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b09c      	sub	sp, #112	; 0x70
 8005256:	af00      	add	r7, sp, #0
 8005258:	60f8      	str	r0, [r7, #12]
 800525a:	60b9      	str	r1, [r7, #8]
 800525c:	603b      	str	r3, [r7, #0]
 800525e:	4613      	mov	r3, r2
 8005260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005262:	e0a7      	b.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	f000 80a3 	beq.w	80053b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526e:	f7fd f9bd 	bl	80025ec <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <UART_WaitOnFlagUntilTimeout+0x32>
 800527e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005280:	2b00      	cmp	r3, #0
 8005282:	d13f      	bne.n	8005304 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	e853 3f00 	ldrex	r3, [r3]
 8005290:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005298:	667b      	str	r3, [r7, #100]	; 0x64
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e6      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3308      	adds	r3, #8
 80052bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	663b      	str	r3, [r7, #96]	; 0x60
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	3308      	adds	r3, #8
 80052d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80052d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e5      	bne.n	80052b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e068      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0304 	and.w	r3, r3, #4
 800530e:	2b00      	cmp	r3, #0
 8005310:	d050      	beq.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005320:	d148      	bne.n	80053b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800532a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005334:	e853 3f00 	ldrex	r3, [r3]
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800533c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005340:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
 800534c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005352:	e841 2300 	strex	r3, r2, [r1]
 8005356:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1e6      	bne.n	800532c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3308      	adds	r3, #8
 8005364:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	613b      	str	r3, [r7, #16]
   return(result);
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f023 0301 	bic.w	r3, r3, #1
 8005374:	66bb      	str	r3, [r7, #104]	; 0x68
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800537e:	623a      	str	r2, [r7, #32]
 8005380:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	69f9      	ldr	r1, [r7, #28]
 8005384:	6a3a      	ldr	r2, [r7, #32]
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	61bb      	str	r3, [r7, #24]
   return(result);
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e010      	b.n	80053d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	4013      	ands	r3, r2
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	bf0c      	ite	eq
 80053c4:	2301      	moveq	r3, #1
 80053c6:	2300      	movne	r3, #0
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	461a      	mov	r2, r3
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	f43f af48 	beq.w	8005264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3770      	adds	r7, #112	; 0x70
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <gesture_recognition_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool gesture_recognition_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_gesture_recognition_activations_map, 1, params)) {
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	2101      	movs	r1, #1
 80053ee:	482c      	ldr	r0, [pc, #176]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 80053f0:	f000 fae2 	bl	80059b8 <ai_platform_get_activations_map>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d047      	beq.n	800548a <gesture_recognition_configure_activations+0xaa>
    /* Updating activations (byte) offsets */
    
    dense_input_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 80053fa:	4b29      	ldr	r3, [pc, #164]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a29      	ldr	r2, [pc, #164]	; (80054a4 <gesture_recognition_configure_activations+0xc4>)
 8005400:	6093      	str	r3, [r2, #8]
    dense_input_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 8005402:	4b27      	ldr	r3, [pc, #156]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a27      	ldr	r2, [pc, #156]	; (80054a4 <gesture_recognition_configure_activations+0xc4>)
 8005408:	60d3      	str	r3, [r2, #12]
    
    dense_0_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 6024);
 800540a:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	f241 7388 	movw	r3, #6024	; 0x1788
 8005412:	4413      	add	r3, r2
 8005414:	4a24      	ldr	r2, [pc, #144]	; (80054a8 <gesture_recognition_configure_activations+0xc8>)
 8005416:	6093      	str	r3, [r2, #8]
    dense_0_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 6024);
 8005418:	4b21      	ldr	r3, [pc, #132]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	f241 7388 	movw	r3, #6024	; 0x1788
 8005420:	4413      	add	r3, r2
 8005422:	4a21      	ldr	r2, [pc, #132]	; (80054a8 <gesture_recognition_configure_activations+0xc8>)
 8005424:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 8005426:	4b1e      	ldr	r3, [pc, #120]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a20      	ldr	r2, [pc, #128]	; (80054ac <gesture_recognition_configure_activations+0xcc>)
 800542c:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 800542e:	4b1c      	ldr	r3, [pc, #112]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <gesture_recognition_configure_activations+0xcc>)
 8005434:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 256);
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <gesture_recognition_configure_activations+0xd0>)
 8005440:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 256);
 8005442:	4b17      	ldr	r3, [pc, #92]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800544a:	4a19      	ldr	r2, [pc, #100]	; (80054b0 <gesture_recognition_configure_activations+0xd0>)
 800544c:	60d3      	str	r3, [r2, #12]
    
    nl_1_nl_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 800544e:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <gesture_recognition_configure_activations+0xd4>)
 8005454:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 8005456:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a16      	ldr	r2, [pc, #88]	; (80054b4 <gesture_recognition_configure_activations+0xd4>)
 800545c:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 256);
 800545e:	4b10      	ldr	r3, [pc, #64]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005466:	4a14      	ldr	r2, [pc, #80]	; (80054b8 <gesture_recognition_configure_activations+0xd8>)
 8005468:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 256);
 800546a:	4b0d      	ldr	r3, [pc, #52]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005472:	4a11      	ldr	r2, [pc, #68]	; (80054b8 <gesture_recognition_configure_activations+0xd8>)
 8005474:	60d3      	str	r3, [r2, #12]
    
    nl_3_output_array.data = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 8005476:	4b0a      	ldr	r3, [pc, #40]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a10      	ldr	r2, [pc, #64]	; (80054bc <gesture_recognition_configure_activations+0xdc>)
 800547c:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_gesture_recognition_activations_map[0] + 0);
 800547e:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <gesture_recognition_configure_activations+0xc0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <gesture_recognition_configure_activations+0xdc>)
 8005484:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005486:	2301      	movs	r3, #1
 8005488:	e005      	b.n	8005496 <gesture_recognition_configure_activations+0xb6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800548a:	2213      	movs	r2, #19
 800548c:	2130      	movs	r1, #48	; 0x30
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc10 	bl	8005cb4 <ai_platform_network_set_error>
  return false;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20003b98 	.word	0x20003b98
 80054a4:	2000001c 	.word	0x2000001c
 80054a8:	2000002c 	.word	0x2000002c
 80054ac:	2000004c 	.word	0x2000004c
 80054b0:	2000005c 	.word	0x2000005c
 80054b4:	2000007c 	.word	0x2000007c
 80054b8:	2000008c 	.word	0x2000008c
 80054bc:	2000009c 	.word	0x2000009c

080054c0 <gesture_recognition_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool gesture_recognition_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_gesture_recognition_weights_map, 1, params)) {
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	2101      	movs	r1, #1
 80054ce:	483d      	ldr	r0, [pc, #244]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 80054d0:	f000 fa1a 	bl	8005908 <ai_platform_get_weights_map>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d069      	beq.n	80055ae <gesture_recognition_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80054da:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <gesture_recognition_configure_weights+0x108>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054e2:	4a39      	ldr	r2, [pc, #228]	; (80055c8 <gesture_recognition_configure_weights+0x108>)
 80054e4:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 0);
 80054e6:	4b37      	ldr	r3, [pc, #220]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a37      	ldr	r2, [pc, #220]	; (80055c8 <gesture_recognition_configure_weights+0x108>)
 80054ec:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 0);
 80054ee:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a35      	ldr	r2, [pc, #212]	; (80055c8 <gesture_recognition_configure_weights+0x108>)
 80054f4:	60d3      	str	r3, [r2, #12]
    
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80054f6:	4b35      	ldr	r3, [pc, #212]	; (80055cc <gesture_recognition_configure_weights+0x10c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054fe:	4a33      	ldr	r2, [pc, #204]	; (80055cc <gesture_recognition_configure_weights+0x10c>)
 8005500:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 256);
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800550a:	4a30      	ldr	r2, [pc, #192]	; (80055cc <gesture_recognition_configure_weights+0x10c>)
 800550c:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 256);
 800550e:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005516:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <gesture_recognition_configure_weights+0x10c>)
 8005518:	60d3      	str	r3, [r2, #12]
    
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800551a:	4b2d      	ldr	r3, [pc, #180]	; (80055d0 <gesture_recognition_configure_weights+0x110>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005522:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <gesture_recognition_configure_weights+0x110>)
 8005524:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 2816);
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	4a28      	ldr	r2, [pc, #160]	; (80055d0 <gesture_recognition_configure_weights+0x110>)
 8005530:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 2816);
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	4a25      	ldr	r2, [pc, #148]	; (80055d0 <gesture_recognition_configure_weights+0x110>)
 800553c:	60d3      	str	r3, [r2, #12]
    
    dense_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800553e:	4b25      	ldr	r3, [pc, #148]	; (80055d4 <gesture_recognition_configure_weights+0x114>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005546:	4a23      	ldr	r2, [pc, #140]	; (80055d4 <gesture_recognition_configure_weights+0x114>)
 8005548:	6013      	str	r3, [r2, #0]
    dense_0_weights_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 2856);
 800554a:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 8005552:	4a20      	ldr	r2, [pc, #128]	; (80055d4 <gesture_recognition_configure_weights+0x114>)
 8005554:	6093      	str	r3, [r2, #8]
    dense_0_weights_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 2856);
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f603 3328 	addw	r3, r3, #2856	; 0xb28
 800555e:	4a1d      	ldr	r2, [pc, #116]	; (80055d4 <gesture_recognition_configure_weights+0x114>)
 8005560:	60d3      	str	r3, [r2, #12]
    
    dense_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <gesture_recognition_configure_weights+0x118>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <gesture_recognition_configure_weights+0x118>)
 800556c:	6013      	str	r3, [r2, #0]
    dense_0_bias_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 388392);
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	4b1a      	ldr	r3, [pc, #104]	; (80055dc <gesture_recognition_configure_weights+0x11c>)
 8005574:	4413      	add	r3, r2
 8005576:	4a18      	ldr	r2, [pc, #96]	; (80055d8 <gesture_recognition_configure_weights+0x118>)
 8005578:	6093      	str	r3, [r2, #8]
    dense_0_bias_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 388392);
 800557a:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b17      	ldr	r3, [pc, #92]	; (80055dc <gesture_recognition_configure_weights+0x11c>)
 8005580:	4413      	add	r3, r2
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <gesture_recognition_configure_weights+0x118>)
 8005584:	60d3      	str	r3, [r2, #12]
    
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005586:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <gesture_recognition_configure_weights+0x120>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800558e:	4a14      	ldr	r2, [pc, #80]	; (80055e0 <gesture_recognition_configure_weights+0x120>)
 8005590:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(g_gesture_recognition_weights_map[0] + 388648);
 8005592:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	4b13      	ldr	r3, [pc, #76]	; (80055e4 <gesture_recognition_configure_weights+0x124>)
 8005598:	4413      	add	r3, r2
 800559a:	4a11      	ldr	r2, [pc, #68]	; (80055e0 <gesture_recognition_configure_weights+0x120>)
 800559c:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(g_gesture_recognition_weights_map[0] + 388648);
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <gesture_recognition_configure_weights+0x104>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	4b10      	ldr	r3, [pc, #64]	; (80055e4 <gesture_recognition_configure_weights+0x124>)
 80055a4:	4413      	add	r3, r2
 80055a6:	4a0e      	ldr	r2, [pc, #56]	; (80055e0 <gesture_recognition_configure_weights+0x120>)
 80055a8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e005      	b.n	80055ba <gesture_recognition_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80055ae:	2212      	movs	r2, #18
 80055b0:	2130      	movs	r1, #48	; 0x30
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fb7e 	bl	8005cb4 <ai_platform_network_set_error>
  return false;
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3708      	adds	r7, #8
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	20003b9c 	.word	0x20003b9c
 80055c8:	2000000c 	.word	0x2000000c
 80055cc:	2000003c 	.word	0x2000003c
 80055d0:	2000006c 	.word	0x2000006c
 80055d4:	200000ac 	.word	0x200000ac
 80055d8:	200000bc 	.word	0x200000bc
 80055dc:	0005ed28 	.word	0x0005ed28
 80055e0:	200000cc 	.word	0x200000cc
 80055e4:	0005ee28 	.word	0x0005ee28

080055e8 <ai_gesture_recognition_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_gesture_recognition_get_error(ai_handle network)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fa53 	bl	8005a9c <ai_platform_network_get_error>
 80055f6:	4603      	mov	r3, r0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}

08005600 <ai_gesture_recognition_create>:

AI_API_ENTRY
ai_error ai_gesture_recognition_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800560a:	2300      	movs	r3, #0
 800560c:	9301      	str	r3, [sp, #4]
 800560e:	2305      	movs	r3, #5
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	2301      	movs	r3, #1
 8005614:	4a04      	ldr	r2, [pc, #16]	; (8005628 <ai_gesture_recognition_create+0x28>)
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fe65 	bl	80062e8 <ai_platform_network_create>
 800561e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005620:	4618      	mov	r0, r3
 8005622:	3708      	adds	r7, #8
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	20000694 	.word	0x20000694

0800562c <ai_gesture_recognition_create_and_init>:

AI_API_ENTRY
ai_error ai_gesture_recognition_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b096      	sub	sp, #88	; 0x58
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_gesture_recognition_create(network, AI_GESTURE_RECOGNITION_DATA_CONFIG);
 8005638:	2100      	movs	r1, #0
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f7ff ffe0 	bl	8005600 <ai_gesture_recognition_create>
 8005640:	4603      	mov	r3, r0
 8005642:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005644:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <ai_gesture_recognition_create_and_init+0x24>
        return err;
 800564c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564e:	e05d      	b.n	800570c <ai_gesture_recognition_create_and_init+0xe0>
    if (ai_gesture_recognition_data_params_get(&params) != true) {
 8005650:	f107 0314 	add.w	r3, r7, #20
 8005654:	4618      	mov	r0, r3
 8005656:	f000 f8dd 	bl	8005814 <ai_gesture_recognition_data_params_get>
 800565a:	4603      	mov	r3, r0
 800565c:	f083 0301 	eor.w	r3, r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d008      	beq.n	8005678 <ai_gesture_recognition_create_and_init+0x4c>
        err = ai_gesture_recognition_get_error(*network);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff ffbc 	bl	80055e8 <ai_gesture_recognition_get_error>
 8005670:	4603      	mov	r3, r0
 8005672:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005676:	e049      	b.n	800570c <ai_gesture_recognition_create_and_init+0xe0>
    }
#if defined(AI_GESTURE_RECOGNITION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d016      	beq.n	80056ac <ai_gesture_recognition_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 800567e:	2300      	movs	r3, #0
 8005680:	657b      	str	r3, [r7, #84]	; 0x54
 8005682:	e00e      	b.n	80056a2 <ai_gesture_recognition_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005684:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4413      	add	r3, r2
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	f107 0314 	add.w	r3, r7, #20
 8005694:	330c      	adds	r3, #12
 8005696:	4618      	mov	r0, r3
 8005698:	f000 f922 	bl	80058e0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 800569c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569e:	3301      	adds	r3, #1
 80056a0:	657b      	str	r3, [r7, #84]	; 0x54
 80056a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056a4:	461a      	mov	r2, r3
 80056a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a8:	4293      	cmp	r3, r2
 80056aa:	dbeb      	blt.n	8005684 <ai_gesture_recognition_create_and_init+0x58>
    }
#endif
#if defined(AI_GESTURE_RECOGNITION_DATA_WEIGHTS_COUNT)
    if (weights) {
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <ai_gesture_recognition_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80056b2:	2300      	movs	r3, #0
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
 80056b6:	e00e      	b.n	80056d6 <ai_gesture_recognition_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80056b8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80056ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	4413      	add	r3, r2
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	f107 0314 	add.w	r3, r7, #20
 80056c8:	3304      	adds	r3, #4
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f908 	bl	80058e0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80056d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d2:	3301      	adds	r3, #1
 80056d4:	653b      	str	r3, [r7, #80]	; 0x50
 80056d6:	8b7b      	ldrh	r3, [r7, #26]
 80056d8:	461a      	mov	r2, r3
 80056da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056dc:	4293      	cmp	r3, r2
 80056de:	dbeb      	blt.n	80056b8 <ai_gesture_recognition_create_and_init+0x8c>
    }
#endif
    if (ai_gesture_recognition_init(*network, &params) != true) {
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f107 0214 	add.w	r2, r7, #20
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 f846 	bl	800577c <ai_gesture_recognition_init>
 80056f0:	4603      	mov	r3, r0
 80056f2:	f083 0301 	eor.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d006      	beq.n	800570a <ai_gesture_recognition_create_and_init+0xde>
        err = ai_gesture_recognition_get_error(*network);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7ff ff71 	bl	80055e8 <ai_gesture_recognition_get_error>
 8005706:	4603      	mov	r3, r0
 8005708:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800570a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800570c:	4618      	mov	r0, r3
 800570e:	3758      	adds	r7, #88	; 0x58
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <ai_gesture_recognition_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_gesture_recognition_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d104      	bne.n	800572e <ai_gesture_recognition_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005724:	4b06      	ldr	r3, [pc, #24]	; (8005740 <ai_gesture_recognition_inputs_get+0x2c>)
 8005726:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a06      	ldr	r2, [pc, #24]	; (8005744 <ai_gesture_recognition_inputs_get+0x30>)
 800572c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 800572e:	6839      	ldr	r1, [r7, #0]
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f000 fac5 	bl	8005cc0 <ai_platform_inputs_get>
 8005736:	4603      	mov	r3, r0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000694 	.word	0x20000694
 8005744:	a1c00100 	.word	0xa1c00100

08005748 <ai_gesture_recognition_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_gesture_recognition_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <ai_gesture_recognition_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005758:	4b06      	ldr	r3, [pc, #24]	; (8005774 <ai_gesture_recognition_outputs_get+0x2c>)
 800575a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a06      	ldr	r2, [pc, #24]	; (8005778 <ai_gesture_recognition_outputs_get+0x30>)
 8005760:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 fc37 	bl	8005fd8 <ai_platform_outputs_get>
 800576a:	4603      	mov	r3, r0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20000694 	.word	0x20000694
 8005778:	a1c00100 	.word	0xa1c00100

0800577c <ai_gesture_recognition_init>:
}

AI_API_ENTRY
ai_bool ai_gesture_recognition_init(
  ai_handle network, const ai_network_params* params)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005786:	6839      	ldr	r1, [r7, #0]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 ff87 	bl	800669c <ai_platform_network_init>
 800578e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <ai_gesture_recognition_init+0x1e>
 8005796:	2300      	movs	r3, #0
 8005798:	e028      	b.n	80057ec <ai_gesture_recognition_init+0x70>

  ai_bool ok = true;
 800579a:	2301      	movs	r3, #1
 800579c:	72fb      	strb	r3, [r7, #11]
  ok &= gesture_recognition_configure_weights(net_ctx, params);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff fe8d 	bl	80054c0 <gesture_recognition_configure_weights>
 80057a6:	4603      	mov	r3, r0
 80057a8:	461a      	mov	r2, r3
 80057aa:	7afb      	ldrb	r3, [r7, #11]
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	72fb      	strb	r3, [r7, #11]
  ok &= gesture_recognition_configure_activations(net_ctx, params);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fe10 	bl	80053e0 <gesture_recognition_configure_activations>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	7afb      	ldrb	r3, [r7, #11]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f001 f8fe 	bl	80069d4 <ai_platform_network_post_init>
 80057d8:	4603      	mov	r3, r0
 80057da:	461a      	mov	r2, r3
 80057dc:	7afb      	ldrb	r3, [r7, #11]
 80057de:	4013      	ands	r3, r2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	72fb      	strb	r3, [r7, #11]

  return ok;
 80057ea:	7afb      	ldrb	r3, [r7, #11]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3710      	adds	r7, #16
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <ai_gesture_recognition_run>:


AI_API_ENTRY
ai_i32 ai_gesture_recognition_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f001 fa0f 	bl	8006c28 <ai_platform_network_process>
 800580a:	4603      	mov	r3, r0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <ai_gesture_recognition_data_params_get>:
 * @ingroup gesture_recognition_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_gesture_recognition_data_params_get(ai_network_params* params)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <ai_gesture_recognition_data_params_get+0x12>
 8005822:	2300      	movs	r3, #0
 8005824:	e016      	b.n	8005854 <ai_gesture_recognition_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005826:	4a0d      	ldr	r2, [pc, #52]	; (800585c <ai_gesture_recognition_data_params_get+0x48>)
 8005828:	f107 0310 	add.w	r3, r7, #16
 800582c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005830:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_GESTURE_RECOGNITION_DATA_ACTIVATIONS_COUNT, g_gesture_recognition_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <ai_gesture_recognition_data_params_get+0x4c>)
 8005836:	f107 0308 	add.w	r3, r7, #8
 800583a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800583e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_GESTURE_RECOGNITION_DATA_WEIGHTS_COUNT, g_gesture_recognition_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005842:	f107 0210 	add.w	r2, r7, #16
 8005846:	f107 0308 	add.w	r3, r7, #8
 800584a:	4619      	mov	r1, r3
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f90b 	bl	8005a68 <ai_platform_bind_network_params>
 8005852:	4603      	mov	r3, r0
}
 8005854:	4618      	mov	r0, r3
 8005856:	3718      	adds	r7, #24
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	0800b54c 	.word	0x0800b54c
 8005860:	0800b554 	.word	0x0800b554

08005864 <ai_buffer_get_size>:
 8005864:	b368      	cbz	r0, 80058c2 <ai_buffer_get_size+0x5e>
 8005866:	4b17      	ldr	r3, [pc, #92]	; (80058c4 <ai_buffer_get_size+0x60>)
 8005868:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <ai_buffer_get_size+0x64>)
 800586a:	b410      	push	{r4}
 800586c:	6804      	ldr	r4, [r0, #0]
 800586e:	4023      	ands	r3, r4
 8005870:	4293      	cmp	r3, r2
 8005872:	d123      	bne.n	80058bc <ai_buffer_get_size+0x58>
 8005874:	b311      	cbz	r1, 80058bc <ai_buffer_get_size+0x58>
 8005876:	6984      	ldr	r4, [r0, #24]
 8005878:	6862      	ldr	r2, [r4, #4]
 800587a:	321f      	adds	r2, #31
 800587c:	f022 021f 	bic.w	r2, r2, #31
 8005880:	7d03      	ldrb	r3, [r0, #20]
 8005882:	6941      	ldr	r1, [r0, #20]
 8005884:	f1a3 0301 	sub.w	r3, r3, #1
 8005888:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800588c:	fab3 f383 	clz	r3, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005896:	da0c      	bge.n	80058b2 <ai_buffer_get_size+0x4e>
 8005898:	2b01      	cmp	r3, #1
 800589a:	d103      	bne.n	80058a4 <ai_buffer_get_size+0x40>
 800589c:	2802      	cmp	r0, #2
 800589e:	f04f 0302 	mov.w	r3, #2
 80058a2:	d006      	beq.n	80058b2 <ai_buffer_get_size+0x4e>
 80058a4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80058a8:	3301      	adds	r3, #1
 80058aa:	4298      	cmp	r0, r3
 80058ac:	fb01 f202 	mul.w	r2, r1, r2
 80058b0:	d1f2      	bne.n	8005898 <ai_buffer_get_size+0x34>
 80058b2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80058b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	6984      	ldr	r4, [r0, #24]
 80058be:	6862      	ldr	r2, [r4, #4]
 80058c0:	e7de      	b.n	8005880 <ai_buffer_get_size+0x1c>
 80058c2:	4770      	bx	lr
 80058c4:	017fffff 	.word	0x017fffff
 80058c8:	000400c0 	.word	0x000400c0

080058cc <ai_buffer_array_sane>:
 80058cc:	b138      	cbz	r0, 80058de <ai_buffer_array_sane+0x12>
 80058ce:	6843      	ldr	r3, [r0, #4]
 80058d0:	b123      	cbz	r3, 80058dc <ai_buffer_array_sane+0x10>
 80058d2:	8840      	ldrh	r0, [r0, #2]
 80058d4:	3800      	subs	r0, #0
 80058d6:	bf18      	it	ne
 80058d8:	2001      	movne	r0, #1
 80058da:	4770      	bx	lr
 80058dc:	4618      	mov	r0, r3
 80058de:	4770      	bx	lr

080058e0 <ai_buffer_array_item_set_address>:
 80058e0:	b150      	cbz	r0, 80058f8 <ai_buffer_array_item_set_address+0x18>
 80058e2:	6843      	ldr	r3, [r0, #4]
 80058e4:	b14b      	cbz	r3, 80058fa <ai_buffer_array_item_set_address+0x1a>
 80058e6:	8840      	ldrh	r0, [r0, #2]
 80058e8:	b900      	cbnz	r0, 80058ec <ai_buffer_array_item_set_address+0xc>
 80058ea:	4770      	bx	lr
 80058ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80058f0:	2001      	movs	r0, #1
 80058f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058f6:	604a      	str	r2, [r1, #4]
 80058f8:	4770      	bx	lr
 80058fa:	4618      	mov	r0, r3
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <_ai_platform_acquire_crc>:
 8005900:	2001      	movs	r0, #1
 8005902:	4770      	bx	lr

08005904 <_ai_platform_release_crc>:
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop

08005908 <ai_platform_get_weights_map>:
 8005908:	2900      	cmp	r1, #0
 800590a:	bf18      	it	ne
 800590c:	2800      	cmpne	r0, #0
 800590e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005910:	bf0c      	ite	eq
 8005912:	2401      	moveq	r4, #1
 8005914:	2400      	movne	r4, #0
 8005916:	2a00      	cmp	r2, #0
 8005918:	bf08      	it	eq
 800591a:	f044 0401 	orreq.w	r4, r4, #1
 800591e:	b114      	cbz	r4, 8005926 <ai_platform_get_weights_map+0x1e>
 8005920:	2400      	movs	r4, #0
 8005922:	4620      	mov	r0, r4
 8005924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005926:	4616      	mov	r6, r2
 8005928:	4b22      	ldr	r3, [pc, #136]	; (80059b4 <ai_platform_get_weights_map+0xac>)
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	4605      	mov	r5, r0
 800592e:	460f      	mov	r7, r1
 8005930:	429a      	cmp	r2, r3
 8005932:	d022      	beq.n	800597a <ai_platform_get_weights_map+0x72>
 8005934:	6870      	ldr	r0, [r6, #4]
 8005936:	2800      	cmp	r0, #0
 8005938:	d0f2      	beq.n	8005920 <ai_platform_get_weights_map+0x18>
 800593a:	6806      	ldr	r6, [r0, #0]
 800593c:	429e      	cmp	r6, r3
 800593e:	d006      	beq.n	800594e <ai_platform_get_weights_map+0x46>
 8005940:	f1a1 0401 	sub.w	r4, r1, #1
 8005944:	6028      	str	r0, [r5, #0]
 8005946:	fab4 f484 	clz	r4, r4
 800594a:	0964      	lsrs	r4, r4, #5
 800594c:	e7e9      	b.n	8005922 <ai_platform_get_weights_map+0x1a>
 800594e:	3d04      	subs	r5, #4
 8005950:	4602      	mov	r2, r0
 8005952:	4621      	mov	r1, r4
 8005954:	e000      	b.n	8005958 <ai_platform_get_weights_map+0x50>
 8005956:	4619      	mov	r1, r3
 8005958:	f852 3f04 	ldr.w	r3, [r2, #4]!
 800595c:	42b3      	cmp	r3, r6
 800595e:	d025      	beq.n	80059ac <ai_platform_get_weights_map+0xa4>
 8005960:	f845 3f04 	str.w	r3, [r5, #4]!
 8005964:	1c4b      	adds	r3, r1, #1
 8005966:	429f      	cmp	r7, r3
 8005968:	d8f5      	bhi.n	8005956 <ai_platform_get_weights_map+0x4e>
 800596a:	d1da      	bne.n	8005922 <ai_platform_get_weights_map+0x1a>
 800596c:	3102      	adds	r1, #2
 800596e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005972:	42b3      	cmp	r3, r6
 8005974:	d1d5      	bne.n	8005922 <ai_platform_get_weights_map+0x1a>
 8005976:	2401      	movs	r4, #1
 8005978:	e7d3      	b.n	8005922 <ai_platform_get_weights_map+0x1a>
 800597a:	1d30      	adds	r0, r6, #4
 800597c:	f7ff ffa6 	bl	80058cc <ai_buffer_array_sane>
 8005980:	2800      	cmp	r0, #0
 8005982:	d0cd      	beq.n	8005920 <ai_platform_get_weights_map+0x18>
 8005984:	88f3      	ldrh	r3, [r6, #6]
 8005986:	429f      	cmp	r7, r3
 8005988:	d1ca      	bne.n	8005920 <ai_platform_get_weights_map+0x18>
 800598a:	3d04      	subs	r5, #4
 800598c:	4622      	mov	r2, r4
 800598e:	68b3      	ldr	r3, [r6, #8]
 8005990:	4423      	add	r3, r4
 8005992:	341c      	adds	r4, #28
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b123      	cbz	r3, 80059a2 <ai_platform_get_weights_map+0x9a>
 8005998:	3201      	adds	r2, #1
 800599a:	f845 3f04 	str.w	r3, [r5, #4]!
 800599e:	4297      	cmp	r7, r2
 80059a0:	d8f5      	bhi.n	800598e <ai_platform_get_weights_map+0x86>
 80059a2:	1abc      	subs	r4, r7, r2
 80059a4:	fab4 f484 	clz	r4, r4
 80059a8:	0964      	lsrs	r4, r4, #5
 80059aa:	e7ba      	b.n	8005922 <ai_platform_get_weights_map+0x1a>
 80059ac:	428f      	cmp	r7, r1
 80059ae:	d1b8      	bne.n	8005922 <ai_platform_get_weights_map+0x1a>
 80059b0:	e7e1      	b.n	8005976 <ai_platform_get_weights_map+0x6e>
 80059b2:	bf00      	nop
 80059b4:	a1facade 	.word	0xa1facade

080059b8 <ai_platform_get_activations_map>:
 80059b8:	2900      	cmp	r1, #0
 80059ba:	bf18      	it	ne
 80059bc:	2800      	cmpne	r0, #0
 80059be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c0:	bf0c      	ite	eq
 80059c2:	2401      	moveq	r4, #1
 80059c4:	2400      	movne	r4, #0
 80059c6:	2a00      	cmp	r2, #0
 80059c8:	bf08      	it	eq
 80059ca:	f044 0401 	orreq.w	r4, r4, #1
 80059ce:	b114      	cbz	r4, 80059d6 <ai_platform_get_activations_map+0x1e>
 80059d0:	2400      	movs	r4, #0
 80059d2:	4620      	mov	r0, r4
 80059d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d6:	4616      	mov	r6, r2
 80059d8:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <ai_platform_get_activations_map+0xac>)
 80059da:	6812      	ldr	r2, [r2, #0]
 80059dc:	4605      	mov	r5, r0
 80059de:	460f      	mov	r7, r1
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d022      	beq.n	8005a2a <ai_platform_get_activations_map+0x72>
 80059e4:	6a30      	ldr	r0, [r6, #32]
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0f2      	beq.n	80059d0 <ai_platform_get_activations_map+0x18>
 80059ea:	6806      	ldr	r6, [r0, #0]
 80059ec:	429e      	cmp	r6, r3
 80059ee:	d006      	beq.n	80059fe <ai_platform_get_activations_map+0x46>
 80059f0:	f1a1 0401 	sub.w	r4, r1, #1
 80059f4:	6028      	str	r0, [r5, #0]
 80059f6:	fab4 f484 	clz	r4, r4
 80059fa:	0964      	lsrs	r4, r4, #5
 80059fc:	e7e9      	b.n	80059d2 <ai_platform_get_activations_map+0x1a>
 80059fe:	3d04      	subs	r5, #4
 8005a00:	4602      	mov	r2, r0
 8005a02:	4621      	mov	r1, r4
 8005a04:	e000      	b.n	8005a08 <ai_platform_get_activations_map+0x50>
 8005a06:	4619      	mov	r1, r3
 8005a08:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005a0c:	42b3      	cmp	r3, r6
 8005a0e:	d026      	beq.n	8005a5e <ai_platform_get_activations_map+0xa6>
 8005a10:	f845 3f04 	str.w	r3, [r5, #4]!
 8005a14:	1c4b      	adds	r3, r1, #1
 8005a16:	429f      	cmp	r7, r3
 8005a18:	d8f5      	bhi.n	8005a06 <ai_platform_get_activations_map+0x4e>
 8005a1a:	d1da      	bne.n	80059d2 <ai_platform_get_activations_map+0x1a>
 8005a1c:	3102      	adds	r1, #2
 8005a1e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005a22:	42b3      	cmp	r3, r6
 8005a24:	d1d5      	bne.n	80059d2 <ai_platform_get_activations_map+0x1a>
 8005a26:	2401      	movs	r4, #1
 8005a28:	e7d3      	b.n	80059d2 <ai_platform_get_activations_map+0x1a>
 8005a2a:	f106 000c 	add.w	r0, r6, #12
 8005a2e:	f7ff ff4d 	bl	80058cc <ai_buffer_array_sane>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	d0cc      	beq.n	80059d0 <ai_platform_get_activations_map+0x18>
 8005a36:	89f3      	ldrh	r3, [r6, #14]
 8005a38:	429f      	cmp	r7, r3
 8005a3a:	d1c9      	bne.n	80059d0 <ai_platform_get_activations_map+0x18>
 8005a3c:	3d04      	subs	r5, #4
 8005a3e:	4622      	mov	r2, r4
 8005a40:	6933      	ldr	r3, [r6, #16]
 8005a42:	4423      	add	r3, r4
 8005a44:	341c      	adds	r4, #28
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	b123      	cbz	r3, 8005a54 <ai_platform_get_activations_map+0x9c>
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	f845 3f04 	str.w	r3, [r5, #4]!
 8005a50:	4297      	cmp	r7, r2
 8005a52:	d8f5      	bhi.n	8005a40 <ai_platform_get_activations_map+0x88>
 8005a54:	1abc      	subs	r4, r7, r2
 8005a56:	fab4 f484 	clz	r4, r4
 8005a5a:	0964      	lsrs	r4, r4, #5
 8005a5c:	e7b9      	b.n	80059d2 <ai_platform_get_activations_map+0x1a>
 8005a5e:	428f      	cmp	r7, r1
 8005a60:	d1b7      	bne.n	80059d2 <ai_platform_get_activations_map+0x1a>
 8005a62:	e7e0      	b.n	8005a26 <ai_platform_get_activations_map+0x6e>
 8005a64:	a1facade 	.word	0xa1facade

08005a68 <ai_platform_bind_network_params>:
 8005a68:	2a00      	cmp	r2, #0
 8005a6a:	bf18      	it	ne
 8005a6c:	2900      	cmpne	r1, #0
 8005a6e:	d010      	beq.n	8005a92 <ai_platform_bind_network_params+0x2a>
 8005a70:	b178      	cbz	r0, 8005a92 <ai_platform_bind_network_params+0x2a>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4808      	ldr	r0, [pc, #32]	; (8005a98 <ai_platform_bind_network_params+0x30>)
 8005a76:	f103 0c0c 	add.w	ip, r3, #12
 8005a7a:	f843 0b04 	str.w	r0, [r3], #4
 8005a7e:	c903      	ldmia	r1, {r0, r1}
 8005a80:	e883 0003 	stmia.w	r3, {r0, r1}
 8005a84:	2301      	movs	r3, #1
 8005a86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005a8a:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	4770      	bx	lr
 8005a92:	2300      	movs	r3, #0
 8005a94:	4618      	mov	r0, r3
 8005a96:	4770      	bx	lr
 8005a98:	a1facade 	.word	0xa1facade

08005a9c <ai_platform_network_get_error>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	d03f      	beq.n	8005b22 <ai_platform_network_get_error+0x86>
 8005aa2:	4b7d      	ldr	r3, [pc, #500]	; (8005c98 <ai_platform_network_get_error+0x1fc>)
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	6802      	ldr	r2, [r0, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d13a      	bne.n	8005b22 <ai_platform_network_get_error+0x86>
 8005aac:	f7ff ff28 	bl	8005900 <_ai_platform_acquire_crc>
 8005ab0:	4b7a      	ldr	r3, [pc, #488]	; (8005c9c <ai_platform_network_get_error+0x200>)
 8005ab2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005abc:	189a      	adds	r2, r3, r2
 8005abe:	2a01      	cmp	r2, #1
 8005ac0:	f240 8086 	bls.w	8005bd0 <ai_platform_network_get_error+0x134>
 8005ac4:	f240 4249 	movw	r2, #1097	; 0x449
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	f000 8081 	beq.w	8005bd0 <ai_platform_network_get_error+0x134>
 8005ace:	4a74      	ldr	r2, [pc, #464]	; (8005ca0 <ai_platform_network_get_error+0x204>)
 8005ad0:	6813      	ldr	r3, [r2, #0]
 8005ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ad6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005ada:	f000 8087 	beq.w	8005bec <ai_platform_network_get_error+0x150>
 8005ade:	6813      	ldr	r3, [r2, #0]
 8005ae0:	f240 4183 	movw	r1, #1155	; 0x483
 8005ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ae8:	428b      	cmp	r3, r1
 8005aea:	f000 80a9 	beq.w	8005c40 <ai_platform_network_get_error+0x1a4>
 8005aee:	6813      	ldr	r3, [r2, #0]
 8005af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005af4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005af8:	f000 80c0 	beq.w	8005c7c <ai_platform_network_get_error+0x1e0>
 8005afc:	6813      	ldr	r3, [r2, #0]
 8005afe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	f040 8082 	bne.w	8005c0c <ai_platform_network_get_error+0x170>
 8005b08:	4a66      	ldr	r2, [pc, #408]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	6093      	str	r3, [r2, #8]
 8005b0e:	6893      	ldr	r3, [r2, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1fc      	bne.n	8005b0e <ai_platform_network_get_error+0x72>
 8005b14:	4964      	ldr	r1, [pc, #400]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005b16:	4b65      	ldr	r3, [pc, #404]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d075      	beq.n	8005c0c <ai_platform_network_get_error+0x170>
 8005b20:	e7fe      	b.n	8005b20 <ai_platform_network_get_error+0x84>
 8005b22:	f7ff feed 	bl	8005900 <_ai_platform_acquire_crc>
 8005b26:	4b5d      	ldr	r3, [pc, #372]	; (8005c9c <ai_platform_network_get_error+0x200>)
 8005b28:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b32:	185a      	adds	r2, r3, r1
 8005b34:	2a01      	cmp	r2, #1
 8005b36:	d929      	bls.n	8005b8c <ai_platform_network_get_error+0xf0>
 8005b38:	f240 4249 	movw	r2, #1097	; 0x449
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d025      	beq.n	8005b8c <ai_platform_network_get_error+0xf0>
 8005b40:	4a57      	ldr	r2, [pc, #348]	; (8005ca0 <ai_platform_network_get_error+0x204>)
 8005b42:	6813      	ldr	r3, [r2, #0]
 8005b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b48:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005b4c:	d02b      	beq.n	8005ba6 <ai_platform_network_get_error+0x10a>
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	f240 4183 	movw	r1, #1155	; 0x483
 8005b54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b58:	428b      	cmp	r3, r1
 8005b5a:	d060      	beq.n	8005c1e <ai_platform_network_get_error+0x182>
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b62:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005b66:	d07c      	beq.n	8005c62 <ai_platform_network_get_error+0x1c6>
 8005b68:	6813      	ldr	r3, [r2, #0]
 8005b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d129      	bne.n	8005bc6 <ai_platform_network_get_error+0x12a>
 8005b72:	4a4c      	ldr	r2, [pc, #304]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005b74:	2301      	movs	r3, #1
 8005b76:	6093      	str	r3, [r2, #8]
 8005b78:	6893      	ldr	r3, [r2, #8]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1fc      	bne.n	8005b78 <ai_platform_network_get_error+0xdc>
 8005b7e:	494a      	ldr	r1, [pc, #296]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005b80:	4b4a      	ldr	r3, [pc, #296]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005b82:	6011      	str	r1, [r2, #0]
 8005b84:	6812      	ldr	r2, [r2, #0]
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d01d      	beq.n	8005bc6 <ai_platform_network_get_error+0x12a>
 8005b8a:	e7fe      	b.n	8005b8a <ai_platform_network_get_error+0xee>
 8005b8c:	4a45      	ldr	r2, [pc, #276]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005b8e:	2301      	movs	r3, #1
 8005b90:	6093      	str	r3, [r2, #8]
 8005b92:	6893      	ldr	r3, [r2, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1fc      	bne.n	8005b92 <ai_platform_network_get_error+0xf6>
 8005b98:	4943      	ldr	r1, [pc, #268]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005b9a:	4b44      	ldr	r3, [pc, #272]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005b9c:	6011      	str	r1, [r2, #0]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d010      	beq.n	8005bc6 <ai_platform_network_get_error+0x12a>
 8005ba4:	e7fe      	b.n	8005ba4 <ai_platform_network_get_error+0x108>
 8005ba6:	4a42      	ldr	r2, [pc, #264]	; (8005cb0 <ai_platform_network_get_error+0x214>)
 8005ba8:	2301      	movs	r3, #1
 8005baa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d1fb      	bne.n	8005bae <ai_platform_network_get_error+0x112>
 8005bb6:	493c      	ldr	r1, [pc, #240]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005bb8:	4b3c      	ldr	r3, [pc, #240]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005bba:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005bbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d111      	bne.n	8005bea <ai_platform_network_get_error+0x14e>
 8005bc6:	f7ff fe9d 	bl	8005904 <_ai_platform_release_crc>
 8005bca:	f241 0010 	movw	r0, #4112	; 0x1010
 8005bce:	bd10      	pop	{r4, pc}
 8005bd0:	4a34      	ldr	r2, [pc, #208]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	6093      	str	r3, [r2, #8]
 8005bd6:	6893      	ldr	r3, [r2, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1fc      	bne.n	8005bd6 <ai_platform_network_get_error+0x13a>
 8005bdc:	4932      	ldr	r1, [pc, #200]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005bde:	4b33      	ldr	r3, [pc, #204]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005be0:	6011      	str	r1, [r2, #0]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d011      	beq.n	8005c0c <ai_platform_network_get_error+0x170>
 8005be8:	e7fe      	b.n	8005be8 <ai_platform_network_get_error+0x14c>
 8005bea:	e7fe      	b.n	8005bea <ai_platform_network_get_error+0x14e>
 8005bec:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <ai_platform_network_get_error+0x214>)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bf4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1fb      	bne.n	8005bf4 <ai_platform_network_get_error+0x158>
 8005bfc:	492a      	ldr	r1, [pc, #168]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005c00:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d107      	bne.n	8005c1c <ai_platform_network_get_error+0x180>
 8005c0c:	f7ff fe7a 	bl	8005904 <_ai_platform_release_crc>
 8005c10:	f104 0010 	add.w	r0, r4, #16
 8005c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c18:	f001 bae6 	b.w	80071e8 <core_get_error>
 8005c1c:	e7fe      	b.n	8005c1c <ai_platform_network_get_error+0x180>
 8005c1e:	4a24      	ldr	r2, [pc, #144]	; (8005cb0 <ai_platform_network_get_error+0x214>)
 8005c20:	2301      	movs	r3, #1
 8005c22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1fb      	bne.n	8005c26 <ai_platform_network_get_error+0x18a>
 8005c2e:	491e      	ldr	r1, [pc, #120]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005c30:	4b1e      	ldr	r3, [pc, #120]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005c32:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c36:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d0c3      	beq.n	8005bc6 <ai_platform_network_get_error+0x12a>
 8005c3e:	e7fe      	b.n	8005c3e <ai_platform_network_get_error+0x1a2>
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <ai_platform_network_get_error+0x214>)
 8005c42:	2301      	movs	r3, #1
 8005c44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1fb      	bne.n	8005c48 <ai_platform_network_get_error+0x1ac>
 8005c50:	4915      	ldr	r1, [pc, #84]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005c52:	4b16      	ldr	r3, [pc, #88]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005c54:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c58:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d0d5      	beq.n	8005c0c <ai_platform_network_get_error+0x170>
 8005c60:	e7fe      	b.n	8005c60 <ai_platform_network_get_error+0x1c4>
 8005c62:	4a10      	ldr	r2, [pc, #64]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005c64:	2301      	movs	r3, #1
 8005c66:	6093      	str	r3, [r2, #8]
 8005c68:	6893      	ldr	r3, [r2, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1fc      	bne.n	8005c68 <ai_platform_network_get_error+0x1cc>
 8005c6e:	490e      	ldr	r1, [pc, #56]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005c70:	4b0e      	ldr	r3, [pc, #56]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005c72:	6011      	str	r1, [r2, #0]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d0a5      	beq.n	8005bc6 <ai_platform_network_get_error+0x12a>
 8005c7a:	e7fe      	b.n	8005c7a <ai_platform_network_get_error+0x1de>
 8005c7c:	4a09      	ldr	r2, [pc, #36]	; (8005ca4 <ai_platform_network_get_error+0x208>)
 8005c7e:	2301      	movs	r3, #1
 8005c80:	6093      	str	r3, [r2, #8]
 8005c82:	6893      	ldr	r3, [r2, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1fc      	bne.n	8005c82 <ai_platform_network_get_error+0x1e6>
 8005c88:	4907      	ldr	r1, [pc, #28]	; (8005ca8 <ai_platform_network_get_error+0x20c>)
 8005c8a:	4b08      	ldr	r3, [pc, #32]	; (8005cac <ai_platform_network_get_error+0x210>)
 8005c8c:	6011      	str	r1, [r2, #0]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d0bb      	beq.n	8005c0c <ai_platform_network_get_error+0x170>
 8005c94:	e7fe      	b.n	8005c94 <ai_platform_network_get_error+0x1f8>
 8005c96:	bf00      	nop
 8005c98:	a1c00100 	.word	0xa1c00100
 8005c9c:	e0042000 	.word	0xe0042000
 8005ca0:	5c001000 	.word	0x5c001000
 8005ca4:	40023000 	.word	0x40023000
 8005ca8:	f407a5c2 	.word	0xf407a5c2
 8005cac:	b5e8b5cd 	.word	0xb5e8b5cd
 8005cb0:	58024000 	.word	0x58024000

08005cb4 <ai_platform_network_set_error>:
 8005cb4:	b110      	cbz	r0, 8005cbc <ai_platform_network_set_error+0x8>
 8005cb6:	3010      	adds	r0, #16
 8005cb8:	f001 ba9c 	b.w	80071f4 <core_set_error>
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop

08005cc0 <ai_platform_inputs_get>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	b085      	sub	sp, #20
 8005cc6:	9102      	str	r1, [sp, #8]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f000 8093 	beq.w	8005df4 <ai_platform_inputs_get+0x134>
 8005cce:	4baa      	ldr	r3, [pc, #680]	; (8005f78 <ai_platform_inputs_get+0x2b8>)
 8005cd0:	4681      	mov	r9, r0
 8005cd2:	6802      	ldr	r2, [r0, #0]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	f040 808d 	bne.w	8005df4 <ai_platform_inputs_get+0x134>
 8005cda:	f7ff fe11 	bl	8005900 <_ai_platform_acquire_crc>
 8005cde:	4ba7      	ldr	r3, [pc, #668]	; (8005f7c <ai_platform_inputs_get+0x2bc>)
 8005ce0:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cea:	189a      	adds	r2, r3, r2
 8005cec:	2a01      	cmp	r2, #1
 8005cee:	f240 80da 	bls.w	8005ea6 <ai_platform_inputs_get+0x1e6>
 8005cf2:	f240 4249 	movw	r2, #1097	; 0x449
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f000 80d5 	beq.w	8005ea6 <ai_platform_inputs_get+0x1e6>
 8005cfc:	4aa0      	ldr	r2, [pc, #640]	; (8005f80 <ai_platform_inputs_get+0x2c0>)
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d04:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005d08:	f000 80dc 	beq.w	8005ec4 <ai_platform_inputs_get+0x204>
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	f240 4183 	movw	r1, #1155	; 0x483
 8005d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d16:	428b      	cmp	r3, r1
 8005d18:	f000 810e 	beq.w	8005f38 <ai_platform_inputs_get+0x278>
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d22:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005d26:	f000 8143 	beq.w	8005fb0 <ai_platform_inputs_get+0x2f0>
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	f000 8113 	beq.w	8005f5c <ai_platform_inputs_get+0x29c>
 8005d36:	f7ff fde5 	bl	8005904 <_ai_platform_release_crc>
 8005d3a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80d2 	beq.w	8005ee8 <ai_platform_inputs_get+0x228>
 8005d44:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005d48:	f1ba 0f00 	cmp.w	sl, #0
 8005d4c:	f000 80cc 	beq.w	8005ee8 <ai_platform_inputs_get+0x228>
 8005d50:	2100      	movs	r1, #0
 8005d52:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d56:	460d      	mov	r5, r1
 8005d58:	4689      	mov	r9, r1
 8005d5a:	e016      	b.n	8005d8a <ai_platform_inputs_get+0xca>
 8005d5c:	9a01      	ldr	r2, [sp, #4]
 8005d5e:	2301      	movs	r3, #1
 8005d60:	f848 3002 	str.w	r3, [r8, r2]
 8005d64:	69b2      	ldr	r2, [r6, #24]
 8005d66:	f04f 0301 	mov.w	r3, #1
 8005d6a:	6856      	ldr	r6, [r2, #4]
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	f109 091c 	add.w	r9, r9, #28
 8005d72:	7523      	strb	r3, [r4, #20]
 8005d74:	2300      	movs	r3, #0
 8005d76:	6962      	ldr	r2, [r4, #20]
 8005d78:	60a7      	str	r7, [r4, #8]
 8005d7a:	f36b 221f 	bfi	r2, fp, #8, #24
 8005d7e:	6126      	str	r6, [r4, #16]
 8005d80:	61a1      	str	r1, [r4, #24]
 8005d82:	60e3      	str	r3, [r4, #12]
 8005d84:	6162      	str	r2, [r4, #20]
 8005d86:	e9c4 0c00 	strd	r0, ip, [r4]
 8005d8a:	f8ba 3000 	ldrh.w	r3, [sl]
 8005d8e:	b2ac      	uxth	r4, r5
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	f240 80b5 	bls.w	8005f06 <ai_platform_inputs_get+0x246>
 8005d9c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f000 80b0 	beq.w	8005f06 <ai_platform_inputs_get+0x246>
 8005da6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005daa:	2e00      	cmp	r6, #0
 8005dac:	f000 80ab 	beq.w	8005f06 <ai_platform_inputs_get+0x246>
 8005db0:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005db4:	69b2      	ldr	r2, [r6, #24]
 8005db6:	68f1      	ldr	r1, [r6, #12]
 8005db8:	6810      	ldr	r0, [r2, #0]
 8005dba:	9100      	str	r1, [sp, #0]
 8005dbc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8005dc0:	68b3      	ldr	r3, [r6, #8]
 8005dc2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8005dc6:	444c      	add	r4, r9
 8005dc8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005dcc:	f002 f9d2 	bl	8008174 <ai_array_to_buffer_fmt>
 8005dd0:	69b2      	ldr	r2, [r6, #24]
 8005dd2:	9900      	ldr	r1, [sp, #0]
 8005dd4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005dd8:	2f00      	cmp	r7, #0
 8005dda:	d0c4      	beq.n	8005d66 <ai_platform_inputs_get+0xa6>
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8005de2:	6832      	ldr	r2, [r6, #0]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	b112      	cbz	r2, 8005dee <ai_platform_inputs_get+0x12e>
 8005de8:	8852      	ldrh	r2, [r2, #2]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	d1b6      	bne.n	8005d5c <ai_platform_inputs_get+0x9c>
 8005dee:	69b2      	ldr	r2, [r6, #24]
 8005df0:	2700      	movs	r7, #0
 8005df2:	e7b8      	b.n	8005d66 <ai_platform_inputs_get+0xa6>
 8005df4:	f7ff fd84 	bl	8005900 <_ai_platform_acquire_crc>
 8005df8:	4b60      	ldr	r3, [pc, #384]	; (8005f7c <ai_platform_inputs_get+0x2bc>)
 8005dfa:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e04:	185a      	adds	r2, r3, r1
 8005e06:	2a01      	cmp	r2, #1
 8005e08:	d92a      	bls.n	8005e60 <ai_platform_inputs_get+0x1a0>
 8005e0a:	f240 4249 	movw	r2, #1097	; 0x449
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d026      	beq.n	8005e60 <ai_platform_inputs_get+0x1a0>
 8005e12:	4a5b      	ldr	r2, [pc, #364]	; (8005f80 <ai_platform_inputs_get+0x2c0>)
 8005e14:	6813      	ldr	r3, [r2, #0]
 8005e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005e1e:	d02c      	beq.n	8005e7a <ai_platform_inputs_get+0x1ba>
 8005e20:	6813      	ldr	r3, [r2, #0]
 8005e22:	f240 4183 	movw	r1, #1155	; 0x483
 8005e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	d073      	beq.n	8005f16 <ai_platform_inputs_get+0x256>
 8005e2e:	6813      	ldr	r3, [r2, #0]
 8005e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e34:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005e38:	f000 80ac 	beq.w	8005f94 <ai_platform_inputs_get+0x2d4>
 8005e3c:	6813      	ldr	r3, [r2, #0]
 8005e3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d129      	bne.n	8005e9a <ai_platform_inputs_get+0x1da>
 8005e46:	4a4f      	ldr	r2, [pc, #316]	; (8005f84 <ai_platform_inputs_get+0x2c4>)
 8005e48:	2301      	movs	r3, #1
 8005e4a:	6093      	str	r3, [r2, #8]
 8005e4c:	6893      	ldr	r3, [r2, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d1fc      	bne.n	8005e4c <ai_platform_inputs_get+0x18c>
 8005e52:	494d      	ldr	r1, [pc, #308]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005e54:	4b4d      	ldr	r3, [pc, #308]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005e56:	6011      	str	r1, [r2, #0]
 8005e58:	6812      	ldr	r2, [r2, #0]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d01d      	beq.n	8005e9a <ai_platform_inputs_get+0x1da>
 8005e5e:	e7fe      	b.n	8005e5e <ai_platform_inputs_get+0x19e>
 8005e60:	4a48      	ldr	r2, [pc, #288]	; (8005f84 <ai_platform_inputs_get+0x2c4>)
 8005e62:	2301      	movs	r3, #1
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	6893      	ldr	r3, [r2, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1fc      	bne.n	8005e66 <ai_platform_inputs_get+0x1a6>
 8005e6c:	4946      	ldr	r1, [pc, #280]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005e6e:	4b47      	ldr	r3, [pc, #284]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d010      	beq.n	8005e9a <ai_platform_inputs_get+0x1da>
 8005e78:	e7fe      	b.n	8005e78 <ai_platform_inputs_get+0x1b8>
 8005e7a:	4a45      	ldr	r2, [pc, #276]	; (8005f90 <ai_platform_inputs_get+0x2d0>)
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1fb      	bne.n	8005e82 <ai_platform_inputs_get+0x1c2>
 8005e8a:	493f      	ldr	r1, [pc, #252]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005e8c:	4b3f      	ldr	r3, [pc, #252]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005e8e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005e92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d113      	bne.n	8005ec2 <ai_platform_inputs_get+0x202>
 8005e9a:	f7ff fd33 	bl	8005904 <_ai_platform_release_crc>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	b005      	add	sp, #20
 8005ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	4a37      	ldr	r2, [pc, #220]	; (8005f84 <ai_platform_inputs_get+0x2c4>)
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	6093      	str	r3, [r2, #8]
 8005eac:	6893      	ldr	r3, [r2, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1fc      	bne.n	8005eac <ai_platform_inputs_get+0x1ec>
 8005eb2:	4b35      	ldr	r3, [pc, #212]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	f43f af3b 	beq.w	8005d36 <ai_platform_inputs_get+0x76>
 8005ec0:	e7fe      	b.n	8005ec0 <ai_platform_inputs_get+0x200>
 8005ec2:	e7fe      	b.n	8005ec2 <ai_platform_inputs_get+0x202>
 8005ec4:	4a32      	ldr	r2, [pc, #200]	; (8005f90 <ai_platform_inputs_get+0x2d0>)
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ecc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1fb      	bne.n	8005ecc <ai_platform_inputs_get+0x20c>
 8005ed4:	4b2c      	ldr	r3, [pc, #176]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005ed6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005eda:	4b2c      	ldr	r3, [pc, #176]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005edc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	f43f af28 	beq.w	8005d36 <ai_platform_inputs_get+0x76>
 8005ee6:	e7fe      	b.n	8005ee6 <ai_platform_inputs_get+0x226>
 8005ee8:	2400      	movs	r4, #0
 8005eea:	2218      	movs	r2, #24
 8005eec:	2111      	movs	r1, #17
 8005eee:	f109 0010 	add.w	r0, r9, #16
 8005ef2:	f001 f97f 	bl	80071f4 <core_set_error>
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	9b02      	ldr	r3, [sp, #8]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0d0      	beq.n	8005ea0 <ai_platform_inputs_get+0x1e0>
 8005efe:	801c      	strh	r4, [r3, #0]
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	d0ec      	beq.n	8005ee8 <ai_platform_inputs_get+0x228>
 8005f0e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f12:	6858      	ldr	r0, [r3, #4]
 8005f14:	e7f0      	b.n	8005ef8 <ai_platform_inputs_get+0x238>
 8005f16:	4a1e      	ldr	r2, [pc, #120]	; (8005f90 <ai_platform_inputs_get+0x2d0>)
 8005f18:	2301      	movs	r3, #1
 8005f1a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f1e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1fb      	bne.n	8005f1e <ai_platform_inputs_get+0x25e>
 8005f26:	4918      	ldr	r1, [pc, #96]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005f28:	4b18      	ldr	r3, [pc, #96]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005f2a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005f2e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d0b1      	beq.n	8005e9a <ai_platform_inputs_get+0x1da>
 8005f36:	e7fe      	b.n	8005f36 <ai_platform_inputs_get+0x276>
 8005f38:	4a15      	ldr	r2, [pc, #84]	; (8005f90 <ai_platform_inputs_get+0x2d0>)
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f40:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1fb      	bne.n	8005f40 <ai_platform_inputs_get+0x280>
 8005f48:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005f4a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f4e:	4b0f      	ldr	r3, [pc, #60]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005f50:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f54:	429a      	cmp	r2, r3
 8005f56:	f43f aeee 	beq.w	8005d36 <ai_platform_inputs_get+0x76>
 8005f5a:	e7fe      	b.n	8005f5a <ai_platform_inputs_get+0x29a>
 8005f5c:	4a09      	ldr	r2, [pc, #36]	; (8005f84 <ai_platform_inputs_get+0x2c4>)
 8005f5e:	2301      	movs	r3, #1
 8005f60:	6093      	str	r3, [r2, #8]
 8005f62:	6893      	ldr	r3, [r2, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d1fc      	bne.n	8005f62 <ai_platform_inputs_get+0x2a2>
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <ai_platform_inputs_get+0x2c8>)
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <ai_platform_inputs_get+0x2cc>)
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	f43f aee0 	beq.w	8005d36 <ai_platform_inputs_get+0x76>
 8005f76:	e7fe      	b.n	8005f76 <ai_platform_inputs_get+0x2b6>
 8005f78:	a1c00100 	.word	0xa1c00100
 8005f7c:	e0042000 	.word	0xe0042000
 8005f80:	5c001000 	.word	0x5c001000
 8005f84:	40023000 	.word	0x40023000
 8005f88:	f407a5c2 	.word	0xf407a5c2
 8005f8c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005f90:	58024000 	.word	0x58024000
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <ai_platform_inputs_get+0x30c>)
 8005f96:	2301      	movs	r3, #1
 8005f98:	6093      	str	r3, [r2, #8]
 8005f9a:	6893      	ldr	r3, [r2, #8]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d1fc      	bne.n	8005f9a <ai_platform_inputs_get+0x2da>
 8005fa0:	490b      	ldr	r1, [pc, #44]	; (8005fd0 <ai_platform_inputs_get+0x310>)
 8005fa2:	4b0c      	ldr	r3, [pc, #48]	; (8005fd4 <ai_platform_inputs_get+0x314>)
 8005fa4:	6011      	str	r1, [r2, #0]
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	f43f af76 	beq.w	8005e9a <ai_platform_inputs_get+0x1da>
 8005fae:	e7fe      	b.n	8005fae <ai_platform_inputs_get+0x2ee>
 8005fb0:	4a06      	ldr	r2, [pc, #24]	; (8005fcc <ai_platform_inputs_get+0x30c>)
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	6093      	str	r3, [r2, #8]
 8005fb6:	6893      	ldr	r3, [r2, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1fc      	bne.n	8005fb6 <ai_platform_inputs_get+0x2f6>
 8005fbc:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <ai_platform_inputs_get+0x310>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	4b04      	ldr	r3, [pc, #16]	; (8005fd4 <ai_platform_inputs_get+0x314>)
 8005fc2:	6812      	ldr	r2, [r2, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f43f aeb6 	beq.w	8005d36 <ai_platform_inputs_get+0x76>
 8005fca:	e7fe      	b.n	8005fca <ai_platform_inputs_get+0x30a>
 8005fcc:	40023000 	.word	0x40023000
 8005fd0:	f407a5c2 	.word	0xf407a5c2
 8005fd4:	b5e8b5cd 	.word	0xb5e8b5cd

08005fd8 <ai_platform_outputs_get>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	b085      	sub	sp, #20
 8005fde:	9102      	str	r1, [sp, #8]
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f000 808f 	beq.w	8006104 <ai_platform_outputs_get+0x12c>
 8005fe6:	4ba8      	ldr	r3, [pc, #672]	; (8006288 <ai_platform_outputs_get+0x2b0>)
 8005fe8:	4681      	mov	r9, r0
 8005fea:	6802      	ldr	r2, [r0, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	f040 8089 	bne.w	8006104 <ai_platform_outputs_get+0x12c>
 8005ff2:	f7ff fc85 	bl	8005900 <_ai_platform_acquire_crc>
 8005ff6:	4ba5      	ldr	r3, [pc, #660]	; (800628c <ai_platform_outputs_get+0x2b4>)
 8005ff8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006002:	189a      	adds	r2, r3, r2
 8006004:	2a01      	cmp	r2, #1
 8006006:	f240 80d6 	bls.w	80061b6 <ai_platform_outputs_get+0x1de>
 800600a:	f240 4249 	movw	r2, #1097	; 0x449
 800600e:	4293      	cmp	r3, r2
 8006010:	f000 80d1 	beq.w	80061b6 <ai_platform_outputs_get+0x1de>
 8006014:	4a9e      	ldr	r2, [pc, #632]	; (8006290 <ai_platform_outputs_get+0x2b8>)
 8006016:	6813      	ldr	r3, [r2, #0]
 8006018:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800601c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006020:	f000 80d8 	beq.w	80061d4 <ai_platform_outputs_get+0x1fc>
 8006024:	6813      	ldr	r3, [r2, #0]
 8006026:	f240 4183 	movw	r1, #1155	; 0x483
 800602a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800602e:	428b      	cmp	r3, r1
 8006030:	f000 8109 	beq.w	8006246 <ai_platform_outputs_get+0x26e>
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800603a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800603e:	f000 813f 	beq.w	80062c0 <ai_platform_outputs_get+0x2e8>
 8006042:	6813      	ldr	r3, [r2, #0]
 8006044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 810e 	beq.w	800626a <ai_platform_outputs_get+0x292>
 800604e:	f7ff fc59 	bl	8005904 <_ai_platform_release_crc>
 8006052:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8006056:	2b01      	cmp	r3, #1
 8006058:	f240 80db 	bls.w	8006212 <ai_platform_outputs_get+0x23a>
 800605c:	2100      	movs	r1, #0
 800605e:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8006062:	f8cd 900c 	str.w	r9, [sp, #12]
 8006066:	460d      	mov	r5, r1
 8006068:	4689      	mov	r9, r1
 800606a:	e016      	b.n	800609a <ai_platform_outputs_get+0xc2>
 800606c:	9a01      	ldr	r2, [sp, #4]
 800606e:	2301      	movs	r3, #1
 8006070:	f848 3002 	str.w	r3, [r8, r2]
 8006074:	69b2      	ldr	r2, [r6, #24]
 8006076:	f04f 0301 	mov.w	r3, #1
 800607a:	6856      	ldr	r6, [r2, #4]
 800607c:	3501      	adds	r5, #1
 800607e:	f109 091c 	add.w	r9, r9, #28
 8006082:	7523      	strb	r3, [r4, #20]
 8006084:	2300      	movs	r3, #0
 8006086:	6962      	ldr	r2, [r4, #20]
 8006088:	60a7      	str	r7, [r4, #8]
 800608a:	f36b 221f 	bfi	r2, fp, #8, #24
 800608e:	6126      	str	r6, [r4, #16]
 8006090:	61a1      	str	r1, [r4, #24]
 8006092:	60e3      	str	r3, [r4, #12]
 8006094:	6162      	str	r2, [r4, #20]
 8006096:	e9c4 0c00 	strd	r0, ip, [r4]
 800609a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800609e:	b2ac      	uxth	r4, r5
 80060a0:	42ab      	cmp	r3, r5
 80060a2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 80060a6:	9301      	str	r3, [sp, #4]
 80060a8:	f240 80a6 	bls.w	80061f8 <ai_platform_outputs_get+0x220>
 80060ac:	f8da 3010 	ldr.w	r3, [sl, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	f000 80a1 	beq.w	80061f8 <ai_platform_outputs_get+0x220>
 80060b6:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80060ba:	2e00      	cmp	r6, #0
 80060bc:	f000 809c 	beq.w	80061f8 <ai_platform_outputs_get+0x220>
 80060c0:	f8da 3014 	ldr.w	r3, [sl, #20]
 80060c4:	69b2      	ldr	r2, [r6, #24]
 80060c6:	68f1      	ldr	r1, [r6, #12]
 80060c8:	6810      	ldr	r0, [r2, #0]
 80060ca:	9100      	str	r1, [sp, #0]
 80060cc:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 80060d0:	68b3      	ldr	r3, [r6, #8]
 80060d2:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 80060d6:	444c      	add	r4, r9
 80060d8:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80060dc:	f002 f84a 	bl	8008174 <ai_array_to_buffer_fmt>
 80060e0:	69b2      	ldr	r2, [r6, #24]
 80060e2:	9900      	ldr	r1, [sp, #0]
 80060e4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80060e8:	2f00      	cmp	r7, #0
 80060ea:	d0c4      	beq.n	8006076 <ai_platform_outputs_get+0x9e>
 80060ec:	2200      	movs	r2, #0
 80060ee:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 80060f2:	6832      	ldr	r2, [r6, #0]
 80060f4:	607a      	str	r2, [r7, #4]
 80060f6:	b112      	cbz	r2, 80060fe <ai_platform_outputs_get+0x126>
 80060f8:	8852      	ldrh	r2, [r2, #2]
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	d1b6      	bne.n	800606c <ai_platform_outputs_get+0x94>
 80060fe:	69b2      	ldr	r2, [r6, #24]
 8006100:	2700      	movs	r7, #0
 8006102:	e7b8      	b.n	8006076 <ai_platform_outputs_get+0x9e>
 8006104:	f7ff fbfc 	bl	8005900 <_ai_platform_acquire_crc>
 8006108:	4b60      	ldr	r3, [pc, #384]	; (800628c <ai_platform_outputs_get+0x2b4>)
 800610a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006114:	185a      	adds	r2, r3, r1
 8006116:	2a01      	cmp	r2, #1
 8006118:	d92a      	bls.n	8006170 <ai_platform_outputs_get+0x198>
 800611a:	f240 4249 	movw	r2, #1097	; 0x449
 800611e:	4293      	cmp	r3, r2
 8006120:	d026      	beq.n	8006170 <ai_platform_outputs_get+0x198>
 8006122:	4a5b      	ldr	r2, [pc, #364]	; (8006290 <ai_platform_outputs_get+0x2b8>)
 8006124:	6813      	ldr	r3, [r2, #0]
 8006126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800612a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800612e:	d02c      	beq.n	800618a <ai_platform_outputs_get+0x1b2>
 8006130:	6813      	ldr	r3, [r2, #0]
 8006132:	f240 4183 	movw	r1, #1155	; 0x483
 8006136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800613a:	428b      	cmp	r3, r1
 800613c:	d072      	beq.n	8006224 <ai_platform_outputs_get+0x24c>
 800613e:	6813      	ldr	r3, [r2, #0]
 8006140:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006144:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006148:	f000 80ac 	beq.w	80062a4 <ai_platform_outputs_get+0x2cc>
 800614c:	6813      	ldr	r3, [r2, #0]
 800614e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006152:	2b00      	cmp	r3, #0
 8006154:	d129      	bne.n	80061aa <ai_platform_outputs_get+0x1d2>
 8006156:	4a4f      	ldr	r2, [pc, #316]	; (8006294 <ai_platform_outputs_get+0x2bc>)
 8006158:	2301      	movs	r3, #1
 800615a:	6093      	str	r3, [r2, #8]
 800615c:	6893      	ldr	r3, [r2, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1fc      	bne.n	800615c <ai_platform_outputs_get+0x184>
 8006162:	494d      	ldr	r1, [pc, #308]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 8006164:	4b4d      	ldr	r3, [pc, #308]	; (800629c <ai_platform_outputs_get+0x2c4>)
 8006166:	6011      	str	r1, [r2, #0]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d01d      	beq.n	80061aa <ai_platform_outputs_get+0x1d2>
 800616e:	e7fe      	b.n	800616e <ai_platform_outputs_get+0x196>
 8006170:	4a48      	ldr	r2, [pc, #288]	; (8006294 <ai_platform_outputs_get+0x2bc>)
 8006172:	2301      	movs	r3, #1
 8006174:	6093      	str	r3, [r2, #8]
 8006176:	6893      	ldr	r3, [r2, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1fc      	bne.n	8006176 <ai_platform_outputs_get+0x19e>
 800617c:	4946      	ldr	r1, [pc, #280]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 800617e:	4b47      	ldr	r3, [pc, #284]	; (800629c <ai_platform_outputs_get+0x2c4>)
 8006180:	6011      	str	r1, [r2, #0]
 8006182:	6812      	ldr	r2, [r2, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d010      	beq.n	80061aa <ai_platform_outputs_get+0x1d2>
 8006188:	e7fe      	b.n	8006188 <ai_platform_outputs_get+0x1b0>
 800618a:	4a45      	ldr	r2, [pc, #276]	; (80062a0 <ai_platform_outputs_get+0x2c8>)
 800618c:	2301      	movs	r3, #1
 800618e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006192:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006196:	2b00      	cmp	r3, #0
 8006198:	d1fb      	bne.n	8006192 <ai_platform_outputs_get+0x1ba>
 800619a:	493f      	ldr	r1, [pc, #252]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 800619c:	4b3f      	ldr	r3, [pc, #252]	; (800629c <ai_platform_outputs_get+0x2c4>)
 800619e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80061a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d113      	bne.n	80061d2 <ai_platform_outputs_get+0x1fa>
 80061aa:	f7ff fbab 	bl	8005904 <_ai_platform_release_crc>
 80061ae:	2000      	movs	r0, #0
 80061b0:	b005      	add	sp, #20
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	4a37      	ldr	r2, [pc, #220]	; (8006294 <ai_platform_outputs_get+0x2bc>)
 80061b8:	2301      	movs	r3, #1
 80061ba:	6093      	str	r3, [r2, #8]
 80061bc:	6893      	ldr	r3, [r2, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1fc      	bne.n	80061bc <ai_platform_outputs_get+0x1e4>
 80061c2:	4b35      	ldr	r3, [pc, #212]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 80061c4:	6013      	str	r3, [r2, #0]
 80061c6:	4b35      	ldr	r3, [pc, #212]	; (800629c <ai_platform_outputs_get+0x2c4>)
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	f43f af3f 	beq.w	800604e <ai_platform_outputs_get+0x76>
 80061d0:	e7fe      	b.n	80061d0 <ai_platform_outputs_get+0x1f8>
 80061d2:	e7fe      	b.n	80061d2 <ai_platform_outputs_get+0x1fa>
 80061d4:	4a32      	ldr	r2, [pc, #200]	; (80062a0 <ai_platform_outputs_get+0x2c8>)
 80061d6:	2301      	movs	r3, #1
 80061d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1fb      	bne.n	80061dc <ai_platform_outputs_get+0x204>
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 80061e6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80061ea:	4b2c      	ldr	r3, [pc, #176]	; (800629c <ai_platform_outputs_get+0x2c4>)
 80061ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80061f0:	429a      	cmp	r2, r3
 80061f2:	f43f af2c 	beq.w	800604e <ai_platform_outputs_get+0x76>
 80061f6:	e7fe      	b.n	80061f6 <ai_platform_outputs_get+0x21e>
 80061f8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80061fc:	b14c      	cbz	r4, 8006212 <ai_platform_outputs_get+0x23a>
 80061fe:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006202:	6858      	ldr	r0, [r3, #4]
 8006204:	9b02      	ldr	r3, [sp, #8]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d0d2      	beq.n	80061b0 <ai_platform_outputs_get+0x1d8>
 800620a:	801c      	strh	r4, [r3, #0]
 800620c:	b005      	add	sp, #20
 800620e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006212:	2400      	movs	r4, #0
 8006214:	2218      	movs	r2, #24
 8006216:	2111      	movs	r1, #17
 8006218:	f109 0010 	add.w	r0, r9, #16
 800621c:	f000 ffea 	bl	80071f4 <core_set_error>
 8006220:	4620      	mov	r0, r4
 8006222:	e7ef      	b.n	8006204 <ai_platform_outputs_get+0x22c>
 8006224:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <ai_platform_outputs_get+0x2c8>)
 8006226:	2301      	movs	r3, #1
 8006228:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800622c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1fb      	bne.n	800622c <ai_platform_outputs_get+0x254>
 8006234:	4918      	ldr	r1, [pc, #96]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 8006236:	4b19      	ldr	r3, [pc, #100]	; (800629c <ai_platform_outputs_get+0x2c4>)
 8006238:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800623c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006240:	429a      	cmp	r2, r3
 8006242:	d0b2      	beq.n	80061aa <ai_platform_outputs_get+0x1d2>
 8006244:	e7fe      	b.n	8006244 <ai_platform_outputs_get+0x26c>
 8006246:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <ai_platform_outputs_get+0x2c8>)
 8006248:	2301      	movs	r3, #1
 800624a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800624e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1fb      	bne.n	800624e <ai_platform_outputs_get+0x276>
 8006256:	4b10      	ldr	r3, [pc, #64]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 8006258:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800625c:	4b0f      	ldr	r3, [pc, #60]	; (800629c <ai_platform_outputs_get+0x2c4>)
 800625e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006262:	429a      	cmp	r2, r3
 8006264:	f43f aef3 	beq.w	800604e <ai_platform_outputs_get+0x76>
 8006268:	e7fe      	b.n	8006268 <ai_platform_outputs_get+0x290>
 800626a:	4a0a      	ldr	r2, [pc, #40]	; (8006294 <ai_platform_outputs_get+0x2bc>)
 800626c:	2301      	movs	r3, #1
 800626e:	6093      	str	r3, [r2, #8]
 8006270:	6893      	ldr	r3, [r2, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1fc      	bne.n	8006270 <ai_platform_outputs_get+0x298>
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <ai_platform_outputs_get+0x2c0>)
 8006278:	6013      	str	r3, [r2, #0]
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <ai_platform_outputs_get+0x2c4>)
 800627c:	6812      	ldr	r2, [r2, #0]
 800627e:	429a      	cmp	r2, r3
 8006280:	f43f aee5 	beq.w	800604e <ai_platform_outputs_get+0x76>
 8006284:	e7fe      	b.n	8006284 <ai_platform_outputs_get+0x2ac>
 8006286:	bf00      	nop
 8006288:	a1c00100 	.word	0xa1c00100
 800628c:	e0042000 	.word	0xe0042000
 8006290:	5c001000 	.word	0x5c001000
 8006294:	40023000 	.word	0x40023000
 8006298:	f407a5c2 	.word	0xf407a5c2
 800629c:	b5e8b5cd 	.word	0xb5e8b5cd
 80062a0:	58024000 	.word	0x58024000
 80062a4:	4a0d      	ldr	r2, [pc, #52]	; (80062dc <ai_platform_outputs_get+0x304>)
 80062a6:	2301      	movs	r3, #1
 80062a8:	6093      	str	r3, [r2, #8]
 80062aa:	6893      	ldr	r3, [r2, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1fc      	bne.n	80062aa <ai_platform_outputs_get+0x2d2>
 80062b0:	490b      	ldr	r1, [pc, #44]	; (80062e0 <ai_platform_outputs_get+0x308>)
 80062b2:	4b0c      	ldr	r3, [pc, #48]	; (80062e4 <ai_platform_outputs_get+0x30c>)
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	f43f af76 	beq.w	80061aa <ai_platform_outputs_get+0x1d2>
 80062be:	e7fe      	b.n	80062be <ai_platform_outputs_get+0x2e6>
 80062c0:	4a06      	ldr	r2, [pc, #24]	; (80062dc <ai_platform_outputs_get+0x304>)
 80062c2:	2301      	movs	r3, #1
 80062c4:	6093      	str	r3, [r2, #8]
 80062c6:	6893      	ldr	r3, [r2, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1fc      	bne.n	80062c6 <ai_platform_outputs_get+0x2ee>
 80062cc:	4b04      	ldr	r3, [pc, #16]	; (80062e0 <ai_platform_outputs_get+0x308>)
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <ai_platform_outputs_get+0x30c>)
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	f43f aeba 	beq.w	800604e <ai_platform_outputs_get+0x76>
 80062da:	e7fe      	b.n	80062da <ai_platform_outputs_get+0x302>
 80062dc:	40023000 	.word	0x40023000
 80062e0:	f407a5c2 	.word	0xf407a5c2
 80062e4:	b5e8b5cd 	.word	0xb5e8b5cd

080062e8 <ai_platform_network_create>:
 80062e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062ec:	b083      	sub	sp, #12
 80062ee:	4604      	mov	r4, r0
 80062f0:	4615      	mov	r5, r2
 80062f2:	461e      	mov	r6, r3
 80062f4:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80062f8:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 80062fc:	f7ff fb00 	bl	8005900 <_ai_platform_acquire_crc>
 8006300:	2800      	cmp	r0, #0
 8006302:	f000 80bd 	beq.w	8006480 <ai_platform_network_create+0x198>
 8006306:	4ba5      	ldr	r3, [pc, #660]	; (800659c <ai_platform_network_create+0x2b4>)
 8006308:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800630c:	4601      	mov	r1, r0
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006314:	eb03 020c 	add.w	r2, r3, ip
 8006318:	2a01      	cmp	r2, #1
 800631a:	f240 80a8 	bls.w	800646e <ai_platform_network_create+0x186>
 800631e:	f240 4249 	movw	r2, #1097	; 0x449
 8006322:	4293      	cmp	r3, r2
 8006324:	f000 80a3 	beq.w	800646e <ai_platform_network_create+0x186>
 8006328:	4a9d      	ldr	r2, [pc, #628]	; (80065a0 <ai_platform_network_create+0x2b8>)
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006330:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006334:	f000 80b9 	beq.w	80064aa <ai_platform_network_create+0x1c2>
 8006338:	6813      	ldr	r3, [r2, #0]
 800633a:	f240 4c83 	movw	ip, #1155	; 0x483
 800633e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006342:	4563      	cmp	r3, ip
 8006344:	f000 80a1 	beq.w	800648a <ai_platform_network_create+0x1a2>
 8006348:	6813      	ldr	r3, [r2, #0]
 800634a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800634e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006352:	f000 8153 	beq.w	80065fc <ai_platform_network_create+0x314>
 8006356:	6813      	ldr	r3, [r2, #0]
 8006358:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800635c:	2b00      	cmp	r3, #0
 800635e:	f040 808d 	bne.w	800647c <ai_platform_network_create+0x194>
 8006362:	4a90      	ldr	r2, [pc, #576]	; (80065a4 <ai_platform_network_create+0x2bc>)
 8006364:	2318      	movs	r3, #24
 8006366:	6093      	str	r3, [r2, #8]
 8006368:	6893      	ldr	r3, [r2, #8]
 800636a:	2b18      	cmp	r3, #24
 800636c:	f040 8086 	bne.w	800647c <ai_platform_network_create+0x194>
 8006370:	2301      	movs	r3, #1
 8006372:	6093      	str	r3, [r2, #8]
 8006374:	6893      	ldr	r3, [r2, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1fc      	bne.n	8006374 <ai_platform_network_create+0x8c>
 800637a:	4608      	mov	r0, r1
 800637c:	f7ff fac2 	bl	8005904 <_ai_platform_release_crc>
 8006380:	f7ff fabe 	bl	8005900 <_ai_platform_acquire_crc>
 8006384:	4b85      	ldr	r3, [pc, #532]	; (800659c <ai_platform_network_create+0x2b4>)
 8006386:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006390:	189a      	adds	r2, r3, r2
 8006392:	2a01      	cmp	r2, #1
 8006394:	f240 809f 	bls.w	80064d6 <ai_platform_network_create+0x1ee>
 8006398:	f240 4249 	movw	r2, #1097	; 0x449
 800639c:	4293      	cmp	r3, r2
 800639e:	f000 809a 	beq.w	80064d6 <ai_platform_network_create+0x1ee>
 80063a2:	4a7f      	ldr	r2, [pc, #508]	; (80065a0 <ai_platform_network_create+0x2b8>)
 80063a4:	6813      	ldr	r3, [r2, #0]
 80063a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80063ae:	f000 80a0 	beq.w	80064f2 <ai_platform_network_create+0x20a>
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	f240 4183 	movw	r1, #1155	; 0x483
 80063b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063bc:	428b      	cmp	r3, r1
 80063be:	f000 80bf 	beq.w	8006540 <ai_platform_network_create+0x258>
 80063c2:	6813      	ldr	r3, [r2, #0]
 80063c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063c8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80063cc:	f000 8123 	beq.w	8006616 <ai_platform_network_create+0x32e>
 80063d0:	6813      	ldr	r3, [r2, #0]
 80063d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 80c4 	beq.w	8006564 <ai_platform_network_create+0x27c>
 80063dc:	f7ff fa92 	bl	8005904 <_ai_platform_release_crc>
 80063e0:	2c00      	cmp	r4, #0
 80063e2:	f000 80aa 	beq.w	800653a <ai_platform_network_create+0x252>
 80063e6:	4b70      	ldr	r3, [pc, #448]	; (80065a8 <ai_platform_network_create+0x2c0>)
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	6025      	str	r5, [r4, #0]
 80063ec:	f000 fefa 	bl	80071e4 <core_init>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f000 8090 	beq.w	8006516 <ai_platform_network_create+0x22e>
 80063f6:	f7ff fa83 	bl	8005900 <_ai_platform_acquire_crc>
 80063fa:	4b68      	ldr	r3, [pc, #416]	; (800659c <ai_platform_network_create+0x2b4>)
 80063fc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006406:	185a      	adds	r2, r3, r1
 8006408:	2a01      	cmp	r2, #1
 800640a:	f240 80b9 	bls.w	8006580 <ai_platform_network_create+0x298>
 800640e:	f240 4249 	movw	r2, #1097	; 0x449
 8006412:	4293      	cmp	r3, r2
 8006414:	f000 80b4 	beq.w	8006580 <ai_platform_network_create+0x298>
 8006418:	4a61      	ldr	r2, [pc, #388]	; (80065a0 <ai_platform_network_create+0x2b8>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006420:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006424:	f000 80c8 	beq.w	80065b8 <ai_platform_network_create+0x2d0>
 8006428:	6813      	ldr	r3, [r2, #0]
 800642a:	f240 4183 	movw	r1, #1155	; 0x483
 800642e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006432:	428b      	cmp	r3, r1
 8006434:	f000 8107 	beq.w	8006646 <ai_platform_network_create+0x35e>
 8006438:	6813      	ldr	r3, [r2, #0]
 800643a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800643e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006442:	f000 8111 	beq.w	8006668 <ai_platform_network_create+0x380>
 8006446:	6813      	ldr	r3, [r2, #0]
 8006448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800644c:	2b00      	cmp	r3, #0
 800644e:	f040 80c3 	bne.w	80065d8 <ai_platform_network_create+0x2f0>
 8006452:	4b54      	ldr	r3, [pc, #336]	; (80065a4 <ai_platform_network_create+0x2bc>)
 8006454:	2201      	movs	r2, #1
 8006456:	609a      	str	r2, [r3, #8]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	2a00      	cmp	r2, #0
 800645c:	d1fc      	bne.n	8006458 <ai_platform_network_create+0x170>
 800645e:	4a53      	ldr	r2, [pc, #332]	; (80065ac <ai_platform_network_create+0x2c4>)
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <ai_platform_network_create+0x2c8>)
 8006466:	429a      	cmp	r2, r3
 8006468:	f000 80b6 	beq.w	80065d8 <ai_platform_network_create+0x2f0>
 800646c:	e7fe      	b.n	800646c <ai_platform_network_create+0x184>
 800646e:	4b4d      	ldr	r3, [pc, #308]	; (80065a4 <ai_platform_network_create+0x2bc>)
 8006470:	2218      	movs	r2, #24
 8006472:	609a      	str	r2, [r3, #8]
 8006474:	689a      	ldr	r2, [r3, #8]
 8006476:	2a18      	cmp	r2, #24
 8006478:	d027      	beq.n	80064ca <ai_platform_network_create+0x1e2>
 800647a:	4608      	mov	r0, r1
 800647c:	f7ff fa42 	bl	8005904 <_ai_platform_release_crc>
 8006480:	f244 1033 	movw	r0, #16691	; 0x4133
 8006484:	b003      	add	sp, #12
 8006486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800648a:	4a4a      	ldr	r2, [pc, #296]	; (80065b4 <ai_platform_network_create+0x2cc>)
 800648c:	2318      	movs	r3, #24
 800648e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006492:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006496:	2b18      	cmp	r3, #24
 8006498:	d1f0      	bne.n	800647c <ai_platform_network_create+0x194>
 800649a:	2301      	movs	r3, #1
 800649c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1fb      	bne.n	80064a0 <ai_platform_network_create+0x1b8>
 80064a8:	e767      	b.n	800637a <ai_platform_network_create+0x92>
 80064aa:	4a42      	ldr	r2, [pc, #264]	; (80065b4 <ai_platform_network_create+0x2cc>)
 80064ac:	2318      	movs	r3, #24
 80064ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064b6:	2b18      	cmp	r3, #24
 80064b8:	d1e0      	bne.n	800647c <ai_platform_network_create+0x194>
 80064ba:	2301      	movs	r3, #1
 80064bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d1fb      	bne.n	80064c0 <ai_platform_network_create+0x1d8>
 80064c8:	e757      	b.n	800637a <ai_platform_network_create+0x92>
 80064ca:	2201      	movs	r2, #1
 80064cc:	609a      	str	r2, [r3, #8]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	d1fc      	bne.n	80064ce <ai_platform_network_create+0x1e6>
 80064d4:	e751      	b.n	800637a <ai_platform_network_create+0x92>
 80064d6:	4a33      	ldr	r2, [pc, #204]	; (80065a4 <ai_platform_network_create+0x2bc>)
 80064d8:	2301      	movs	r3, #1
 80064da:	6093      	str	r3, [r2, #8]
 80064dc:	6891      	ldr	r1, [r2, #8]
 80064de:	2900      	cmp	r1, #0
 80064e0:	d1fc      	bne.n	80064dc <ai_platform_network_create+0x1f4>
 80064e2:	4b32      	ldr	r3, [pc, #200]	; (80065ac <ai_platform_network_create+0x2c4>)
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b32      	ldr	r3, [pc, #200]	; (80065b0 <ai_platform_network_create+0x2c8>)
 80064e8:	6812      	ldr	r2, [r2, #0]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f43f af76 	beq.w	80063dc <ai_platform_network_create+0xf4>
 80064f0:	e7fe      	b.n	80064f0 <ai_platform_network_create+0x208>
 80064f2:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <ai_platform_network_create+0x2cc>)
 80064f4:	2301      	movs	r3, #1
 80064f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1fb      	bne.n	80064fa <ai_platform_network_create+0x212>
 8006502:	4b2a      	ldr	r3, [pc, #168]	; (80065ac <ai_platform_network_create+0x2c4>)
 8006504:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006508:	4b29      	ldr	r3, [pc, #164]	; (80065b0 <ai_platform_network_create+0x2c8>)
 800650a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800650e:	429a      	cmp	r2, r3
 8006510:	f43f af64 	beq.w	80063dc <ai_platform_network_create+0xf4>
 8006514:	e7fe      	b.n	8006514 <ai_platform_network_create+0x22c>
 8006516:	f04f 0930 	mov.w	r9, #48	; 0x30
 800651a:	2300      	movs	r3, #0
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	2410      	movs	r4, #16
 8006520:	4642      	mov	r2, r8
 8006522:	4639      	mov	r1, r7
 8006524:	4630      	mov	r0, r6
 8006526:	f001 fe09 	bl	800813c <ai_version_get>
 800652a:	4603      	mov	r3, r0
 800652c:	2000      	movs	r0, #0
 800652e:	64ab      	str	r3, [r5, #72]	; 0x48
 8006530:	f369 0007 	bfi	r0, r9, #0, #8
 8006534:	f364 201f 	bfi	r0, r4, #8, #24
 8006538:	e7a4      	b.n	8006484 <ai_platform_network_create+0x19c>
 800653a:	f241 0010 	movw	r0, #4112	; 0x1010
 800653e:	e7a1      	b.n	8006484 <ai_platform_network_create+0x19c>
 8006540:	4a1c      	ldr	r2, [pc, #112]	; (80065b4 <ai_platform_network_create+0x2cc>)
 8006542:	2301      	movs	r3, #1
 8006544:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006548:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1fb      	bne.n	8006548 <ai_platform_network_create+0x260>
 8006550:	4b16      	ldr	r3, [pc, #88]	; (80065ac <ai_platform_network_create+0x2c4>)
 8006552:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006556:	4b16      	ldr	r3, [pc, #88]	; (80065b0 <ai_platform_network_create+0x2c8>)
 8006558:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800655c:	429a      	cmp	r2, r3
 800655e:	f43f af3d 	beq.w	80063dc <ai_platform_network_create+0xf4>
 8006562:	e7fe      	b.n	8006562 <ai_platform_network_create+0x27a>
 8006564:	4a0f      	ldr	r2, [pc, #60]	; (80065a4 <ai_platform_network_create+0x2bc>)
 8006566:	2301      	movs	r3, #1
 8006568:	6093      	str	r3, [r2, #8]
 800656a:	6893      	ldr	r3, [r2, #8]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1fc      	bne.n	800656a <ai_platform_network_create+0x282>
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <ai_platform_network_create+0x2c4>)
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <ai_platform_network_create+0x2c8>)
 8006576:	6812      	ldr	r2, [r2, #0]
 8006578:	429a      	cmp	r2, r3
 800657a:	f43f af2f 	beq.w	80063dc <ai_platform_network_create+0xf4>
 800657e:	e7fe      	b.n	800657e <ai_platform_network_create+0x296>
 8006580:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <ai_platform_network_create+0x2bc>)
 8006582:	2301      	movs	r3, #1
 8006584:	6093      	str	r3, [r2, #8]
 8006586:	6893      	ldr	r3, [r2, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1fc      	bne.n	8006586 <ai_platform_network_create+0x29e>
 800658c:	4b07      	ldr	r3, [pc, #28]	; (80065ac <ai_platform_network_create+0x2c4>)
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <ai_platform_network_create+0x2c8>)
 8006592:	6812      	ldr	r2, [r2, #0]
 8006594:	429a      	cmp	r2, r3
 8006596:	d01f      	beq.n	80065d8 <ai_platform_network_create+0x2f0>
 8006598:	e7fe      	b.n	8006598 <ai_platform_network_create+0x2b0>
 800659a:	bf00      	nop
 800659c:	e0042000 	.word	0xe0042000
 80065a0:	5c001000 	.word	0x5c001000
 80065a4:	40023000 	.word	0x40023000
 80065a8:	a1c00100 	.word	0xa1c00100
 80065ac:	f407a5c2 	.word	0xf407a5c2
 80065b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80065b4:	58024000 	.word	0x58024000
 80065b8:	4a33      	ldr	r2, [pc, #204]	; (8006688 <ai_platform_network_create+0x3a0>)
 80065ba:	2301      	movs	r3, #1
 80065bc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80065c0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1fb      	bne.n	80065c0 <ai_platform_network_create+0x2d8>
 80065c8:	4b30      	ldr	r3, [pc, #192]	; (800668c <ai_platform_network_create+0x3a4>)
 80065ca:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80065ce:	4b30      	ldr	r3, [pc, #192]	; (8006690 <ai_platform_network_create+0x3a8>)
 80065d0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d12c      	bne.n	8006632 <ai_platform_network_create+0x34a>
 80065d8:	f7ff f994 	bl	8005904 <_ai_platform_release_crc>
 80065dc:	2200      	movs	r2, #0
 80065de:	4639      	mov	r1, r7
 80065e0:	4630      	mov	r0, r6
 80065e2:	f001 fdab 	bl	800813c <ai_version_get>
 80065e6:	4681      	mov	r9, r0
 80065e8:	2200      	movs	r2, #0
 80065ea:	2105      	movs	r1, #5
 80065ec:	2001      	movs	r0, #1
 80065ee:	f001 fda5 	bl	800813c <ai_version_get>
 80065f2:	4581      	cmp	r9, r0
 80065f4:	d01e      	beq.n	8006634 <ai_platform_network_create+0x34c>
 80065f6:	f04f 0901 	mov.w	r9, #1
 80065fa:	e78e      	b.n	800651a <ai_platform_network_create+0x232>
 80065fc:	4b25      	ldr	r3, [pc, #148]	; (8006694 <ai_platform_network_create+0x3ac>)
 80065fe:	2218      	movs	r2, #24
 8006600:	609a      	str	r2, [r3, #8]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	2a18      	cmp	r2, #24
 8006606:	f47f af39 	bne.w	800647c <ai_platform_network_create+0x194>
 800660a:	2201      	movs	r2, #1
 800660c:	609a      	str	r2, [r3, #8]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	2a00      	cmp	r2, #0
 8006612:	d1fc      	bne.n	800660e <ai_platform_network_create+0x326>
 8006614:	e6b1      	b.n	800637a <ai_platform_network_create+0x92>
 8006616:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <ai_platform_network_create+0x3ac>)
 8006618:	2301      	movs	r3, #1
 800661a:	6093      	str	r3, [r2, #8]
 800661c:	6893      	ldr	r3, [r2, #8]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1fc      	bne.n	800661c <ai_platform_network_create+0x334>
 8006622:	4b1a      	ldr	r3, [pc, #104]	; (800668c <ai_platform_network_create+0x3a4>)
 8006624:	6013      	str	r3, [r2, #0]
 8006626:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <ai_platform_network_create+0x3a8>)
 8006628:	6812      	ldr	r2, [r2, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	f43f aed6 	beq.w	80063dc <ai_platform_network_create+0xf4>
 8006630:	e7fe      	b.n	8006630 <ai_platform_network_create+0x348>
 8006632:	e7fe      	b.n	8006632 <ai_platform_network_create+0x34a>
 8006634:	4b18      	ldr	r3, [pc, #96]	; (8006698 <ai_platform_network_create+0x3b0>)
 8006636:	a801      	add	r0, sp, #4
 8006638:	9301      	str	r3, [sp, #4]
 800663a:	f001 fbc5 	bl	8007dc8 <ai_check_custom_types>
 800663e:	b300      	cbz	r0, 8006682 <ai_platform_network_create+0x39a>
 8006640:	2400      	movs	r4, #0
 8006642:	46a1      	mov	r9, r4
 8006644:	e76c      	b.n	8006520 <ai_platform_network_create+0x238>
 8006646:	4b10      	ldr	r3, [pc, #64]	; (8006688 <ai_platform_network_create+0x3a0>)
 8006648:	2201      	movs	r2, #1
 800664a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800664e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006652:	2a00      	cmp	r2, #0
 8006654:	d1fb      	bne.n	800664e <ai_platform_network_create+0x366>
 8006656:	4a0d      	ldr	r2, [pc, #52]	; (800668c <ai_platform_network_create+0x3a4>)
 8006658:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800665c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006660:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <ai_platform_network_create+0x3a8>)
 8006662:	429a      	cmp	r2, r3
 8006664:	d0b8      	beq.n	80065d8 <ai_platform_network_create+0x2f0>
 8006666:	e7fe      	b.n	8006666 <ai_platform_network_create+0x37e>
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <ai_platform_network_create+0x3ac>)
 800666a:	2201      	movs	r2, #1
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	2a00      	cmp	r2, #0
 8006672:	d1fc      	bne.n	800666e <ai_platform_network_create+0x386>
 8006674:	4a05      	ldr	r2, [pc, #20]	; (800668c <ai_platform_network_create+0x3a4>)
 8006676:	601a      	str	r2, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	4b05      	ldr	r3, [pc, #20]	; (8006690 <ai_platform_network_create+0x3a8>)
 800667c:	429a      	cmp	r2, r3
 800667e:	d0ab      	beq.n	80065d8 <ai_platform_network_create+0x2f0>
 8006680:	e7fe      	b.n	8006680 <ai_platform_network_create+0x398>
 8006682:	f04f 0902 	mov.w	r9, #2
 8006686:	e748      	b.n	800651a <ai_platform_network_create+0x232>
 8006688:	58024000 	.word	0x58024000
 800668c:	f407a5c2 	.word	0xf407a5c2
 8006690:	b5e8b5cd 	.word	0xb5e8b5cd
 8006694:	40023000 	.word	0x40023000
 8006698:	84048403 	.word	0x84048403

0800669c <ai_platform_network_init>:
 800669c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a0:	2800      	cmp	r0, #0
 80066a2:	d052      	beq.n	800674a <ai_platform_network_init+0xae>
 80066a4:	4bab      	ldr	r3, [pc, #684]	; (8006954 <ai_platform_network_init+0x2b8>)
 80066a6:	4604      	mov	r4, r0
 80066a8:	6802      	ldr	r2, [r0, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d14d      	bne.n	800674a <ai_platform_network_init+0xae>
 80066ae:	460d      	mov	r5, r1
 80066b0:	f7ff f926 	bl	8005900 <_ai_platform_acquire_crc>
 80066b4:	4ba8      	ldr	r3, [pc, #672]	; (8006958 <ai_platform_network_init+0x2bc>)
 80066b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066c0:	189a      	adds	r2, r3, r2
 80066c2:	2a01      	cmp	r2, #1
 80066c4:	f240 809b 	bls.w	80067fe <ai_platform_network_init+0x162>
 80066c8:	f240 4249 	movw	r2, #1097	; 0x449
 80066cc:	4293      	cmp	r3, r2
 80066ce:	f000 8096 	beq.w	80067fe <ai_platform_network_init+0x162>
 80066d2:	4aa2      	ldr	r2, [pc, #648]	; (800695c <ai_platform_network_init+0x2c0>)
 80066d4:	6813      	ldr	r3, [r2, #0]
 80066d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80066de:	f000 809d 	beq.w	800681c <ai_platform_network_init+0x180>
 80066e2:	6813      	ldr	r3, [r2, #0]
 80066e4:	f240 4183 	movw	r1, #1155	; 0x483
 80066e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066ec:	428b      	cmp	r3, r1
 80066ee:	f000 80e4 	beq.w	80068ba <ai_platform_network_init+0x21e>
 80066f2:	6813      	ldr	r3, [r2, #0]
 80066f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80066fc:	f000 811b 	beq.w	8006936 <ai_platform_network_init+0x29a>
 8006700:	6813      	ldr	r3, [r2, #0]
 8006702:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80f9 	beq.w	80068fe <ai_platform_network_init+0x262>
 800670c:	f7ff f8fa 	bl	8005904 <_ai_platform_release_crc>
 8006710:	2d00      	cmp	r5, #0
 8006712:	f000 8147 	beq.w	80069a4 <ai_platform_network_init+0x308>
 8006716:	4b92      	ldr	r3, [pc, #584]	; (8006960 <ai_platform_network_init+0x2c4>)
 8006718:	682a      	ldr	r2, [r5, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	f040 8090 	bne.w	8006840 <ai_platform_network_init+0x1a4>
 8006720:	692b      	ldr	r3, [r5, #16]
 8006722:	89ae      	ldrh	r6, [r5, #12]
 8006724:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006728:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800672c:	62a3      	str	r3, [r4, #40]	; 0x28
 800672e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006732:	2303      	movs	r3, #3
 8006734:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006736:	4626      	mov	r6, r4
 8006738:	4620      	mov	r0, r4
 800673a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800673e:	60e3      	str	r3, [r4, #12]
 8006740:	f001 fb6a 	bl	8007e18 <ai_layers_init_all>
 8006744:	4630      	mov	r0, r6
 8006746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674a:	f7ff f8d9 	bl	8005900 <_ai_platform_acquire_crc>
 800674e:	4b82      	ldr	r3, [pc, #520]	; (8006958 <ai_platform_network_init+0x2bc>)
 8006750:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800675a:	185a      	adds	r2, r3, r1
 800675c:	2a01      	cmp	r2, #1
 800675e:	d92b      	bls.n	80067b8 <ai_platform_network_init+0x11c>
 8006760:	f240 4249 	movw	r2, #1097	; 0x449
 8006764:	4293      	cmp	r3, r2
 8006766:	d027      	beq.n	80067b8 <ai_platform_network_init+0x11c>
 8006768:	4a7c      	ldr	r2, [pc, #496]	; (800695c <ai_platform_network_init+0x2c0>)
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006770:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006774:	d02d      	beq.n	80067d2 <ai_platform_network_init+0x136>
 8006776:	6813      	ldr	r3, [r2, #0]
 8006778:	f240 4183 	movw	r1, #1155	; 0x483
 800677c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006780:	428b      	cmp	r3, r1
 8006782:	f000 8089 	beq.w	8006898 <ai_platform_network_init+0x1fc>
 8006786:	6813      	ldr	r3, [r2, #0]
 8006788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006790:	f000 80c3 	beq.w	800691a <ai_platform_network_init+0x27e>
 8006794:	6813      	ldr	r3, [r2, #0]
 8006796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679a:	2b00      	cmp	r3, #0
 800679c:	d129      	bne.n	80067f2 <ai_platform_network_init+0x156>
 800679e:	4a71      	ldr	r2, [pc, #452]	; (8006964 <ai_platform_network_init+0x2c8>)
 80067a0:	2301      	movs	r3, #1
 80067a2:	6093      	str	r3, [r2, #8]
 80067a4:	6893      	ldr	r3, [r2, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1fc      	bne.n	80067a4 <ai_platform_network_init+0x108>
 80067aa:	496f      	ldr	r1, [pc, #444]	; (8006968 <ai_platform_network_init+0x2cc>)
 80067ac:	4b6f      	ldr	r3, [pc, #444]	; (800696c <ai_platform_network_init+0x2d0>)
 80067ae:	6011      	str	r1, [r2, #0]
 80067b0:	6812      	ldr	r2, [r2, #0]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d01d      	beq.n	80067f2 <ai_platform_network_init+0x156>
 80067b6:	e7fe      	b.n	80067b6 <ai_platform_network_init+0x11a>
 80067b8:	4a6a      	ldr	r2, [pc, #424]	; (8006964 <ai_platform_network_init+0x2c8>)
 80067ba:	2301      	movs	r3, #1
 80067bc:	6093      	str	r3, [r2, #8]
 80067be:	6893      	ldr	r3, [r2, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1fc      	bne.n	80067be <ai_platform_network_init+0x122>
 80067c4:	4968      	ldr	r1, [pc, #416]	; (8006968 <ai_platform_network_init+0x2cc>)
 80067c6:	4b69      	ldr	r3, [pc, #420]	; (800696c <ai_platform_network_init+0x2d0>)
 80067c8:	6011      	str	r1, [r2, #0]
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d010      	beq.n	80067f2 <ai_platform_network_init+0x156>
 80067d0:	e7fe      	b.n	80067d0 <ai_platform_network_init+0x134>
 80067d2:	4a67      	ldr	r2, [pc, #412]	; (8006970 <ai_platform_network_init+0x2d4>)
 80067d4:	2301      	movs	r3, #1
 80067d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1fb      	bne.n	80067da <ai_platform_network_init+0x13e>
 80067e2:	4961      	ldr	r1, [pc, #388]	; (8006968 <ai_platform_network_init+0x2cc>)
 80067e4:	4b61      	ldr	r3, [pc, #388]	; (800696c <ai_platform_network_init+0x2d0>)
 80067e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80067ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d113      	bne.n	800681a <ai_platform_network_init+0x17e>
 80067f2:	2600      	movs	r6, #0
 80067f4:	f7ff f886 	bl	8005904 <_ai_platform_release_crc>
 80067f8:	4630      	mov	r0, r6
 80067fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067fe:	4a59      	ldr	r2, [pc, #356]	; (8006964 <ai_platform_network_init+0x2c8>)
 8006800:	2301      	movs	r3, #1
 8006802:	6093      	str	r3, [r2, #8]
 8006804:	6893      	ldr	r3, [r2, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1fc      	bne.n	8006804 <ai_platform_network_init+0x168>
 800680a:	4b57      	ldr	r3, [pc, #348]	; (8006968 <ai_platform_network_init+0x2cc>)
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	4b57      	ldr	r3, [pc, #348]	; (800696c <ai_platform_network_init+0x2d0>)
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	f43f af7a 	beq.w	800670c <ai_platform_network_init+0x70>
 8006818:	e7fe      	b.n	8006818 <ai_platform_network_init+0x17c>
 800681a:	e7fe      	b.n	800681a <ai_platform_network_init+0x17e>
 800681c:	4a54      	ldr	r2, [pc, #336]	; (8006970 <ai_platform_network_init+0x2d4>)
 800681e:	2301      	movs	r3, #1
 8006820:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006824:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006828:	2b00      	cmp	r3, #0
 800682a:	d1fb      	bne.n	8006824 <ai_platform_network_init+0x188>
 800682c:	4b4e      	ldr	r3, [pc, #312]	; (8006968 <ai_platform_network_init+0x2cc>)
 800682e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006832:	4b4e      	ldr	r3, [pc, #312]	; (800696c <ai_platform_network_init+0x2d0>)
 8006834:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006838:	429a      	cmp	r2, r3
 800683a:	f43f af67 	beq.w	800670c <ai_platform_network_init+0x70>
 800683e:	e7fe      	b.n	800683e <ai_platform_network_init+0x1a2>
 8006840:	2101      	movs	r1, #1
 8006842:	4628      	mov	r0, r5
 8006844:	f105 081c 	add.w	r8, r5, #28
 8006848:	686e      	ldr	r6, [r5, #4]
 800684a:	f7ff f80b 	bl	8005864 <ai_buffer_get_size>
 800684e:	4607      	mov	r7, r0
 8006850:	2101      	movs	r1, #1
 8006852:	4640      	mov	r0, r8
 8006854:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8006858:	f7ff f804 	bl	8005864 <ai_buffer_get_size>
 800685c:	2f00      	cmp	r7, #0
 800685e:	d13e      	bne.n	80068de <ai_platform_network_init+0x242>
 8006860:	2800      	cmp	r0, #0
 8006862:	f000 808e 	beq.w	8006982 <ai_platform_network_init+0x2e6>
 8006866:	f1b9 0f00 	cmp.w	r9, #0
 800686a:	f000 8094 	beq.w	8006996 <ai_platform_network_init+0x2fa>
 800686e:	f04f 0c01 	mov.w	ip, #1
 8006872:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006874:	2600      	movs	r6, #0
 8006876:	83e7      	strh	r7, [r4, #30]
 8006878:	4563      	cmp	r3, ip
 800687a:	83a6      	strh	r6, [r4, #28]
 800687c:	d37a      	bcc.n	8006974 <ai_platform_network_init+0x2d8>
 800687e:	f1bc 0f00 	cmp.w	ip, #0
 8006882:	f000 809c 	beq.w	80069be <ai_platform_network_init+0x322>
 8006886:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006888:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 800688c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800688e:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 8006892:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006896:	e74c      	b.n	8006732 <ai_platform_network_init+0x96>
 8006898:	4a35      	ldr	r2, [pc, #212]	; (8006970 <ai_platform_network_init+0x2d4>)
 800689a:	2301      	movs	r3, #1
 800689c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068a0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1fb      	bne.n	80068a0 <ai_platform_network_init+0x204>
 80068a8:	492f      	ldr	r1, [pc, #188]	; (8006968 <ai_platform_network_init+0x2cc>)
 80068aa:	4b30      	ldr	r3, [pc, #192]	; (800696c <ai_platform_network_init+0x2d0>)
 80068ac:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80068b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d09c      	beq.n	80067f2 <ai_platform_network_init+0x156>
 80068b8:	e7fe      	b.n	80068b8 <ai_platform_network_init+0x21c>
 80068ba:	4a2d      	ldr	r2, [pc, #180]	; (8006970 <ai_platform_network_init+0x2d4>)
 80068bc:	2301      	movs	r3, #1
 80068be:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068c2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1fb      	bne.n	80068c2 <ai_platform_network_init+0x226>
 80068ca:	4b27      	ldr	r3, [pc, #156]	; (8006968 <ai_platform_network_init+0x2cc>)
 80068cc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80068d0:	4b26      	ldr	r3, [pc, #152]	; (800696c <ai_platform_network_init+0x2d0>)
 80068d2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80068d6:	429a      	cmp	r2, r3
 80068d8:	f43f af18 	beq.w	800670c <ai_platform_network_init+0x70>
 80068dc:	e7fe      	b.n	80068dc <ai_platform_network_init+0x240>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d153      	bne.n	800698a <ai_platform_network_init+0x2ee>
 80068e2:	4680      	mov	r8, r0
 80068e4:	4684      	mov	ip, r0
 80068e6:	2e00      	cmp	r6, #0
 80068e8:	d063      	beq.n	80069b2 <ai_platform_network_init+0x316>
 80068ea:	8be6      	ldrh	r6, [r4, #30]
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	d168      	bne.n	80069c2 <ai_platform_network_init+0x326>
 80068f0:	2212      	movs	r2, #18
 80068f2:	2116      	movs	r1, #22
 80068f4:	f104 0010 	add.w	r0, r4, #16
 80068f8:	f000 fc7c 	bl	80071f4 <core_set_error>
 80068fc:	e77c      	b.n	80067f8 <ai_platform_network_init+0x15c>
 80068fe:	4a19      	ldr	r2, [pc, #100]	; (8006964 <ai_platform_network_init+0x2c8>)
 8006900:	2301      	movs	r3, #1
 8006902:	6093      	str	r3, [r2, #8]
 8006904:	6893      	ldr	r3, [r2, #8]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1fc      	bne.n	8006904 <ai_platform_network_init+0x268>
 800690a:	4b17      	ldr	r3, [pc, #92]	; (8006968 <ai_platform_network_init+0x2cc>)
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b17      	ldr	r3, [pc, #92]	; (800696c <ai_platform_network_init+0x2d0>)
 8006910:	6812      	ldr	r2, [r2, #0]
 8006912:	429a      	cmp	r2, r3
 8006914:	f43f aefa 	beq.w	800670c <ai_platform_network_init+0x70>
 8006918:	e7fe      	b.n	8006918 <ai_platform_network_init+0x27c>
 800691a:	4a12      	ldr	r2, [pc, #72]	; (8006964 <ai_platform_network_init+0x2c8>)
 800691c:	2301      	movs	r3, #1
 800691e:	6093      	str	r3, [r2, #8]
 8006920:	6893      	ldr	r3, [r2, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1fc      	bne.n	8006920 <ai_platform_network_init+0x284>
 8006926:	4910      	ldr	r1, [pc, #64]	; (8006968 <ai_platform_network_init+0x2cc>)
 8006928:	4b10      	ldr	r3, [pc, #64]	; (800696c <ai_platform_network_init+0x2d0>)
 800692a:	6011      	str	r1, [r2, #0]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	f43f af5f 	beq.w	80067f2 <ai_platform_network_init+0x156>
 8006934:	e7fe      	b.n	8006934 <ai_platform_network_init+0x298>
 8006936:	4a0b      	ldr	r2, [pc, #44]	; (8006964 <ai_platform_network_init+0x2c8>)
 8006938:	2301      	movs	r3, #1
 800693a:	6093      	str	r3, [r2, #8]
 800693c:	6893      	ldr	r3, [r2, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1fc      	bne.n	800693c <ai_platform_network_init+0x2a0>
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <ai_platform_network_init+0x2cc>)
 8006944:	6013      	str	r3, [r2, #0]
 8006946:	4b09      	ldr	r3, [pc, #36]	; (800696c <ai_platform_network_init+0x2d0>)
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	f43f aede 	beq.w	800670c <ai_platform_network_init+0x70>
 8006950:	e7fe      	b.n	8006950 <ai_platform_network_init+0x2b4>
 8006952:	bf00      	nop
 8006954:	a1c00100 	.word	0xa1c00100
 8006958:	e0042000 	.word	0xe0042000
 800695c:	5c001000 	.word	0x5c001000
 8006960:	a1facade 	.word	0xa1facade
 8006964:	40023000 	.word	0x40023000
 8006968:	f407a5c2 	.word	0xf407a5c2
 800696c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006970:	58024000 	.word	0x58024000
 8006974:	2213      	movs	r2, #19
 8006976:	2116      	movs	r1, #22
 8006978:	f104 0010 	add.w	r0, r4, #16
 800697c:	f000 fc3a 	bl	80071f4 <core_set_error>
 8006980:	e73a      	b.n	80067f8 <ai_platform_network_init+0x15c>
 8006982:	4607      	mov	r7, r0
 8006984:	4680      	mov	r8, r0
 8006986:	4684      	mov	ip, r0
 8006988:	e773      	b.n	8006872 <ai_platform_network_init+0x1d6>
 800698a:	f1b9 0f00 	cmp.w	r9, #0
 800698e:	d002      	beq.n	8006996 <ai_platform_network_init+0x2fa>
 8006990:	f04f 0c01 	mov.w	ip, #1
 8006994:	e7a7      	b.n	80068e6 <ai_platform_network_init+0x24a>
 8006996:	2110      	movs	r1, #16
 8006998:	2213      	movs	r2, #19
 800699a:	2600      	movs	r6, #0
 800699c:	1860      	adds	r0, r4, r1
 800699e:	f000 fc29 	bl	80071f4 <core_set_error>
 80069a2:	e729      	b.n	80067f8 <ai_platform_network_init+0x15c>
 80069a4:	2110      	movs	r1, #16
 80069a6:	2211      	movs	r2, #17
 80069a8:	462e      	mov	r6, r5
 80069aa:	1860      	adds	r0, r4, r1
 80069ac:	f000 fc22 	bl	80071f4 <core_set_error>
 80069b0:	e722      	b.n	80067f8 <ai_platform_network_init+0x15c>
 80069b2:	2110      	movs	r1, #16
 80069b4:	2212      	movs	r2, #18
 80069b6:	1860      	adds	r0, r4, r1
 80069b8:	f000 fc1c 	bl	80071f4 <core_set_error>
 80069bc:	e71c      	b.n	80067f8 <ai_platform_network_init+0x15c>
 80069be:	4666      	mov	r6, ip
 80069c0:	e6b7      	b.n	8006732 <ai_platform_network_init+0x96>
 80069c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069c4:	6a26      	ldr	r6, [r4, #32]
 80069c6:	2701      	movs	r7, #1
 80069c8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80069ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80069ce:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80069d2:	e74e      	b.n	8006872 <ai_platform_network_init+0x1d6>

080069d4 <ai_platform_network_post_init>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d04e      	beq.n	8006a78 <ai_platform_network_post_init+0xa4>
 80069da:	4b8c      	ldr	r3, [pc, #560]	; (8006c0c <ai_platform_network_post_init+0x238>)
 80069dc:	4604      	mov	r4, r0
 80069de:	6802      	ldr	r2, [r0, #0]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d149      	bne.n	8006a78 <ai_platform_network_post_init+0xa4>
 80069e4:	f7fe ff8c 	bl	8005900 <_ai_platform_acquire_crc>
 80069e8:	4b89      	ldr	r3, [pc, #548]	; (8006c10 <ai_platform_network_post_init+0x23c>)
 80069ea:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069f4:	189a      	adds	r2, r3, r2
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	f240 8095 	bls.w	8006b26 <ai_platform_network_post_init+0x152>
 80069fc:	f240 4249 	movw	r2, #1097	; 0x449
 8006a00:	4293      	cmp	r3, r2
 8006a02:	f000 8090 	beq.w	8006b26 <ai_platform_network_post_init+0x152>
 8006a06:	4a83      	ldr	r2, [pc, #524]	; (8006c14 <ai_platform_network_post_init+0x240>)
 8006a08:	6813      	ldr	r3, [r2, #0]
 8006a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a0e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a12:	f000 8096 	beq.w	8006b42 <ai_platform_network_post_init+0x16e>
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	f240 4183 	movw	r1, #1155	; 0x483
 8006a1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a20:	428b      	cmp	r3, r1
 8006a22:	f000 80b8 	beq.w	8006b96 <ai_platform_network_post_init+0x1c2>
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a30:	f000 80de 	beq.w	8006bf0 <ai_platform_network_post_init+0x21c>
 8006a34:	6813      	ldr	r3, [r2, #0]
 8006a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80bd 	beq.w	8006bba <ai_platform_network_post_init+0x1e6>
 8006a40:	f7fe ff60 	bl	8005904 <_ai_platform_release_crc>
 8006a44:	68e3      	ldr	r3, [r4, #12]
 8006a46:	f013 0502 	ands.w	r5, r3, #2
 8006a4a:	f000 808c 	beq.w	8006b66 <ai_platform_network_post_init+0x192>
 8006a4e:	4620      	mov	r0, r4
 8006a50:	f001 f9f0 	bl	8007e34 <ai_layers_post_init_all>
 8006a54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006a56:	b16b      	cbz	r3, 8006a74 <ai_platform_network_post_init+0xa0>
 8006a58:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006a5a:	e007      	b.n	8006a6c <ai_platform_network_post_init+0x98>
 8006a5c:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006a60:	4798      	blx	r3
 8006a62:	692b      	ldr	r3, [r5, #16]
 8006a64:	b133      	cbz	r3, 8006a74 <ai_platform_network_post_init+0xa0>
 8006a66:	42ab      	cmp	r3, r5
 8006a68:	461d      	mov	r5, r3
 8006a6a:	d003      	beq.n	8006a74 <ai_platform_network_post_init+0xa0>
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	2000      	movs	r0, #0
 8006a70:	2d00      	cmp	r5, #0
 8006a72:	d1f3      	bne.n	8006a5c <ai_platform_network_post_init+0x88>
 8006a74:	2001      	movs	r0, #1
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	f7fe ff42 	bl	8005900 <_ai_platform_acquire_crc>
 8006a7c:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <ai_platform_network_post_init+0x23c>)
 8006a7e:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a88:	185a      	adds	r2, r3, r1
 8006a8a:	2a01      	cmp	r2, #1
 8006a8c:	d92a      	bls.n	8006ae4 <ai_platform_network_post_init+0x110>
 8006a8e:	f240 4249 	movw	r2, #1097	; 0x449
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d026      	beq.n	8006ae4 <ai_platform_network_post_init+0x110>
 8006a96:	4a5f      	ldr	r2, [pc, #380]	; (8006c14 <ai_platform_network_post_init+0x240>)
 8006a98:	6813      	ldr	r3, [r2, #0]
 8006a9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006aa2:	d02c      	beq.n	8006afe <ai_platform_network_post_init+0x12a>
 8006aa4:	6813      	ldr	r3, [r2, #0]
 8006aa6:	f240 4183 	movw	r1, #1155	; 0x483
 8006aaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006aae:	428b      	cmp	r3, r1
 8006ab0:	d060      	beq.n	8006b74 <ai_platform_network_post_init+0x1a0>
 8006ab2:	6813      	ldr	r3, [r2, #0]
 8006ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ab8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006abc:	f000 808b 	beq.w	8006bd6 <ai_platform_network_post_init+0x202>
 8006ac0:	6813      	ldr	r3, [r2, #0]
 8006ac2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d129      	bne.n	8006b1e <ai_platform_network_post_init+0x14a>
 8006aca:	4a53      	ldr	r2, [pc, #332]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006acc:	2301      	movs	r3, #1
 8006ace:	6093      	str	r3, [r2, #8]
 8006ad0:	6893      	ldr	r3, [r2, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1fc      	bne.n	8006ad0 <ai_platform_network_post_init+0xfc>
 8006ad6:	4951      	ldr	r1, [pc, #324]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006ad8:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006ada:	6011      	str	r1, [r2, #0]
 8006adc:	6812      	ldr	r2, [r2, #0]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d01d      	beq.n	8006b1e <ai_platform_network_post_init+0x14a>
 8006ae2:	e7fe      	b.n	8006ae2 <ai_platform_network_post_init+0x10e>
 8006ae4:	4a4c      	ldr	r2, [pc, #304]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	6093      	str	r3, [r2, #8]
 8006aea:	6893      	ldr	r3, [r2, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1fc      	bne.n	8006aea <ai_platform_network_post_init+0x116>
 8006af0:	494a      	ldr	r1, [pc, #296]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006af2:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006af4:	6011      	str	r1, [r2, #0]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d010      	beq.n	8006b1e <ai_platform_network_post_init+0x14a>
 8006afc:	e7fe      	b.n	8006afc <ai_platform_network_post_init+0x128>
 8006afe:	4a49      	ldr	r2, [pc, #292]	; (8006c24 <ai_platform_network_post_init+0x250>)
 8006b00:	2301      	movs	r3, #1
 8006b02:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b06:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1fb      	bne.n	8006b06 <ai_platform_network_post_init+0x132>
 8006b0e:	4943      	ldr	r1, [pc, #268]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006b10:	4b43      	ldr	r3, [pc, #268]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006b12:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b16:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d110      	bne.n	8006b40 <ai_platform_network_post_init+0x16c>
 8006b1e:	f7fe fef1 	bl	8005904 <_ai_platform_release_crc>
 8006b22:	2000      	movs	r0, #0
 8006b24:	bd38      	pop	{r3, r4, r5, pc}
 8006b26:	4a3c      	ldr	r2, [pc, #240]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006b28:	2301      	movs	r3, #1
 8006b2a:	6093      	str	r3, [r2, #8]
 8006b2c:	6893      	ldr	r3, [r2, #8]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1fc      	bne.n	8006b2c <ai_platform_network_post_init+0x158>
 8006b32:	493a      	ldr	r1, [pc, #232]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006b34:	4b3a      	ldr	r3, [pc, #232]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006b36:	6011      	str	r1, [r2, #0]
 8006b38:	6812      	ldr	r2, [r2, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d080      	beq.n	8006a40 <ai_platform_network_post_init+0x6c>
 8006b3e:	e7fe      	b.n	8006b3e <ai_platform_network_post_init+0x16a>
 8006b40:	e7fe      	b.n	8006b40 <ai_platform_network_post_init+0x16c>
 8006b42:	4a38      	ldr	r2, [pc, #224]	; (8006c24 <ai_platform_network_post_init+0x250>)
 8006b44:	2301      	movs	r3, #1
 8006b46:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b4a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1fb      	bne.n	8006b4a <ai_platform_network_post_init+0x176>
 8006b52:	4932      	ldr	r1, [pc, #200]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006b54:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006b56:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b5a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	f43f af6e 	beq.w	8006a40 <ai_platform_network_post_init+0x6c>
 8006b64:	e7fe      	b.n	8006b64 <ai_platform_network_post_init+0x190>
 8006b66:	2210      	movs	r2, #16
 8006b68:	2111      	movs	r1, #17
 8006b6a:	18a0      	adds	r0, r4, r2
 8006b6c:	f000 fb42 	bl	80071f4 <core_set_error>
 8006b70:	4628      	mov	r0, r5
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	4a2b      	ldr	r2, [pc, #172]	; (8006c24 <ai_platform_network_post_init+0x250>)
 8006b76:	2301      	movs	r3, #1
 8006b78:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b7c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1fb      	bne.n	8006b7c <ai_platform_network_post_init+0x1a8>
 8006b84:	4925      	ldr	r1, [pc, #148]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006b86:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006b88:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b8c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d0c4      	beq.n	8006b1e <ai_platform_network_post_init+0x14a>
 8006b94:	e7fe      	b.n	8006b94 <ai_platform_network_post_init+0x1c0>
 8006b96:	4a23      	ldr	r2, [pc, #140]	; (8006c24 <ai_platform_network_post_init+0x250>)
 8006b98:	2301      	movs	r3, #1
 8006b9a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b9e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1fb      	bne.n	8006b9e <ai_platform_network_post_init+0x1ca>
 8006ba6:	491d      	ldr	r1, [pc, #116]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006baa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006bae:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	f43f af44 	beq.w	8006a40 <ai_platform_network_post_init+0x6c>
 8006bb8:	e7fe      	b.n	8006bb8 <ai_platform_network_post_init+0x1e4>
 8006bba:	4a17      	ldr	r2, [pc, #92]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	6093      	str	r3, [r2, #8]
 8006bc0:	6893      	ldr	r3, [r2, #8]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1fc      	bne.n	8006bc0 <ai_platform_network_post_init+0x1ec>
 8006bc6:	4915      	ldr	r1, [pc, #84]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006bca:	6011      	str	r1, [r2, #0]
 8006bcc:	6812      	ldr	r2, [r2, #0]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	f43f af36 	beq.w	8006a40 <ai_platform_network_post_init+0x6c>
 8006bd4:	e7fe      	b.n	8006bd4 <ai_platform_network_post_init+0x200>
 8006bd6:	4a10      	ldr	r2, [pc, #64]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006bd8:	2301      	movs	r3, #1
 8006bda:	6093      	str	r3, [r2, #8]
 8006bdc:	6893      	ldr	r3, [r2, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1fc      	bne.n	8006bdc <ai_platform_network_post_init+0x208>
 8006be2:	490e      	ldr	r1, [pc, #56]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006be4:	4b0e      	ldr	r3, [pc, #56]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006be6:	6011      	str	r1, [r2, #0]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d097      	beq.n	8006b1e <ai_platform_network_post_init+0x14a>
 8006bee:	e7fe      	b.n	8006bee <ai_platform_network_post_init+0x21a>
 8006bf0:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <ai_platform_network_post_init+0x244>)
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	6093      	str	r3, [r2, #8]
 8006bf6:	6893      	ldr	r3, [r2, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d1fc      	bne.n	8006bf6 <ai_platform_network_post_init+0x222>
 8006bfc:	4907      	ldr	r1, [pc, #28]	; (8006c1c <ai_platform_network_post_init+0x248>)
 8006bfe:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <ai_platform_network_post_init+0x24c>)
 8006c00:	6011      	str	r1, [r2, #0]
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	f43f af1b 	beq.w	8006a40 <ai_platform_network_post_init+0x6c>
 8006c0a:	e7fe      	b.n	8006c0a <ai_platform_network_post_init+0x236>
 8006c0c:	a1c00100 	.word	0xa1c00100
 8006c10:	e0042000 	.word	0xe0042000
 8006c14:	5c001000 	.word	0x5c001000
 8006c18:	40023000 	.word	0x40023000
 8006c1c:	f407a5c2 	.word	0xf407a5c2
 8006c20:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c24:	58024000 	.word	0x58024000

08006c28 <ai_platform_network_process>:
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	b085      	sub	sp, #20
 8006c2e:	460e      	mov	r6, r1
 8006c30:	4605      	mov	r5, r0
 8006c32:	9201      	str	r2, [sp, #4]
 8006c34:	b120      	cbz	r0, 8006c40 <ai_platform_network_process+0x18>
 8006c36:	4b24      	ldr	r3, [pc, #144]	; (8006cc8 <ai_platform_network_process+0xa0>)
 8006c38:	6802      	ldr	r2, [r0, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	bf18      	it	ne
 8006c3e:	2500      	movne	r5, #0
 8006c40:	f7fe fe5e 	bl	8005900 <_ai_platform_acquire_crc>
 8006c44:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <ai_platform_network_process+0xa4>)
 8006c46:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c50:	185a      	adds	r2, r3, r1
 8006c52:	2a01      	cmp	r2, #1
 8006c54:	d92b      	bls.n	8006cae <ai_platform_network_process+0x86>
 8006c56:	f240 4249 	movw	r2, #1097	; 0x449
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d027      	beq.n	8006cae <ai_platform_network_process+0x86>
 8006c5e:	4a1c      	ldr	r2, [pc, #112]	; (8006cd0 <ai_platform_network_process+0xa8>)
 8006c60:	6813      	ldr	r3, [r2, #0]
 8006c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c66:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c6a:	d039      	beq.n	8006ce0 <ai_platform_network_process+0xb8>
 8006c6c:	6813      	ldr	r3, [r2, #0]
 8006c6e:	f240 4183 	movw	r1, #1155	; 0x483
 8006c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c76:	428b      	cmp	r3, r1
 8006c78:	f000 819c 	beq.w	8006fb4 <ai_platform_network_process+0x38c>
 8006c7c:	6813      	ldr	r3, [r2, #0]
 8006c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c82:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c86:	f000 8179 	beq.w	8006f7c <ai_platform_network_process+0x354>
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d136      	bne.n	8006d02 <ai_platform_network_process+0xda>
 8006c94:	4a0f      	ldr	r2, [pc, #60]	; (8006cd4 <ai_platform_network_process+0xac>)
 8006c96:	2301      	movs	r3, #1
 8006c98:	6093      	str	r3, [r2, #8]
 8006c9a:	6893      	ldr	r3, [r2, #8]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1fc      	bne.n	8006c9a <ai_platform_network_process+0x72>
 8006ca0:	4b0d      	ldr	r3, [pc, #52]	; (8006cd8 <ai_platform_network_process+0xb0>)
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	4b0d      	ldr	r3, [pc, #52]	; (8006cdc <ai_platform_network_process+0xb4>)
 8006ca6:	6812      	ldr	r2, [r2, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d02a      	beq.n	8006d02 <ai_platform_network_process+0xda>
 8006cac:	e7fe      	b.n	8006cac <ai_platform_network_process+0x84>
 8006cae:	4a09      	ldr	r2, [pc, #36]	; (8006cd4 <ai_platform_network_process+0xac>)
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	6093      	str	r3, [r2, #8]
 8006cb4:	6893      	ldr	r3, [r2, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1fc      	bne.n	8006cb4 <ai_platform_network_process+0x8c>
 8006cba:	4b07      	ldr	r3, [pc, #28]	; (8006cd8 <ai_platform_network_process+0xb0>)
 8006cbc:	6013      	str	r3, [r2, #0]
 8006cbe:	4b07      	ldr	r3, [pc, #28]	; (8006cdc <ai_platform_network_process+0xb4>)
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d01d      	beq.n	8006d02 <ai_platform_network_process+0xda>
 8006cc6:	e7fe      	b.n	8006cc6 <ai_platform_network_process+0x9e>
 8006cc8:	a1c00100 	.word	0xa1c00100
 8006ccc:	e0042000 	.word	0xe0042000
 8006cd0:	5c001000 	.word	0x5c001000
 8006cd4:	40023000 	.word	0x40023000
 8006cd8:	f407a5c2 	.word	0xf407a5c2
 8006cdc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ce0:	4ab0      	ldr	r2, [pc, #704]	; (8006fa4 <ai_platform_network_process+0x37c>)
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006ce8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1fb      	bne.n	8006ce8 <ai_platform_network_process+0xc0>
 8006cf0:	4bad      	ldr	r3, [pc, #692]	; (8006fa8 <ai_platform_network_process+0x380>)
 8006cf2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006cf6:	4bad      	ldr	r3, [pc, #692]	; (8006fac <ai_platform_network_process+0x384>)
 8006cf8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	f040 812b 	bne.w	8006f58 <ai_platform_network_process+0x330>
 8006d02:	f7fe fdff 	bl	8005904 <_ai_platform_release_crc>
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	f000 8172 	beq.w	8006ff0 <ai_platform_network_process+0x3c8>
 8006d0c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8123 	beq.w	8006f5a <ai_platform_network_process+0x332>
 8006d14:	68eb      	ldr	r3, [r5, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8006d1c:	f003 0303 	and.w	r3, r3, #3
 8006d20:	616a      	str	r2, [r5, #20]
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	f040 811f 	bne.w	8006f66 <ai_platform_network_process+0x33e>
 8006d28:	2e00      	cmp	r6, #0
 8006d2a:	f000 8156 	beq.w	8006fda <ai_platform_network_process+0x3b2>
 8006d2e:	fab8 f788 	clz	r7, r8
 8006d32:	097f      	lsrs	r7, r7, #5
 8006d34:	f1b8 0f00 	cmp.w	r8, #0
 8006d38:	f000 814f 	beq.w	8006fda <ai_platform_network_process+0x3b2>
 8006d3c:	f8b8 3000 	ldrh.w	r3, [r8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 814a 	beq.w	8006fda <ai_platform_network_process+0x3b2>
 8006d46:	69b3      	ldr	r3, [r6, #24]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8006d4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d072      	beq.n	8006e3c <ai_platform_network_process+0x214>
 8006d56:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006d5a:	2c00      	cmp	r4, #0
 8006d5c:	d06e      	beq.n	8006e3c <ai_platform_network_process+0x214>
 8006d5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006d62:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006d66:	f8d3 a000 	ldr.w	sl, [r3]
 8006d6a:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006d6e:	f000 8133 	beq.w	8006fd8 <ai_platform_network_process+0x3b0>
 8006d72:	69a3      	ldr	r3, [r4, #24]
 8006d74:	2101      	movs	r1, #1
 8006d76:	4630      	mov	r0, r6
 8006d78:	685d      	ldr	r5, [r3, #4]
 8006d7a:	f7fe fd73 	bl	8005864 <ai_buffer_get_size>
 8006d7e:	4285      	cmp	r5, r0
 8006d80:	f0c0 8138 	bcc.w	8006ff4 <ai_platform_network_process+0x3cc>
 8006d84:	68e0      	ldr	r0, [r4, #12]
 8006d86:	69b1      	ldr	r1, [r6, #24]
 8006d88:	68c2      	ldr	r2, [r0, #12]
 8006d8a:	68cb      	ldr	r3, [r1, #12]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	f040 8131 	bne.w	8006ff4 <ai_platform_network_process+0x3cc>
 8006d92:	6882      	ldr	r2, [r0, #8]
 8006d94:	688b      	ldr	r3, [r1, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	f040 812c 	bne.w	8006ff4 <ai_platform_network_process+0x3cc>
 8006d9c:	6842      	ldr	r2, [r0, #4]
 8006d9e:	684b      	ldr	r3, [r1, #4]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	f040 8127 	bne.w	8006ff4 <ai_platform_network_process+0x3cc>
 8006da6:	69a3      	ldr	r3, [r4, #24]
 8006da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dac:	f001 fa76 	bl	800829c <ai_array_get_data_byte_size>
 8006db0:	4605      	mov	r5, r0
 8006db2:	4620      	mov	r0, r4
 8006db4:	f001 f9c8 	bl	8008148 <get_tensor_byte_size>
 8006db8:	4285      	cmp	r5, r0
 8006dba:	f0c0 811b 	bcc.w	8006ff4 <ai_platform_network_process+0x3cc>
 8006dbe:	69a3      	ldr	r3, [r4, #24]
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f001 f9d7 	bl	8008174 <ai_array_to_buffer_fmt>
 8006dc6:	6833      	ldr	r3, [r6, #0]
 8006dc8:	4058      	eors	r0, r3
 8006dca:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006dce:	f040 81ca 	bne.w	8007166 <ai_platform_network_process+0x53e>
 8006dd2:	6873      	ldr	r3, [r6, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 81bd 	beq.w	8007154 <ai_platform_network_process+0x52c>
 8006dda:	69b3      	ldr	r3, [r6, #24]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 81ca 	beq.w	8007178 <ai_platform_network_process+0x550>
 8006de4:	9a02      	ldr	r2, [sp, #8]
 8006de6:	4620      	mov	r0, r4
 8006de8:	3701      	adds	r7, #1
 8006dea:	361c      	adds	r6, #28
 8006dec:	429a      	cmp	r2, r3
 8006dee:	bf38      	it	cc
 8006df0:	461a      	movcc	r2, r3
 8006df2:	9202      	str	r2, [sp, #8]
 8006df4:	f001 f9a8 	bl	8008148 <get_tensor_byte_size>
 8006df8:	f8c9 0008 	str.w	r0, [r9, #8]
 8006dfc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	fb00 f303 	mul.w	r3, r0, r3
 8006e06:	f8c9 300c 	str.w	r3, [r9, #12]
 8006e0a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006e0e:	440b      	add	r3, r1
 8006e10:	f8c9 1004 	str.w	r1, [r9, #4]
 8006e14:	f84a 300b 	str.w	r3, [sl, fp]
 8006e18:	69a0      	ldr	r0, [r4, #24]
 8006e1a:	6803      	ldr	r3, [r0, #0]
 8006e1c:	009a      	lsls	r2, r3, #2
 8006e1e:	f100 80bb 	bmi.w	8006f98 <ai_platform_network_process+0x370>
 8006e22:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	4419      	add	r1, r3
 8006e2a:	6081      	str	r1, [r0, #8]
 8006e2c:	69a3      	ldr	r3, [r4, #24]
 8006e2e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006e32:	60da      	str	r2, [r3, #12]
 8006e34:	f8b8 3000 	ldrh.w	r3, [r8]
 8006e38:	42bb      	cmp	r3, r7
 8006e3a:	d888      	bhi.n	8006d4e <ai_platform_network_process+0x126>
 8006e3c:	9d03      	ldr	r5, [sp, #12]
 8006e3e:	9b01      	ldr	r3, [sp, #4]
 8006e40:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 81a1 	beq.w	800718a <ai_platform_network_process+0x562>
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	f240 817b 	bls.w	8007144 <ai_platform_network_process+0x51c>
 8006e4e:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006e52:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 8174 	beq.w	8007144 <ai_platform_network_process+0x51c>
 8006e5c:	9e01      	ldr	r6, [sp, #4]
 8006e5e:	2700      	movs	r7, #0
 8006e60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 80d3 	beq.w	8007010 <ai_platform_network_process+0x3e8>
 8006e6a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006e6e:	2c00      	cmp	r4, #0
 8006e70:	f000 80ce 	beq.w	8007010 <ai_platform_network_process+0x3e8>
 8006e74:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006e78:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006e7c:	f8d3 8000 	ldr.w	r8, [r3]
 8006e80:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006e84:	f000 819f 	beq.w	80071c6 <ai_platform_network_process+0x59e>
 8006e88:	69a3      	ldr	r3, [r4, #24]
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	f7fe fce7 	bl	8005864 <ai_buffer_get_size>
 8006e96:	9b01      	ldr	r3, [sp, #4]
 8006e98:	4283      	cmp	r3, r0
 8006e9a:	f0c0 8153 	bcc.w	8007144 <ai_platform_network_process+0x51c>
 8006e9e:	68e0      	ldr	r0, [r4, #12]
 8006ea0:	69b1      	ldr	r1, [r6, #24]
 8006ea2:	68c2      	ldr	r2, [r0, #12]
 8006ea4:	68cb      	ldr	r3, [r1, #12]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	f040 814c 	bne.w	8007144 <ai_platform_network_process+0x51c>
 8006eac:	6882      	ldr	r2, [r0, #8]
 8006eae:	688b      	ldr	r3, [r1, #8]
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	f040 8147 	bne.w	8007144 <ai_platform_network_process+0x51c>
 8006eb6:	6842      	ldr	r2, [r0, #4]
 8006eb8:	684b      	ldr	r3, [r1, #4]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	f040 8142 	bne.w	8007144 <ai_platform_network_process+0x51c>
 8006ec0:	69a3      	ldr	r3, [r4, #24]
 8006ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006ec6:	f001 f9e9 	bl	800829c <ai_array_get_data_byte_size>
 8006eca:	9001      	str	r0, [sp, #4]
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f001 f93b 	bl	8008148 <get_tensor_byte_size>
 8006ed2:	9b01      	ldr	r3, [sp, #4]
 8006ed4:	4283      	cmp	r3, r0
 8006ed6:	f0c0 8135 	bcc.w	8007144 <ai_platform_network_process+0x51c>
 8006eda:	69a3      	ldr	r3, [r4, #24]
 8006edc:	6818      	ldr	r0, [r3, #0]
 8006ede:	f001 f949 	bl	8008174 <ai_array_to_buffer_fmt>
 8006ee2:	6833      	ldr	r3, [r6, #0]
 8006ee4:	4058      	eors	r0, r3
 8006ee6:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006eea:	f040 815c 	bne.w	80071a6 <ai_platform_network_process+0x57e>
 8006eee:	6873      	ldr	r3, [r6, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	f000 8150 	beq.w	8007196 <ai_platform_network_process+0x56e>
 8006ef6:	69b3      	ldr	r3, [r6, #24]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	f000 815b 	beq.w	80071b6 <ai_platform_network_process+0x58e>
 8006f00:	9a02      	ldr	r2, [sp, #8]
 8006f02:	4620      	mov	r0, r4
 8006f04:	3701      	adds	r7, #1
 8006f06:	361c      	adds	r6, #28
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	bf38      	it	cc
 8006f0c:	461a      	movcc	r2, r3
 8006f0e:	9202      	str	r2, [sp, #8]
 8006f10:	f001 f91a 	bl	8008148 <get_tensor_byte_size>
 8006f14:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f18:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	fb00 f303 	mul.w	r3, r0, r3
 8006f22:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f26:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006f2a:	440b      	add	r3, r1
 8006f2c:	f8ca 1004 	str.w	r1, [sl, #4]
 8006f30:	f848 300b 	str.w	r3, [r8, fp]
 8006f34:	69a0      	ldr	r0, [r4, #24]
 8006f36:	6803      	ldr	r3, [r0, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	d464      	bmi.n	8007006 <ai_platform_network_process+0x3de>
 8006f3c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006f40:	1a9b      	subs	r3, r3, r2
 8006f42:	4419      	add	r1, r3
 8006f44:	6081      	str	r1, [r0, #8]
 8006f46:	69a3      	ldr	r3, [r4, #24]
 8006f48:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
 8006f4e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006f52:	429f      	cmp	r7, r3
 8006f54:	d384      	bcc.n	8006e60 <ai_platform_network_process+0x238>
 8006f56:	e05b      	b.n	8007010 <ai_platform_network_process+0x3e8>
 8006f58:	e7fe      	b.n	8006f58 <ai_platform_network_process+0x330>
 8006f5a:	68ea      	ldr	r2, [r5, #12]
 8006f5c:	616b      	str	r3, [r5, #20]
 8006f5e:	f002 0203 	and.w	r2, r2, #3
 8006f62:	2a03      	cmp	r2, #3
 8006f64:	d039      	beq.n	8006fda <ai_platform_network_process+0x3b2>
 8006f66:	2230      	movs	r2, #48	; 0x30
 8006f68:	2111      	movs	r1, #17
 8006f6a:	f105 0010 	add.w	r0, r5, #16
 8006f6e:	2400      	movs	r4, #0
 8006f70:	f000 f940 	bl	80071f4 <core_set_error>
 8006f74:	4620      	mov	r0, r4
 8006f76:	b005      	add	sp, #20
 8006f78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7c:	4a0c      	ldr	r2, [pc, #48]	; (8006fb0 <ai_platform_network_process+0x388>)
 8006f7e:	2301      	movs	r3, #1
 8006f80:	6093      	str	r3, [r2, #8]
 8006f82:	6893      	ldr	r3, [r2, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1fc      	bne.n	8006f82 <ai_platform_network_process+0x35a>
 8006f88:	4b07      	ldr	r3, [pc, #28]	; (8006fa8 <ai_platform_network_process+0x380>)
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <ai_platform_network_process+0x384>)
 8006f8e:	6812      	ldr	r2, [r2, #0]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	f43f aeb6 	beq.w	8006d02 <ai_platform_network_process+0xda>
 8006f96:	e7fe      	b.n	8006f96 <ai_platform_network_process+0x36e>
 8006f98:	f8b8 3000 	ldrh.w	r3, [r8]
 8006f9c:	429f      	cmp	r7, r3
 8006f9e:	f4ff aed6 	bcc.w	8006d4e <ai_platform_network_process+0x126>
 8006fa2:	e74b      	b.n	8006e3c <ai_platform_network_process+0x214>
 8006fa4:	58024000 	.word	0x58024000
 8006fa8:	f407a5c2 	.word	0xf407a5c2
 8006fac:	b5e8b5cd 	.word	0xb5e8b5cd
 8006fb0:	40023000 	.word	0x40023000
 8006fb4:	4a88      	ldr	r2, [pc, #544]	; (80071d8 <ai_platform_network_process+0x5b0>)
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fbc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1fb      	bne.n	8006fbc <ai_platform_network_process+0x394>
 8006fc4:	4b85      	ldr	r3, [pc, #532]	; (80071dc <ai_platform_network_process+0x5b4>)
 8006fc6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006fca:	4b85      	ldr	r3, [pc, #532]	; (80071e0 <ai_platform_network_process+0x5b8>)
 8006fcc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	f43f ae96 	beq.w	8006d02 <ai_platform_network_process+0xda>
 8006fd6:	e7fe      	b.n	8006fd6 <ai_platform_network_process+0x3ae>
 8006fd8:	9d03      	ldr	r5, [sp, #12]
 8006fda:	2400      	movs	r4, #0
 8006fdc:	2217      	movs	r2, #23
 8006fde:	2112      	movs	r1, #18
 8006fe0:	f105 0010 	add.w	r0, r5, #16
 8006fe4:	f000 f906 	bl	80071f4 <core_set_error>
 8006fe8:	4620      	mov	r0, r4
 8006fea:	b005      	add	sp, #20
 8006fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff0:	462c      	mov	r4, r5
 8006ff2:	e7bf      	b.n	8006f74 <ai_platform_network_process+0x34c>
 8006ff4:	9d03      	ldr	r5, [sp, #12]
 8006ff6:	2218      	movs	r2, #24
 8006ff8:	2112      	movs	r1, #18
 8006ffa:	2400      	movs	r4, #0
 8006ffc:	f105 0010 	add.w	r0, r5, #16
 8007000:	f000 f8f8 	bl	80071f4 <core_set_error>
 8007004:	e7b6      	b.n	8006f74 <ai_platform_network_process+0x34c>
 8007006:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800700a:	429f      	cmp	r7, r3
 800700c:	f4ff af28 	bcc.w	8006e60 <ai_platform_network_process+0x238>
 8007010:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007014:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007016:	82ab      	strh	r3, [r5, #20]
 8007018:	2a00      	cmp	r2, #0
 800701a:	f040 808d 	bne.w	8007138 <ai_platform_network_process+0x510>
 800701e:	4616      	mov	r6, r2
 8007020:	4617      	mov	r7, r2
 8007022:	8aec      	ldrh	r4, [r5, #22]
 8007024:	429c      	cmp	r4, r3
 8007026:	d2a5      	bcs.n	8006f74 <ai_platform_network_process+0x34c>
 8007028:	46ab      	mov	fp, r5
 800702a:	2e00      	cmp	r6, #0
 800702c:	d030      	beq.n	8007090 <ai_platform_network_process+0x468>
 800702e:	f04f 0800 	mov.w	r8, #0
 8007032:	e014      	b.n	800705e <ai_platform_network_process+0x436>
 8007034:	6882      	ldr	r2, [r0, #8]
 8007036:	68c5      	ldr	r5, [r0, #12]
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	1b52      	subs	r2, r2, r5
 800703c:	4413      	add	r3, r2
 800703e:	6083      	str	r3, [r0, #8]
 8007040:	698b      	ldr	r3, [r1, #24]
 8007042:	6862      	ldr	r2, [r4, #4]
 8007044:	60da      	str	r2, [r3, #12]
 8007046:	f859 200a 	ldr.w	r2, [r9, sl]
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007052:	440b      	add	r3, r1
 8007054:	4293      	cmp	r3, r2
 8007056:	d301      	bcc.n	800705c <ai_platform_network_process+0x434>
 8007058:	68e3      	ldr	r3, [r4, #12]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	6063      	str	r3, [r4, #4]
 800705e:	8833      	ldrh	r3, [r6, #0]
 8007060:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007064:	4543      	cmp	r3, r8
 8007066:	d913      	bls.n	8007090 <ai_platform_network_process+0x468>
 8007068:	6873      	ldr	r3, [r6, #4]
 800706a:	b18b      	cbz	r3, 8007090 <ai_platform_network_process+0x468>
 800706c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007070:	b171      	cbz	r1, 8007090 <ai_platform_network_process+0x468>
 8007072:	6988      	ldr	r0, [r1, #24]
 8007074:	68b2      	ldr	r2, [r6, #8]
 8007076:	6803      	ldr	r3, [r0, #0]
 8007078:	f8d2 9000 	ldr.w	r9, [r2]
 800707c:	009d      	lsls	r5, r3, #2
 800707e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007082:	d5d7      	bpl.n	8007034 <ai_platform_network_process+0x40c>
 8007084:	6880      	ldr	r0, [r0, #8]
 8007086:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800708a:	f001 f949 	bl	8008320 <memcpy>
 800708e:	e7da      	b.n	8007046 <ai_platform_network_process+0x41e>
 8007090:	4658      	mov	r0, fp
 8007092:	f000 fee3 	bl	8007e5c <ai_layers_forward_all>
 8007096:	2f00      	cmp	r7, #0
 8007098:	d03f      	beq.n	800711a <ai_platform_network_process+0x4f2>
 800709a:	2400      	movs	r4, #0
 800709c:	e016      	b.n	80070cc <ai_platform_network_process+0x4a4>
 800709e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80070a2:	f859 100a 	ldr.w	r1, [r9, sl]
 80070a6:	4413      	add	r3, r2
 80070a8:	428b      	cmp	r3, r1
 80070aa:	d302      	bcc.n	80070b2 <ai_platform_network_process+0x48a>
 80070ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80070b0:	1acb      	subs	r3, r1, r3
 80070b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80070b6:	6981      	ldr	r1, [r0, #24]
 80070b8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80070bc:	1b52      	subs	r2, r2, r5
 80070be:	4413      	add	r3, r2
 80070c0:	608b      	str	r3, [r1, #8]
 80070c2:	6983      	ldr	r3, [r0, #24]
 80070c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	3401      	adds	r4, #1
 80070cc:	883b      	ldrh	r3, [r7, #0]
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	d923      	bls.n	800711a <ai_platform_network_process+0x4f2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	b30b      	cbz	r3, 800711a <ai_platform_network_process+0x4f2>
 80070d6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80070da:	b1f0      	cbz	r0, 800711a <ai_platform_network_process+0x4f2>
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80070e2:	6983      	ldr	r3, [r0, #24]
 80070e4:	f8d2 9000 	ldr.w	r9, [r2]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	d5d5      	bpl.n	800709e <ai_platform_network_process+0x476>
 80070f2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80070f6:	6899      	ldr	r1, [r3, #8]
 80070f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80070fc:	f001 f910 	bl	8008320 <memcpy>
 8007100:	f859 200a 	ldr.w	r2, [r9, sl]
 8007104:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007108:	440b      	add	r3, r1
 800710a:	4293      	cmp	r3, r2
 800710c:	d302      	bcc.n	8007114 <ai_platform_network_process+0x4ec>
 800710e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	f8c8 3004 	str.w	r3, [r8, #4]
 8007118:	e7d7      	b.n	80070ca <ai_platform_network_process+0x4a2>
 800711a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800711e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007122:	3401      	adds	r4, #1
 8007124:	b2a4      	uxth	r4, r4
 8007126:	42a3      	cmp	r3, r4
 8007128:	f8ab 4016 	strh.w	r4, [fp, #22]
 800712c:	f63f af7d 	bhi.w	800702a <ai_platform_network_process+0x402>
 8007130:	4620      	mov	r0, r4
 8007132:	b005      	add	sp, #20
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007138:	2a01      	cmp	r2, #1
 800713a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800713c:	d029      	beq.n	8007192 <ai_platform_network_process+0x56a>
 800713e:	f106 070c 	add.w	r7, r6, #12
 8007142:	e76e      	b.n	8007022 <ai_platform_network_process+0x3fa>
 8007144:	2218      	movs	r2, #24
 8007146:	2113      	movs	r1, #19
 8007148:	f105 0010 	add.w	r0, r5, #16
 800714c:	2400      	movs	r4, #0
 800714e:	f000 f851 	bl	80071f4 <core_set_error>
 8007152:	e70f      	b.n	8006f74 <ai_platform_network_process+0x34c>
 8007154:	9d03      	ldr	r5, [sp, #12]
 8007156:	4604      	mov	r4, r0
 8007158:	2217      	movs	r2, #23
 800715a:	2112      	movs	r1, #18
 800715c:	f105 0010 	add.w	r0, r5, #16
 8007160:	f000 f848 	bl	80071f4 <core_set_error>
 8007164:	e706      	b.n	8006f74 <ai_platform_network_process+0x34c>
 8007166:	9d03      	ldr	r5, [sp, #12]
 8007168:	2219      	movs	r2, #25
 800716a:	2112      	movs	r1, #18
 800716c:	2400      	movs	r4, #0
 800716e:	f105 0010 	add.w	r0, r5, #16
 8007172:	f000 f83f 	bl	80071f4 <core_set_error>
 8007176:	e6fd      	b.n	8006f74 <ai_platform_network_process+0x34c>
 8007178:	9d03      	ldr	r5, [sp, #12]
 800717a:	4604      	mov	r4, r0
 800717c:	2221      	movs	r2, #33	; 0x21
 800717e:	2112      	movs	r1, #18
 8007180:	f105 0010 	add.w	r0, r5, #16
 8007184:	f000 f836 	bl	80071f4 <core_set_error>
 8007188:	e6f4      	b.n	8006f74 <ai_platform_network_process+0x34c>
 800718a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800718e:	82ab      	strh	r3, [r5, #20]
 8007190:	e742      	b.n	8007018 <ai_platform_network_process+0x3f0>
 8007192:	2700      	movs	r7, #0
 8007194:	e745      	b.n	8007022 <ai_platform_network_process+0x3fa>
 8007196:	4604      	mov	r4, r0
 8007198:	2217      	movs	r2, #23
 800719a:	2113      	movs	r1, #19
 800719c:	f105 0010 	add.w	r0, r5, #16
 80071a0:	f000 f828 	bl	80071f4 <core_set_error>
 80071a4:	e6e6      	b.n	8006f74 <ai_platform_network_process+0x34c>
 80071a6:	2219      	movs	r2, #25
 80071a8:	2113      	movs	r1, #19
 80071aa:	f105 0010 	add.w	r0, r5, #16
 80071ae:	2400      	movs	r4, #0
 80071b0:	f000 f820 	bl	80071f4 <core_set_error>
 80071b4:	e6de      	b.n	8006f74 <ai_platform_network_process+0x34c>
 80071b6:	4604      	mov	r4, r0
 80071b8:	2221      	movs	r2, #33	; 0x21
 80071ba:	2113      	movs	r1, #19
 80071bc:	f105 0010 	add.w	r0, r5, #16
 80071c0:	f000 f818 	bl	80071f4 <core_set_error>
 80071c4:	e6d6      	b.n	8006f74 <ai_platform_network_process+0x34c>
 80071c6:	2217      	movs	r2, #23
 80071c8:	2113      	movs	r1, #19
 80071ca:	f105 0010 	add.w	r0, r5, #16
 80071ce:	4654      	mov	r4, sl
 80071d0:	f000 f810 	bl	80071f4 <core_set_error>
 80071d4:	e6ce      	b.n	8006f74 <ai_platform_network_process+0x34c>
 80071d6:	bf00      	nop
 80071d8:	58024000 	.word	0x58024000
 80071dc:	f407a5c2 	.word	0xf407a5c2
 80071e0:	b5e8b5cd 	.word	0xb5e8b5cd

080071e4 <core_init>:
 80071e4:	2001      	movs	r0, #1
 80071e6:	4770      	bx	lr

080071e8 <core_get_error>:
 80071e8:	4603      	mov	r3, r0
 80071ea:	2200      	movs	r2, #0
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop

080071f4 <core_set_error>:
 80071f4:	4603      	mov	r3, r0
 80071f6:	7800      	ldrb	r0, [r0, #0]
 80071f8:	b108      	cbz	r0, 80071fe <core_set_error+0xa>
 80071fa:	2000      	movs	r0, #0
 80071fc:	4770      	bx	lr
 80071fe:	7019      	strb	r1, [r3, #0]
 8007200:	2001      	movs	r0, #1
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	f362 211f 	bfi	r1, r2, #8, #24
 8007208:	6019      	str	r1, [r3, #0]
 800720a:	4770      	bx	lr

0800720c <forward_dense>:
 800720c:	6983      	ldr	r3, [r0, #24]
 800720e:	881a      	ldrh	r2, [r3, #0]
 8007210:	2a00      	cmp	r2, #0
 8007212:	f000 80f0 	beq.w	80073f6 <forward_dense+0x1ea>
 8007216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	ed2d 8b02 	vpush	{d8}
 800721e:	6858      	ldr	r0, [r3, #4]
 8007220:	b09b      	sub	sp, #108	; 0x6c
 8007222:	6845      	ldr	r5, [r0, #4]
 8007224:	b105      	cbz	r5, 8007228 <forward_dense+0x1c>
 8007226:	682d      	ldr	r5, [r5, #0]
 8007228:	2a01      	cmp	r2, #1
 800722a:	f000 840a 	beq.w	8007a42 <forward_dense+0x836>
 800722e:	6906      	ldr	r6, [r0, #16]
 8007230:	b106      	cbz	r6, 8007234 <forward_dense+0x28>
 8007232:	6836      	ldr	r6, [r6, #0]
 8007234:	2a02      	cmp	r2, #2
 8007236:	f000 80e0 	beq.w	80073fa <forward_dense+0x1ee>
 800723a:	69c3      	ldr	r3, [r0, #28]
 800723c:	930d      	str	r3, [sp, #52]	; 0x34
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 83f1 	beq.w	8007a26 <forward_dense+0x81a>
 8007244:	4619      	mov	r1, r3
 8007246:	8b03      	ldrh	r3, [r0, #24]
 8007248:	6809      	ldr	r1, [r1, #0]
 800724a:	2b01      	cmp	r3, #1
 800724c:	910f      	str	r1, [sp, #60]	; 0x3c
 800724e:	f240 83ec 	bls.w	8007a2a <forward_dense+0x81e>
 8007252:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	930d      	str	r3, [sp, #52]	; 0x34
 8007258:	460b      	mov	r3, r1
 800725a:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800725e:	2a03      	cmp	r2, #3
 8007260:	68eb      	ldr	r3, [r5, #12]
 8007262:	68f7      	ldr	r7, [r6, #12]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	687c      	ldr	r4, [r7, #4]
 8007268:	9317      	str	r3, [sp, #92]	; 0x5c
 800726a:	f8d8 3000 	ldr.w	r3, [r8]
 800726e:	4621      	mov	r1, r4
 8007270:	9419      	str	r4, [sp, #100]	; 0x64
 8007272:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007276:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800727a:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 800727e:	fb01 f404 	mul.w	r4, r1, r4
 8007282:	fa4e f10c 	asr.w	r1, lr, ip
 8007286:	9116      	str	r1, [sp, #88]	; 0x58
 8007288:	f000 83d8 	beq.w	8007a3c <forward_dense+0x830>
 800728c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800728e:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007292:	2a00      	cmp	r2, #0
 8007294:	f000 83c2 	beq.w	8007a1c <forward_dense+0x810>
 8007298:	6812      	ldr	r2, [r2, #0]
 800729a:	2a00      	cmp	r2, #0
 800729c:	f000 83be 	beq.w	8007a1c <forward_dense+0x810>
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80072a6:	f000 83a8 	beq.w	80079fa <forward_dense+0x7ee>
 80072aa:	2b08      	cmp	r3, #8
 80072ac:	f000 83a5 	beq.w	80079fa <forward_dense+0x7ee>
 80072b0:	f04f 0a00 	mov.w	sl, #0
 80072b4:	69ab      	ldr	r3, [r5, #24]
 80072b6:	fb07 f404 	mul.w	r4, r7, r4
 80072ba:	69b2      	ldr	r2, [r6, #24]
 80072bc:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80072c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072c2:	6892      	ldr	r2, [r2, #8]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80072ca:	9206      	str	r2, [sp, #24]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	428a      	cmp	r2, r1
 80072d0:	9110      	str	r1, [sp, #64]	; 0x40
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072d6:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80072da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80072de:	900e      	str	r0, [sp, #56]	; 0x38
 80072e0:	9303      	str	r3, [sp, #12]
 80072e2:	f080 8380 	bcs.w	80079e6 <forward_dense+0x7da>
 80072e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072e8:	4654      	mov	r4, sl
 80072ea:	4bb9      	ldr	r3, [pc, #740]	; (80075d0 <forward_dense+0x3c4>)
 80072ec:	46ca      	mov	sl, r9
 80072ee:	08d0      	lsrs	r0, r2, #3
 80072f0:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80075d4 <forward_dense+0x3c8>
 80072f4:	4413      	add	r3, r2
 80072f6:	9009      	str	r0, [sp, #36]	; 0x24
 80072f8:	0099      	lsls	r1, r3, #2
 80072fa:	f022 0301 	bic.w	r3, r2, #1
 80072fe:	f002 0201 	and.w	r2, r2, #1
 8007302:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007306:	9118      	str	r1, [sp, #96]	; 0x60
 8007308:	920a      	str	r2, [sp, #40]	; 0x28
 800730a:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800730e:	9305      	str	r3, [sp, #20]
 8007310:	f101 0320 	add.w	r3, r1, #32
 8007314:	9207      	str	r2, [sp, #28]
 8007316:	9311      	str	r3, [sp, #68]	; 0x44
 8007318:	444b      	add	r3, r9
 800731a:	469b      	mov	fp, r3
 800731c:	930b      	str	r3, [sp, #44]	; 0x2c
 800731e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007326:	b10b      	cbz	r3, 800732c <forward_dense+0x120>
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	2c00      	cmp	r4, #0
 800732e:	f000 834b 	beq.w	80079c8 <forward_dense+0x7bc>
 8007332:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007334:	2904      	cmp	r1, #4
 8007336:	f000 826a 	beq.w	800780e <forward_dense+0x602>
 800733a:	9903      	ldr	r1, [sp, #12]
 800733c:	9806      	ldr	r0, [sp, #24]
 800733e:	4281      	cmp	r1, r0
 8007340:	f240 8356 	bls.w	80079f0 <forward_dense+0x7e4>
 8007344:	4686      	mov	lr, r0
 8007346:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007348:	eb00 090a 	add.w	r9, r0, sl
 800734c:	0941      	lsrs	r1, r0, #5
 800734e:	f10a 0004 	add.w	r0, sl, #4
 8007352:	f8cd 9020 	str.w	r9, [sp, #32]
 8007356:	9012      	str	r0, [sp, #72]	; 0x48
 8007358:	1c48      	adds	r0, r1, #1
 800735a:	00c9      	lsls	r1, r1, #3
 800735c:	3110      	adds	r1, #16
 800735e:	9115      	str	r1, [sp, #84]	; 0x54
 8007360:	00c1      	lsls	r1, r0, #3
 8007362:	9113      	str	r1, [sp, #76]	; 0x4c
 8007364:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8007368:	9114      	str	r1, [sp, #80]	; 0x50
 800736a:	f1a9 0104 	sub.w	r1, r9, #4
 800736e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8007372:	910c      	str	r1, [sp, #48]	; 0x30
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8128 	beq.w	80075ca <forward_dense+0x3be>
 800737a:	ecb3 5a01 	vldmia	r3!, {s10}
 800737e:	f1b9 0f07 	cmp.w	r9, #7
 8007382:	d83d      	bhi.n	8007400 <forward_dense+0x1f4>
 8007384:	45da      	cmp	sl, fp
 8007386:	d211      	bcs.n	80073ac <forward_dense+0x1a0>
 8007388:	eddf 7a92 	vldr	s15, [pc, #584]	; 80075d4 <forward_dense+0x3c8>
 800738c:	4650      	mov	r0, sl
 800738e:	4615      	mov	r5, r2
 8007390:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007394:	ecb0 7a01 	vldmia	r0!, {s14}
 8007398:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800739c:	4558      	cmp	r0, fp
 800739e:	edd1 6a00 	vldr	s13, [r1]
 80073a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073a6:	d3f3      	bcc.n	8007390 <forward_dense+0x184>
 80073a8:	ee35 5a27 	vadd.f32	s10, s10, s15
 80073ac:	9904      	ldr	r1, [sp, #16]
 80073ae:	ecae 5a01 	vstmia	lr!, {s10}
 80073b2:	440a      	add	r2, r1
 80073b4:	9903      	ldr	r1, [sp, #12]
 80073b6:	458e      	cmp	lr, r1
 80073b8:	d3dc      	bcc.n	8007374 <forward_dense+0x168>
 80073ba:	9a06      	ldr	r2, [sp, #24]
 80073bc:	1a8b      	subs	r3, r1, r2
 80073be:	3b01      	subs	r3, #1
 80073c0:	f023 0303 	bic.w	r3, r3, #3
 80073c4:	3304      	adds	r3, #4
 80073c6:	18d3      	adds	r3, r2, r3
 80073c8:	4619      	mov	r1, r3
 80073ca:	9306      	str	r3, [sp, #24]
 80073cc:	9b03      	ldr	r3, [sp, #12]
 80073ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073d2:	4413      	add	r3, r2
 80073d4:	9a07      	ldr	r2, [sp, #28]
 80073d6:	4281      	cmp	r1, r0
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80073dc:	441a      	add	r2, r3
 80073de:	449b      	add	fp, r3
 80073e0:	9207      	str	r2, [sp, #28]
 80073e2:	9a05      	ldr	r2, [sp, #20]
 80073e4:	441a      	add	r2, r3
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ea:	4692      	mov	sl, r2
 80073ec:	f080 82fb 	bcs.w	80079e6 <forward_dense+0x7da>
 80073f0:	441a      	add	r2, r3
 80073f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80073f4:	e793      	b.n	800731e <forward_dense+0x112>
 80073f6:	6853      	ldr	r3, [r2, #4]
 80073f8:	deff      	udf	#255	; 0xff
 80073fa:	2300      	movs	r3, #0
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	deff      	udf	#255	; 0xff
 8007400:	f002 0103 	and.w	r1, r2, #3
 8007404:	2902      	cmp	r1, #2
 8007406:	f000 81e6 	beq.w	80077d6 <forward_dense+0x5ca>
 800740a:	2903      	cmp	r1, #3
 800740c:	f000 80e4 	beq.w	80075d8 <forward_dense+0x3cc>
 8007410:	2901      	cmp	r1, #1
 8007412:	f000 81ef 	beq.w	80077f4 <forward_dense+0x5e8>
 8007416:	9908      	ldr	r1, [sp, #32]
 8007418:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80075d4 <forward_dense+0x3c8>
 800741c:	458a      	cmp	sl, r1
 800741e:	f200 82e9 	bhi.w	80079f4 <forward_dense+0x7e8>
 8007422:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007424:	f102 0108 	add.w	r1, r2, #8
 8007428:	f10a 0020 	add.w	r0, sl, #32
 800742c:	18ae      	adds	r6, r5, r2
 800742e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007432:	3108      	adds	r1, #8
 8007434:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007438:	3020      	adds	r0, #32
 800743a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800743e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007442:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007446:	edd5 7a00 	vldr	s15, [r5]
 800744a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800744e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007452:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007456:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800745a:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 800745e:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007462:	edd5 2a00 	vldr	s5, [r5]
 8007466:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800746a:	eee2 7a83 	vfma.f32	s15, s5, s6
 800746e:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007472:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007476:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800747a:	ed95 3a00 	vldr	s6, [r5]
 800747e:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007482:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007486:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800748a:	edd5 3a00 	vldr	s7, [r5]
 800748e:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007492:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007496:	eee3 7a84 	vfma.f32	s15, s7, s8
 800749a:	ed95 4a00 	vldr	s8, [r5]
 800749e:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80074a2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074a6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074aa:	edd5 4a00 	vldr	s9, [r5]
 80074ae:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80074b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074b6:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80074ba:	edd5 5a00 	vldr	s11, [r5]
 80074be:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80074c2:	428e      	cmp	r6, r1
 80074c4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074c8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80074cc:	ed95 6a00 	vldr	s12, [r5]
 80074d0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80074d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074d8:	d1a9      	bne.n	800742e <forward_dense+0x222>
 80074da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80074dc:	1850      	adds	r0, r2, r1
 80074de:	9914      	ldr	r1, [sp, #80]	; 0x50
 80074e0:	4559      	cmp	r1, fp
 80074e2:	d26f      	bcs.n	80075c4 <forward_dense+0x3b8>
 80074e4:	7805      	ldrb	r5, [r0, #0]
 80074e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074ea:	edd5 7a00 	vldr	s15, [r5]
 80074ee:	460d      	mov	r5, r1
 80074f0:	ecf5 6a01 	vldmia	r5!, {s13}
 80074f4:	45ab      	cmp	fp, r5
 80074f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80074fa:	d963      	bls.n	80075c4 <forward_dense+0x3b8>
 80074fc:	7845      	ldrb	r5, [r0, #1]
 80074fe:	edd1 6a01 	vldr	s13, [r1, #4]
 8007502:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007506:	edd5 7a00 	vldr	s15, [r5]
 800750a:	f101 0508 	add.w	r5, r1, #8
 800750e:	45ab      	cmp	fp, r5
 8007510:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007514:	d956      	bls.n	80075c4 <forward_dense+0x3b8>
 8007516:	7885      	ldrb	r5, [r0, #2]
 8007518:	edd1 6a02 	vldr	s13, [r1, #8]
 800751c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007520:	edd5 7a00 	vldr	s15, [r5]
 8007524:	f101 050c 	add.w	r5, r1, #12
 8007528:	45ab      	cmp	fp, r5
 800752a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800752e:	d949      	bls.n	80075c4 <forward_dense+0x3b8>
 8007530:	78c5      	ldrb	r5, [r0, #3]
 8007532:	edd1 6a03 	vldr	s13, [r1, #12]
 8007536:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800753a:	edd5 7a00 	vldr	s15, [r5]
 800753e:	f101 0510 	add.w	r5, r1, #16
 8007542:	45ab      	cmp	fp, r5
 8007544:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007548:	d93c      	bls.n	80075c4 <forward_dense+0x3b8>
 800754a:	7905      	ldrb	r5, [r0, #4]
 800754c:	edd1 6a04 	vldr	s13, [r1, #16]
 8007550:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007554:	edd5 7a00 	vldr	s15, [r5]
 8007558:	f101 0514 	add.w	r5, r1, #20
 800755c:	45ab      	cmp	fp, r5
 800755e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007562:	d92f      	bls.n	80075c4 <forward_dense+0x3b8>
 8007564:	7945      	ldrb	r5, [r0, #5]
 8007566:	edd1 6a05 	vldr	s13, [r1, #20]
 800756a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800756e:	edd5 7a00 	vldr	s15, [r5]
 8007572:	f101 0518 	add.w	r5, r1, #24
 8007576:	45ab      	cmp	fp, r5
 8007578:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800757c:	d922      	bls.n	80075c4 <forward_dense+0x3b8>
 800757e:	7985      	ldrb	r5, [r0, #6]
 8007580:	edd1 6a06 	vldr	s13, [r1, #24]
 8007584:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007588:	edd5 7a00 	vldr	s15, [r5]
 800758c:	f101 051c 	add.w	r5, r1, #28
 8007590:	45ab      	cmp	fp, r5
 8007592:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007596:	d915      	bls.n	80075c4 <forward_dense+0x3b8>
 8007598:	79c5      	ldrb	r5, [r0, #7]
 800759a:	edd1 6a07 	vldr	s13, [r1, #28]
 800759e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075a2:	edd5 7a00 	vldr	s15, [r5]
 80075a6:	f101 0520 	add.w	r5, r1, #32
 80075aa:	45ab      	cmp	fp, r5
 80075ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075b0:	d908      	bls.n	80075c4 <forward_dense+0x3b8>
 80075b2:	edd1 7a08 	vldr	s15, [r1, #32]
 80075b6:	7a01      	ldrb	r1, [r0, #8]
 80075b8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80075bc:	edd1 6a00 	vldr	s13, [r1]
 80075c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075c4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80075c8:	e6f0      	b.n	80073ac <forward_dense+0x1a0>
 80075ca:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80075d4 <forward_dense+0x3c8>
 80075ce:	e6d6      	b.n	800737e <forward_dense+0x172>
 80075d0:	3ffffff8 	.word	0x3ffffff8
 80075d4:	00000000 	.word	0x00000000
 80075d8:	eeb0 7a48 	vmov.f32	s14, s16
 80075dc:	4650      	mov	r0, sl
 80075de:	4611      	mov	r1, r2
 80075e0:	468c      	mov	ip, r1
 80075e2:	4606      	mov	r6, r0
 80075e4:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80075e8:	ecf6 7a01 	vldmia	r6!, {s15}
 80075ec:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075f0:	edd5 6a00 	vldr	s13, [r5]
 80075f4:	9d08      	ldr	r5, [sp, #32]
 80075f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075fa:	42ae      	cmp	r6, r5
 80075fc:	d866      	bhi.n	80076cc <forward_dense+0x4c0>
 80075fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007600:	f101 0711 	add.w	r7, r1, #17
 8007604:	3109      	adds	r1, #9
 8007606:	eba5 0800 	sub.w	r8, r5, r0
 800760a:	3024      	adds	r0, #36	; 0x24
 800760c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007610:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007614:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007618:	3108      	adds	r1, #8
 800761a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800761e:	3020      	adds	r0, #32
 8007620:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007624:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007628:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800762c:	edd5 7a00 	vldr	s15, [r5]
 8007630:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007634:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007638:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800763c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007640:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8007644:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007648:	edd5 2a00 	vldr	s5, [r5]
 800764c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8007650:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007654:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007658:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800765c:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8007660:	ed95 3a00 	vldr	s6, [r5]
 8007664:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007668:	eee3 7a23 	vfma.f32	s15, s6, s7
 800766c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007670:	edd5 3a00 	vldr	s7, [r5]
 8007674:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007678:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800767c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007680:	ed95 4a00 	vldr	s8, [r5]
 8007684:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007688:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800768c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007690:	edd5 4a00 	vldr	s9, [r5]
 8007694:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007698:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800769c:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80076a0:	edd5 5a00 	vldr	s11, [r5]
 80076a4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80076a8:	428f      	cmp	r7, r1
 80076aa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80076b2:	ed95 6a00 	vldr	s12, [r5]
 80076b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80076ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80076be:	d1a9      	bne.n	8007614 <forward_dense+0x408>
 80076c0:	f108 0801 	add.w	r8, r8, #1
 80076c4:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 80076c8:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80076cc:	455e      	cmp	r6, fp
 80076ce:	f4bf af79 	bcs.w	80075c4 <forward_dense+0x3b8>
 80076d2:	f89c 1000 	ldrb.w	r1, [ip]
 80076d6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80076da:	edd1 7a00 	vldr	s15, [r1]
 80076de:	4631      	mov	r1, r6
 80076e0:	ecf1 6a01 	vldmia	r1!, {s13}
 80076e4:	458b      	cmp	fp, r1
 80076e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80076ea:	f67f af6b 	bls.w	80075c4 <forward_dense+0x3b8>
 80076ee:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80076f2:	edd6 6a01 	vldr	s13, [r6, #4]
 80076f6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80076fa:	edd1 7a00 	vldr	s15, [r1]
 80076fe:	f106 0108 	add.w	r1, r6, #8
 8007702:	458b      	cmp	fp, r1
 8007704:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007708:	f67f af5c 	bls.w	80075c4 <forward_dense+0x3b8>
 800770c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8007710:	edd6 6a02 	vldr	s13, [r6, #8]
 8007714:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007718:	edd1 7a00 	vldr	s15, [r1]
 800771c:	f106 010c 	add.w	r1, r6, #12
 8007720:	458b      	cmp	fp, r1
 8007722:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007726:	f67f af4d 	bls.w	80075c4 <forward_dense+0x3b8>
 800772a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800772e:	edd6 6a03 	vldr	s13, [r6, #12]
 8007732:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007736:	edd1 7a00 	vldr	s15, [r1]
 800773a:	f106 0110 	add.w	r1, r6, #16
 800773e:	458b      	cmp	fp, r1
 8007740:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007744:	f67f af3e 	bls.w	80075c4 <forward_dense+0x3b8>
 8007748:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800774c:	edd6 6a04 	vldr	s13, [r6, #16]
 8007750:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007754:	edd1 7a00 	vldr	s15, [r1]
 8007758:	f106 0114 	add.w	r1, r6, #20
 800775c:	458b      	cmp	fp, r1
 800775e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007762:	f67f af2f 	bls.w	80075c4 <forward_dense+0x3b8>
 8007766:	f89c 1005 	ldrb.w	r1, [ip, #5]
 800776a:	edd6 6a05 	vldr	s13, [r6, #20]
 800776e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007772:	edd1 7a00 	vldr	s15, [r1]
 8007776:	f106 0118 	add.w	r1, r6, #24
 800777a:	458b      	cmp	fp, r1
 800777c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007780:	f67f af20 	bls.w	80075c4 <forward_dense+0x3b8>
 8007784:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8007788:	edd6 6a06 	vldr	s13, [r6, #24]
 800778c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007790:	edd1 7a00 	vldr	s15, [r1]
 8007794:	f106 011c 	add.w	r1, r6, #28
 8007798:	458b      	cmp	fp, r1
 800779a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800779e:	f67f af11 	bls.w	80075c4 <forward_dense+0x3b8>
 80077a2:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80077a6:	edd6 6a07 	vldr	s13, [r6, #28]
 80077aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077ae:	edd1 7a00 	vldr	s15, [r1]
 80077b2:	f106 0120 	add.w	r1, r6, #32
 80077b6:	458b      	cmp	fp, r1
 80077b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077bc:	f67f af02 	bls.w	80075c4 <forward_dense+0x3b8>
 80077c0:	f89c 1008 	ldrb.w	r1, [ip, #8]
 80077c4:	edd6 7a08 	vldr	s15, [r6, #32]
 80077c8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077cc:	edd1 6a00 	vldr	s13, [r1]
 80077d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077d4:	e6f6      	b.n	80075c4 <forward_dense+0x3b8>
 80077d6:	eeb0 7a48 	vmov.f32	s14, s16
 80077da:	4650      	mov	r0, sl
 80077dc:	4611      	mov	r1, r2
 80077de:	f811 5b01 	ldrb.w	r5, [r1], #1
 80077e2:	ecf0 7a01 	vldmia	r0!, {s15}
 80077e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80077ea:	edd5 6a00 	vldr	s13, [r5]
 80077ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077f2:	e6f5      	b.n	80075e0 <forward_dense+0x3d4>
 80077f4:	4611      	mov	r1, r2
 80077f6:	edda 7a00 	vldr	s15, [sl]
 80077fa:	9812      	ldr	r0, [sp, #72]	; 0x48
 80077fc:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007800:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007804:	ed95 7a00 	vldr	s14, [r5]
 8007808:	ee27 7a27 	vmul.f32	s14, s14, s15
 800780c:	e7e7      	b.n	80077de <forward_dense+0x5d2>
 800780e:	9803      	ldr	r0, [sp, #12]
 8007810:	9906      	ldr	r1, [sp, #24]
 8007812:	4288      	cmp	r0, r1
 8007814:	f67f adda 	bls.w	80073cc <forward_dense+0x1c0>
 8007818:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800781e:	468b      	mov	fp, r1
 8007820:	f100 0c01 	add.w	ip, r0, #1
 8007824:	9805      	ldr	r0, [sp, #20]
 8007826:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800782a:	3801      	subs	r0, #1
 800782c:	9008      	str	r0, [sp, #32]
 800782e:	2b00      	cmp	r3, #0
 8007830:	f000 80bf 	beq.w	80079b2 <forward_dense+0x7a6>
 8007834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007836:	ecf3 2a01 	vldmia	r3!, {s5}
 800783a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80075d4 <forward_dense+0x3c8>
 800783e:	2900      	cmp	r1, #0
 8007840:	f000 80bf 	beq.w	80079c2 <forward_dense+0x7b6>
 8007844:	1d10      	adds	r0, r2, #4
 8007846:	f10a 0120 	add.w	r1, sl, #32
 800784a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800784e:	3004      	adds	r0, #4
 8007850:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007854:	3120      	adds	r1, #32
 8007856:	f007 0e0f 	and.w	lr, r7, #15
 800785a:	093f      	lsrs	r7, r7, #4
 800785c:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8007860:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8007864:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8007868:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800786c:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8007870:	edde 7a00 	vldr	s15, [lr]
 8007874:	ed97 3a00 	vldr	s6, [r7]
 8007878:	0937      	lsrs	r7, r6, #4
 800787a:	ee67 7a82 	vmul.f32	s15, s15, s4
 800787e:	f006 060f 	and.w	r6, r6, #15
 8007882:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007886:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800788a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800788e:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8007892:	eee3 7a04 	vfma.f32	s15, s6, s8
 8007896:	ed97 3a00 	vldr	s6, [r7]
 800789a:	ed96 4a00 	vldr	s8, [r6]
 800789e:	092e      	lsrs	r6, r5, #4
 80078a0:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80078a4:	f005 050f 	and.w	r5, r5, #15
 80078a8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078ac:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 80078b0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078b4:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80078b8:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80078bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80078c0:	eee4 7a05 	vfma.f32	s15, s8, s10
 80078c4:	ed96 4a00 	vldr	s8, [r6]
 80078c8:	ed95 5a00 	vldr	s10, [r5]
 80078cc:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80078d0:	4560      	cmp	r0, ip
 80078d2:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80078d6:	f005 050f 	and.w	r5, r5, #15
 80078da:	eee4 7a24 	vfma.f32	s15, s8, s9
 80078de:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80078e6:	eee5 7a06 	vfma.f32	s15, s10, s12
 80078ea:	ed96 5a00 	vldr	s10, [r6]
 80078ee:	ed95 6a00 	vldr	s12, [r5]
 80078f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80078f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80078fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078fe:	d1a4      	bne.n	800784a <forward_dense+0x63e>
 8007900:	f1ac 0804 	sub.w	r8, ip, #4
 8007904:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8007908:	9905      	ldr	r1, [sp, #20]
 800790a:	458e      	cmp	lr, r1
 800790c:	d229      	bcs.n	8007962 <forward_dense+0x756>
 800790e:	9908      	ldr	r1, [sp, #32]
 8007910:	f10e 0008 	add.w	r0, lr, #8
 8007914:	f108 36ff 	add.w	r6, r8, #4294967295
 8007918:	eba1 070e 	sub.w	r7, r1, lr
 800791c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8007920:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007924:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007928:	3008      	adds	r0, #8
 800792a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800792e:	f001 050f 	and.w	r5, r1, #15
 8007932:	0909      	lsrs	r1, r1, #4
 8007934:	ed50 6a04 	vldr	s13, [r0, #-16]
 8007938:	42b7      	cmp	r7, r6
 800793a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800793e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007942:	edd5 7a00 	vldr	s15, [r5]
 8007946:	ed91 6a00 	vldr	s12, [r1]
 800794a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800794e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007952:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007956:	d1e5      	bne.n	8007924 <forward_dense+0x718>
 8007958:	f109 0901 	add.w	r9, r9, #1
 800795c:	44c8      	add	r8, r9
 800795e:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8007962:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007964:	b1c1      	cbz	r1, 8007998 <forward_dense+0x78c>
 8007966:	f898 1000 	ldrb.w	r1, [r8]
 800796a:	edde 7a00 	vldr	s15, [lr]
 800796e:	0909      	lsrs	r1, r1, #4
 8007970:	9804      	ldr	r0, [sp, #16]
 8007972:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007976:	4402      	add	r2, r0
 8007978:	4484      	add	ip, r0
 800797a:	edd1 6a00 	vldr	s13, [r1]
 800797e:	9903      	ldr	r1, [sp, #12]
 8007980:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007984:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007988:	eceb 2a01 	vstmia	fp!, {s5}
 800798c:	4559      	cmp	r1, fp
 800798e:	f63f af4e 	bhi.w	800782e <forward_dense+0x622>
 8007992:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8007996:	e510      	b.n	80073ba <forward_dense+0x1ae>
 8007998:	9904      	ldr	r1, [sp, #16]
 800799a:	ee32 7a87 	vadd.f32	s14, s5, s14
 800799e:	440a      	add	r2, r1
 80079a0:	448c      	add	ip, r1
 80079a2:	9903      	ldr	r1, [sp, #12]
 80079a4:	ecab 7a01 	vstmia	fp!, {s14}
 80079a8:	458b      	cmp	fp, r1
 80079aa:	d2f2      	bcs.n	8007992 <forward_dense+0x786>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f47f af41 	bne.w	8007834 <forward_dense+0x628>
 80079b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079b4:	eef0 2a48 	vmov.f32	s5, s16
 80079b8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007a48 <forward_dense+0x83c>
 80079bc:	2900      	cmp	r1, #0
 80079be:	f47f af41 	bne.w	8007844 <forward_dense+0x638>
 80079c2:	46d6      	mov	lr, sl
 80079c4:	4690      	mov	r8, r2
 80079c6:	e79f      	b.n	8007908 <forward_dense+0x6fc>
 80079c8:	9819      	ldr	r0, [sp, #100]	; 0x64
 80079ca:	4651      	mov	r1, sl
 80079cc:	9d06      	ldr	r5, [sp, #24]
 80079ce:	9001      	str	r0, [sp, #4]
 80079d0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80079d2:	9000      	str	r0, [sp, #0]
 80079d4:	4628      	mov	r0, r5
 80079d6:	f000 fa89 	bl	8007eec <lite_dense_if32of32wf32>
 80079da:	462b      	mov	r3, r5
 80079dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079de:	4413      	add	r3, r2
 80079e0:	4619      	mov	r1, r3
 80079e2:	9306      	str	r3, [sp, #24]
 80079e4:	e4f2      	b.n	80073cc <forward_dense+0x1c0>
 80079e6:	b01b      	add	sp, #108	; 0x6c
 80079e8:	ecbd 8b02 	vpop	{d8}
 80079ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f0:	4601      	mov	r1, r0
 80079f2:	e4eb      	b.n	80073cc <forward_dense+0x1c0>
 80079f4:	4651      	mov	r1, sl
 80079f6:	4610      	mov	r0, r2
 80079f8:	e572      	b.n	80074e0 <forward_dense+0x2d4>
 80079fa:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d016      	beq.n	8007a32 <forward_dense+0x826>
 8007a04:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007a08:	f000 fc20 	bl	800824c <ai_array_get_byte_size>
 8007a0c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8007a10:	4602      	mov	r2, r0
 8007a12:	4641      	mov	r1, r8
 8007a14:	4650      	mov	r0, sl
 8007a16:	f000 fc83 	bl	8008320 <memcpy>
 8007a1a:	e44b      	b.n	80072b4 <forward_dense+0xa8>
 8007a1c:	2b04      	cmp	r3, #4
 8007a1e:	d00a      	beq.n	8007a36 <forward_dense+0x82a>
 8007a20:	f04f 0900 	mov.w	r9, #0
 8007a24:	e441      	b.n	80072aa <forward_dense+0x9e>
 8007a26:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a28:	e417      	b.n	800725a <forward_dense+0x4e>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a2e:	460b      	mov	r3, r1
 8007a30:	e413      	b.n	800725a <forward_dense+0x4e>
 8007a32:	46c2      	mov	sl, r8
 8007a34:	e43e      	b.n	80072b4 <forward_dense+0xa8>
 8007a36:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8007a3a:	e43b      	b.n	80072b4 <forward_dense+0xa8>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	deff      	udf	#255	; 0xff
 8007a42:	2300      	movs	r3, #0
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	deff      	udf	#255	; 0xff
 8007a48:	00000000 	.word	0x00000000

08007a4c <forward_relu>:
 8007a4c:	6982      	ldr	r2, [r0, #24]
 8007a4e:	8813      	ldrh	r3, [r2, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d05b      	beq.n	8007b0c <forward_relu+0xc0>
 8007a54:	6851      	ldr	r1, [r2, #4]
 8007a56:	684a      	ldr	r2, [r1, #4]
 8007a58:	b102      	cbz	r2, 8007a5c <forward_relu+0x10>
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	f000 8123 	beq.w	8007ca8 <forward_relu+0x25c>
 8007a62:	b470      	push	{r4, r5, r6}
 8007a64:	690b      	ldr	r3, [r1, #16]
 8007a66:	b103      	cbz	r3, 8007a6a <forward_relu+0x1e>
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	69c6      	ldr	r6, [r0, #28]
 8007a6c:	2e00      	cmp	r6, #0
 8007a6e:	f000 809e 	beq.w	8007bae <forward_relu+0x162>
 8007a72:	6871      	ldr	r1, [r6, #4]
 8007a74:	6998      	ldr	r0, [r3, #24]
 8007a76:	2901      	cmp	r1, #1
 8007a78:	f000 80c3 	beq.w	8007c02 <forward_relu+0x1b6>
 8007a7c:	6893      	ldr	r3, [r2, #8]
 8007a7e:	6991      	ldr	r1, [r2, #24]
 8007a80:	0a1b      	lsrs	r3, r3, #8
 8007a82:	6880      	ldr	r0, [r0, #8]
 8007a84:	688d      	ldr	r5, [r1, #8]
 8007a86:	f000 80f2 	beq.w	8007c6e <forward_relu+0x222>
 8007a8a:	68d4      	ldr	r4, [r2, #12]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	fb01 f202 	mul.w	r2, r1, r2
 8007a9c:	d1f9      	bne.n	8007a92 <forward_relu+0x46>
 8007a9e:	68b3      	ldr	r3, [r6, #8]
 8007aa0:	ed93 7a02 	vldr	s14, [r3, #8]
 8007aa4:	edd3 6a00 	vldr	s13, [r3]
 8007aa8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007aac:	ed93 6a01 	vldr	s12, [r3, #4]
 8007ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab4:	d42c      	bmi.n	8007b10 <forward_relu+0xc4>
 8007ab6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007aba:	4413      	add	r3, r2
 8007abc:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8007ac0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007ac4:	4295      	cmp	r5, r2
 8007ac6:	d81f      	bhi.n	8007b08 <forward_relu+0xbc>
 8007ac8:	3204      	adds	r2, #4
 8007aca:	1d01      	adds	r1, r0, #4
 8007acc:	e00d      	b.n	8007aea <forward_relu+0x9e>
 8007ace:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad6:	db03      	blt.n	8007ae0 <forward_relu+0x94>
 8007ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007adc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ae0:	3b08      	subs	r3, #8
 8007ae2:	ed61 7a01 	vstmdb	r1!, {s15}
 8007ae6:	429d      	cmp	r5, r3
 8007ae8:	d80e      	bhi.n	8007b08 <forward_relu+0xbc>
 8007aea:	4613      	mov	r3, r2
 8007aec:	ed72 7a01 	vldmdb	r2!, {s15}
 8007af0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	d9e9      	bls.n	8007ace <forward_relu+0x82>
 8007afa:	3b08      	subs	r3, #8
 8007afc:	eef0 7a47 	vmov.f32	s15, s14
 8007b00:	429d      	cmp	r5, r3
 8007b02:	ed61 7a01 	vstmdb	r1!, {s15}
 8007b06:	d9f0      	bls.n	8007aea <forward_relu+0x9e>
 8007b08:	bc70      	pop	{r4, r5, r6}
 8007b0a:	4770      	bx	lr
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	deff      	udf	#255	; 0xff
 8007b10:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007b14:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8007b18:	4411      	add	r1, r2
 8007b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b1e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8007b22:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8007b26:	d11f      	bne.n	8007b68 <forward_relu+0x11c>
 8007b28:	429d      	cmp	r5, r3
 8007b2a:	d8ed      	bhi.n	8007b08 <forward_relu+0xbc>
 8007b2c:	1b5d      	subs	r5, r3, r5
 8007b2e:	1d1a      	adds	r2, r3, #4
 8007b30:	1d01      	adds	r1, r0, #4
 8007b32:	2000      	movs	r0, #0
 8007b34:	f025 0503 	bic.w	r5, r5, #3
 8007b38:	1b5b      	subs	r3, r3, r5
 8007b3a:	ed72 7a01 	vldmdb	r2!, {s15}
 8007b3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b46:	dc0a      	bgt.n	8007b5e <forward_relu+0x112>
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	f841 0d04 	str.w	r0, [r1, #-4]!
 8007b4e:	d0db      	beq.n	8007b08 <forward_relu+0xbc>
 8007b50:	ed72 7a01 	vldmdb	r2!, {s15}
 8007b54:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5c:	ddf4      	ble.n	8007b48 <forward_relu+0xfc>
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	ed61 7a01 	vstmdb	r1!, {s15}
 8007b64:	d1e9      	bne.n	8007b3a <forward_relu+0xee>
 8007b66:	e7cf      	b.n	8007b08 <forward_relu+0xbc>
 8007b68:	429d      	cmp	r5, r3
 8007b6a:	d8cd      	bhi.n	8007b08 <forward_relu+0xbc>
 8007b6c:	1b5d      	subs	r5, r3, r5
 8007b6e:	1d1a      	adds	r2, r3, #4
 8007b70:	1d01      	adds	r1, r0, #4
 8007b72:	f025 0503 	bic.w	r5, r5, #3
 8007b76:	1b5b      	subs	r3, r3, r5
 8007b78:	ed72 7a01 	vldmdb	r2!, {s15}
 8007b7c:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b84:	db0e      	blt.n	8007ba4 <forward_relu+0x158>
 8007b86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007b90:	ed61 7a01 	vstmdb	r1!, {s15}
 8007b94:	d0b8      	beq.n	8007b08 <forward_relu+0xbc>
 8007b96:	ed72 7a01 	vldmdb	r2!, {s15}
 8007b9a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba2:	daf0      	bge.n	8007b86 <forward_relu+0x13a>
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	ed61 7a01 	vstmdb	r1!, {s15}
 8007baa:	d1e5      	bne.n	8007b78 <forward_relu+0x12c>
 8007bac:	e7ac      	b.n	8007b08 <forward_relu+0xbc>
 8007bae:	6999      	ldr	r1, [r3, #24]
 8007bb0:	6893      	ldr	r3, [r2, #8]
 8007bb2:	6990      	ldr	r0, [r2, #24]
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	6889      	ldr	r1, [r1, #8]
 8007bb8:	6884      	ldr	r4, [r0, #8]
 8007bba:	d06e      	beq.n	8007c9a <forward_relu+0x24e>
 8007bbc:	68d5      	ldr	r5, [r2, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007bc4:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007bc8:	429d      	cmp	r5, r3
 8007bca:	fb00 f202 	mul.w	r2, r0, r2
 8007bce:	d1f9      	bne.n	8007bc4 <forward_relu+0x178>
 8007bd0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007bd4:	4413      	add	r3, r2
 8007bd6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007bda:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8007bde:	4294      	cmp	r4, r2
 8007be0:	d892      	bhi.n	8007b08 <forward_relu+0xbc>
 8007be2:	3204      	adds	r2, #4
 8007be4:	3104      	adds	r1, #4
 8007be6:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8007cb0 <forward_relu+0x264>
 8007bea:	4613      	mov	r3, r2
 8007bec:	ed72 7a01 	vldmdb	r2!, {s15}
 8007bf0:	3b08      	subs	r3, #8
 8007bf2:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007bf6:	ed61 7a01 	vstmdb	r1!, {s15}
 8007bfa:	429c      	cmp	r4, r3
 8007bfc:	d9f5      	bls.n	8007bea <forward_relu+0x19e>
 8007bfe:	bc70      	pop	{r4, r5, r6}
 8007c00:	4770      	bx	lr
 8007c02:	6993      	ldr	r3, [r2, #24]
 8007c04:	6880      	ldr	r0, [r0, #8]
 8007c06:	689c      	ldr	r4, [r3, #8]
 8007c08:	6893      	ldr	r3, [r2, #8]
 8007c0a:	0a1b      	lsrs	r3, r3, #8
 8007c0c:	d047      	beq.n	8007c9e <forward_relu+0x252>
 8007c0e:	68d5      	ldr	r5, [r2, #12]
 8007c10:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007c14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	fb02 f101 	mul.w	r1, r2, r1
 8007c1e:	d1f9      	bne.n	8007c14 <forward_relu+0x1c8>
 8007c20:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8007c24:	68b3      	ldr	r3, [r6, #8]
 8007c26:	440a      	add	r2, r1
 8007c28:	ed93 7a00 	vldr	s14, [r3]
 8007c2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c30:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8007c34:	429c      	cmp	r4, r3
 8007c36:	f63f af67 	bhi.w	8007b08 <forward_relu+0xbc>
 8007c3a:	1d02      	adds	r2, r0, #4
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	2000      	movs	r0, #0
 8007c40:	ed53 7a01 	vldr	s15, [r3, #-4]
 8007c44:	1f19      	subs	r1, r3, #4
 8007c46:	3b08      	subs	r3, #8
 8007c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c50:	d406      	bmi.n	8007c60 <forward_relu+0x214>
 8007c52:	429c      	cmp	r4, r3
 8007c54:	f842 0d04 	str.w	r0, [r2, #-4]!
 8007c58:	f63f af56 	bhi.w	8007b08 <forward_relu+0xbc>
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	e7ef      	b.n	8007c40 <forward_relu+0x1f4>
 8007c60:	429c      	cmp	r4, r3
 8007c62:	ed62 7a01 	vstmdb	r2!, {s15}
 8007c66:	f63f af4f 	bhi.w	8007b08 <forward_relu+0xbc>
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	e7e8      	b.n	8007c40 <forward_relu+0x1f4>
 8007c6e:	68b3      	ldr	r3, [r6, #8]
 8007c70:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c74:	edd3 6a00 	vldr	s13, [r3]
 8007c78:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007c7c:	ed93 6a01 	vldr	s12, [r3, #4]
 8007c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c84:	d401      	bmi.n	8007c8a <forward_relu+0x23e>
 8007c86:	462a      	mov	r2, r5
 8007c88:	e71e      	b.n	8007ac8 <forward_relu+0x7c>
 8007c8a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007c8e:	462b      	mov	r3, r5
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	f47f af6a 	bne.w	8007b6c <forward_relu+0x120>
 8007c98:	e748      	b.n	8007b2c <forward_relu+0xe0>
 8007c9a:	4622      	mov	r2, r4
 8007c9c:	e7a1      	b.n	8007be2 <forward_relu+0x196>
 8007c9e:	68b2      	ldr	r2, [r6, #8]
 8007ca0:	4623      	mov	r3, r4
 8007ca2:	ed92 7a00 	vldr	s14, [r2]
 8007ca6:	e7c8      	b.n	8007c3a <forward_relu+0x1ee>
 8007ca8:	2300      	movs	r3, #0
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	deff      	udf	#255	; 0xff
 8007cae:	bf00      	nop
 8007cb0:	00000000 	.word	0x00000000

08007cb4 <forward_sm>:
 8007cb4:	6982      	ldr	r2, [r0, #24]
 8007cb6:	8813      	ldrh	r3, [r2, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d078      	beq.n	8007dae <forward_sm+0xfa>
 8007cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc0:	ed2d 8b04 	vpush	{d8-d9}
 8007cc4:	6852      	ldr	r2, [r2, #4]
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	6854      	ldr	r4, [r2, #4]
 8007cca:	b104      	cbz	r4, 8007cce <forward_sm+0x1a>
 8007ccc:	6824      	ldr	r4, [r4, #0]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d072      	beq.n	8007db8 <forward_sm+0x104>
 8007cd2:	6913      	ldr	r3, [r2, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d072      	beq.n	8007dbe <forward_sm+0x10a>
 8007cd8:	681e      	ldr	r6, [r3, #0]
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	68e0      	ldr	r0, [r4, #12]
 8007cde:	68f2      	ldr	r2, [r6, #12]
 8007ce0:	0a1b      	lsrs	r3, r3, #8
 8007ce2:	6845      	ldr	r5, [r0, #4]
 8007ce4:	6857      	ldr	r7, [r2, #4]
 8007ce6:	d064      	beq.n	8007db2 <forward_sm+0xfe>
 8007ce8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007cec:	2201      	movs	r2, #1
 8007cee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007cf2:	4298      	cmp	r0, r3
 8007cf4:	fb01 f202 	mul.w	r2, r1, r2
 8007cf8:	d1f9      	bne.n	8007cee <forward_sm+0x3a>
 8007cfa:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8007cfe:	69a2      	ldr	r2, [r4, #24]
 8007d00:	69b3      	ldr	r3, [r6, #24]
 8007d02:	6892      	ldr	r2, [r2, #8]
 8007d04:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8007d08:	eb02 0309 	add.w	r3, r2, r9
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	9301      	str	r3, [sp, #4]
 8007d10:	d248      	bcs.n	8007da4 <forward_sm+0xf0>
 8007d12:	00bb      	lsls	r3, r7, #2
 8007d14:	2d01      	cmp	r5, #1
 8007d16:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8007d1a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8007d24:	463e      	mov	r6, r7
 8007d26:	ed92 8a00 	vldr	s16, [r2]
 8007d2a:	9302      	str	r3, [sp, #8]
 8007d2c:	d937      	bls.n	8007d9e <forward_sm+0xea>
 8007d2e:	1d13      	adds	r3, r2, #4
 8007d30:	ecf3 7a01 	vldmia	r3!, {s15}
 8007d34:	429e      	cmp	r6, r3
 8007d36:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8007d3a:	d1f9      	bne.n	8007d30 <forward_sm+0x7c>
 8007d3c:	4692      	mov	sl, r2
 8007d3e:	46c3      	mov	fp, r8
 8007d40:	46c1      	mov	r9, r8
 8007d42:	eddf 8a20 	vldr	s17, [pc, #128]	; 8007dc4 <forward_sm+0x110>
 8007d46:	2400      	movs	r4, #0
 8007d48:	ecba 0a01 	vldmia	sl!, {s0}
 8007d4c:	3401      	adds	r4, #1
 8007d4e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007d52:	f003 f9c5 	bl	800b0e0 <expf>
 8007d56:	42a5      	cmp	r5, r4
 8007d58:	ee78 8a80 	vadd.f32	s17, s17, s0
 8007d5c:	eca9 0a01 	vstmia	r9!, {s0}
 8007d60:	d8f2      	bhi.n	8007d48 <forward_sm+0x94>
 8007d62:	eef5 8a40 	vcmp.f32	s17, #0.0
 8007d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d6a:	d00b      	beq.n	8007d84 <forward_sm+0xd0>
 8007d6c:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8007d70:	2300      	movs	r3, #0
 8007d72:	eddb 7a00 	vldr	s15, [fp]
 8007d76:	3301      	adds	r3, #1
 8007d78:	429d      	cmp	r5, r3
 8007d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d7e:	eceb 7a01 	vstmia	fp!, {s15}
 8007d82:	d8f6      	bhi.n	8007d72 <forward_sm+0xbe>
 8007d84:	9b03      	ldr	r3, [sp, #12]
 8007d86:	463a      	mov	r2, r7
 8007d88:	9901      	ldr	r1, [sp, #4]
 8007d8a:	4498      	add	r8, r3
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	42b9      	cmp	r1, r7
 8007d90:	441e      	add	r6, r3
 8007d92:	d907      	bls.n	8007da4 <forward_sm+0xf0>
 8007d94:	2d01      	cmp	r5, #1
 8007d96:	441f      	add	r7, r3
 8007d98:	ed92 8a00 	vldr	s16, [r2]
 8007d9c:	d8c7      	bhi.n	8007d2e <forward_sm+0x7a>
 8007d9e:	2d00      	cmp	r5, #0
 8007da0:	d0f0      	beq.n	8007d84 <forward_sm+0xd0>
 8007da2:	e7cb      	b.n	8007d3c <forward_sm+0x88>
 8007da4:	b005      	add	sp, #20
 8007da6:	ecbd 8b04 	vpop	{d8-d9}
 8007daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	deff      	udf	#255	; 0xff
 8007db2:	f04f 0904 	mov.w	r9, #4
 8007db6:	e7a2      	b.n	8007cfe <forward_sm+0x4a>
 8007db8:	2300      	movs	r3, #0
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	deff      	udf	#255	; 0xff
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	deff      	udf	#255	; 0xff
 8007dc2:	bf00      	nop
 8007dc4:	00000000 	.word	0x00000000

08007dc8 <ai_check_custom_types>:
 8007dc8:	b082      	sub	sp, #8
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <ai_check_custom_types+0x4c>)
 8007dcc:	9301      	str	r3, [sp, #4]
 8007dce:	b118      	cbz	r0, 8007dd8 <ai_check_custom_types+0x10>
 8007dd0:	7803      	ldrb	r3, [r0, #0]
 8007dd2:	2b03      	cmp	r3, #3
 8007dd4:	d002      	beq.n	8007ddc <ai_check_custom_types+0x14>
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	b002      	add	sp, #8
 8007dda:	4770      	bx	lr
 8007ddc:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d004      	beq.n	8007dee <ai_check_custom_types+0x26>
 8007de4:	2001      	movs	r0, #1
 8007de6:	f080 0001 	eor.w	r0, r0, #1
 8007dea:	b002      	add	sp, #8
 8007dec:	4770      	bx	lr
 8007dee:	7842      	ldrb	r2, [r0, #1]
 8007df0:	3001      	adds	r0, #1
 8007df2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d1f4      	bne.n	8007de4 <ai_check_custom_types+0x1c>
 8007dfa:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8007dfe:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d1ee      	bne.n	8007de4 <ai_check_custom_types+0x1c>
 8007e06:	7842      	ldrb	r2, [r0, #1]
 8007e08:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d1e9      	bne.n	8007de4 <ai_check_custom_types+0x1c>
 8007e10:	2000      	movs	r0, #0
 8007e12:	e7e8      	b.n	8007de6 <ai_check_custom_types+0x1e>
 8007e14:	84048403 	.word	0x84048403

08007e18 <ai_layers_init_all>:
 8007e18:	2100      	movs	r1, #0
 8007e1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007e1c:	b13b      	cbz	r3, 8007e2e <ai_layers_init_all+0x16>
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	3101      	adds	r1, #1
 8007e22:	60d8      	str	r0, [r3, #12]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	4613      	mov	r3, r2
 8007e28:	d001      	beq.n	8007e2e <ai_layers_init_all+0x16>
 8007e2a:	2a00      	cmp	r2, #0
 8007e2c:	d1f6      	bne.n	8007e1c <ai_layers_init_all+0x4>
 8007e2e:	4608      	mov	r0, r1
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop

08007e34 <ai_layers_post_init_all>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	2500      	movs	r5, #0
 8007e38:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007e3a:	b16c      	cbz	r4, 8007e58 <ai_layers_post_init_all+0x24>
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	07db      	lsls	r3, r3, #31
 8007e40:	d504      	bpl.n	8007e4c <ai_layers_post_init_all+0x18>
 8007e42:	6a23      	ldr	r3, [r4, #32]
 8007e44:	4620      	mov	r0, r4
 8007e46:	b10b      	cbz	r3, 8007e4c <ai_layers_post_init_all+0x18>
 8007e48:	3501      	adds	r5, #1
 8007e4a:	4798      	blx	r3
 8007e4c:	6923      	ldr	r3, [r4, #16]
 8007e4e:	42a3      	cmp	r3, r4
 8007e50:	461c      	mov	r4, r3
 8007e52:	d001      	beq.n	8007e58 <ai_layers_post_init_all+0x24>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1f0      	bne.n	8007e3a <ai_layers_post_init_all+0x6>
 8007e58:	4628      	mov	r0, r5
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}

08007e5c <ai_layers_forward_all>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007e64:	4604      	mov	r4, r0
 8007e66:	f1b8 0f00 	cmp.w	r8, #0
 8007e6a:	d02a      	beq.n	8007ec2 <ai_layers_forward_all+0x66>
 8007e6c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007e6e:	6381      	str	r1, [r0, #56]	; 0x38
 8007e70:	b319      	cbz	r1, 8007eba <ai_layers_forward_all+0x5e>
 8007e72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007e74:	2001      	movs	r0, #1
 8007e76:	47c0      	blx	r8
 8007e78:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007e7a:	b1f6      	cbz	r6, 8007eba <ai_layers_forward_all+0x5e>
 8007e7c:	2700      	movs	r7, #0
 8007e7e:	4631      	mov	r1, r6
 8007e80:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e82:	2002      	movs	r0, #2
 8007e84:	47c0      	blx	r8
 8007e86:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007e88:	4628      	mov	r0, r5
 8007e8a:	696b      	ldr	r3, [r5, #20]
 8007e8c:	4798      	blx	r3
 8007e8e:	692e      	ldr	r6, [r5, #16]
 8007e90:	2003      	movs	r0, #3
 8007e92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007e94:	42b5      	cmp	r5, r6
 8007e96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e98:	d007      	beq.n	8007eaa <ai_layers_forward_all+0x4e>
 8007e9a:	47c0      	blx	r8
 8007e9c:	3701      	adds	r7, #1
 8007e9e:	63a6      	str	r6, [r4, #56]	; 0x38
 8007ea0:	2e00      	cmp	r6, #0
 8007ea2:	d1ec      	bne.n	8007e7e <ai_layers_forward_all+0x22>
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eaa:	2003      	movs	r0, #3
 8007eac:	3701      	adds	r7, #1
 8007eae:	47c0      	blx	r8
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	4638      	mov	r0, r7
 8007eb4:	63a3      	str	r3, [r4, #56]	; 0x38
 8007eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eba:	2700      	movs	r7, #0
 8007ebc:	4638      	mov	r0, r7
 8007ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec2:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007ec4:	6385      	str	r5, [r0, #56]	; 0x38
 8007ec6:	2d00      	cmp	r5, #0
 8007ec8:	d0f7      	beq.n	8007eba <ai_layers_forward_all+0x5e>
 8007eca:	4647      	mov	r7, r8
 8007ecc:	696b      	ldr	r3, [r5, #20]
 8007ece:	4628      	mov	r0, r5
 8007ed0:	4798      	blx	r3
 8007ed2:	462b      	mov	r3, r5
 8007ed4:	692d      	ldr	r5, [r5, #16]
 8007ed6:	429d      	cmp	r5, r3
 8007ed8:	d004      	beq.n	8007ee4 <ai_layers_forward_all+0x88>
 8007eda:	3701      	adds	r7, #1
 8007edc:	63a5      	str	r5, [r4, #56]	; 0x38
 8007ede:	2d00      	cmp	r5, #0
 8007ee0:	d1f4      	bne.n	8007ecc <ai_layers_forward_all+0x70>
 8007ee2:	e7df      	b.n	8007ea4 <ai_layers_forward_all+0x48>
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	3701      	adds	r7, #1
 8007ee8:	63a3      	str	r3, [r4, #56]	; 0x38
 8007eea:	e7db      	b.n	8007ea4 <ai_layers_forward_all+0x48>

08007eec <lite_dense_if32of32wf32>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	ed2d 8b0c 	vpush	{d8-d13}
 8007ef4:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8007ef8:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8007efc:	4287      	cmp	r7, r0
 8007efe:	f240 8105 	bls.w	800810c <lite_dense_if32of32wf32+0x220>
 8007f02:	f1a6 0810 	sub.w	r8, r6, #16
 8007f06:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8007f0a:	4605      	mov	r5, r0
 8007f0c:	f006 0b0f 	and.w	fp, r6, #15
 8007f10:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007f14:	f108 0801 	add.w	r8, r8, #1
 8007f18:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8007f1c:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8007f20:	2e0f      	cmp	r6, #15
 8007f22:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8008138 <lite_dense_if32of32wf32+0x24c>
 8007f26:	f240 8102 	bls.w	800812e <lite_dense_if32of32wf32+0x242>
 8007f2a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8007f2e:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8007f32:	46b6      	mov	lr, r6
 8007f34:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8007f38:	f1ae 0e10 	sub.w	lr, lr, #16
 8007f3c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8007f40:	3440      	adds	r4, #64	; 0x40
 8007f42:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8007f46:	f1be 0f0f 	cmp.w	lr, #15
 8007f4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f4e:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8007f52:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8007f56:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8007f5a:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8007f5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f62:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8007f66:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8007f6a:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8007f6e:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8007f72:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8007f76:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8007f7a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f7e:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8007f82:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8007f86:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8007f8a:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8007f8e:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8007f92:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8007f96:	eeed 7a26 	vfma.f32	s15, s26, s13
 8007f9a:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8007f9e:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8007fa2:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8007fa6:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8007faa:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8007fae:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8007fb2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8007fb6:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8007fba:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8007fbe:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8007fc2:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8007fc6:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8007fca:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8007fce:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8007fd2:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8007fd6:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8007fda:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8007fde:	eee9 7a89 	vfma.f32	s15, s19, s18
 8007fe2:	eee8 7a88 	vfma.f32	s15, s17, s16
 8007fe6:	eee0 7a20 	vfma.f32	s15, s0, s1
 8007fea:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007fee:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007ff2:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007ff6:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007ffa:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ffe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008002:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008006:	d895      	bhi.n	8007f34 <lite_dense_if32of32wf32+0x48>
 8008008:	eb02 0e0a 	add.w	lr, r2, sl
 800800c:	465c      	mov	r4, fp
 800800e:	46c4      	mov	ip, r8
 8008010:	2c00      	cmp	r4, #0
 8008012:	d075      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008014:	eddc 6a00 	vldr	s13, [ip]
 8008018:	2c01      	cmp	r4, #1
 800801a:	edde 7a00 	vldr	s15, [lr]
 800801e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008022:	d06d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008024:	eddc 6a01 	vldr	s13, [ip, #4]
 8008028:	2c02      	cmp	r4, #2
 800802a:	edde 7a01 	vldr	s15, [lr, #4]
 800802e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008032:	d065      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008034:	eddc 6a02 	vldr	s13, [ip, #8]
 8008038:	2c03      	cmp	r4, #3
 800803a:	edde 7a02 	vldr	s15, [lr, #8]
 800803e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008042:	d05d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008044:	eddc 6a03 	vldr	s13, [ip, #12]
 8008048:	2c04      	cmp	r4, #4
 800804a:	edde 7a03 	vldr	s15, [lr, #12]
 800804e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008052:	d055      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008054:	eddc 6a04 	vldr	s13, [ip, #16]
 8008058:	2c05      	cmp	r4, #5
 800805a:	edde 7a04 	vldr	s15, [lr, #16]
 800805e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008062:	d04d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008064:	eddc 6a05 	vldr	s13, [ip, #20]
 8008068:	2c06      	cmp	r4, #6
 800806a:	edde 7a05 	vldr	s15, [lr, #20]
 800806e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008072:	d045      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008074:	eddc 6a06 	vldr	s13, [ip, #24]
 8008078:	2c07      	cmp	r4, #7
 800807a:	edde 7a06 	vldr	s15, [lr, #24]
 800807e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008082:	d03d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008084:	eddc 6a07 	vldr	s13, [ip, #28]
 8008088:	2c08      	cmp	r4, #8
 800808a:	edde 7a07 	vldr	s15, [lr, #28]
 800808e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008092:	d035      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 8008094:	eddc 6a08 	vldr	s13, [ip, #32]
 8008098:	2c09      	cmp	r4, #9
 800809a:	edde 7a08 	vldr	s15, [lr, #32]
 800809e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080a2:	d02d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080a4:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 80080a8:	2c0a      	cmp	r4, #10
 80080aa:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80080ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080b2:	d025      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080b4:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80080b8:	2c0b      	cmp	r4, #11
 80080ba:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80080be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c2:	d01d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080c4:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80080c8:	2c0c      	cmp	r4, #12
 80080ca:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80080ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080d2:	d015      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080d4:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80080d8:	3c0d      	subs	r4, #13
 80080da:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80080de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080e2:	d00d      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080e4:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80080e8:	2c01      	cmp	r4, #1
 80080ea:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80080ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080f2:	d005      	beq.n	8008100 <lite_dense_if32of32wf32+0x214>
 80080f4:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80080f8:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80080fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008100:	eca5 7a01 	vstmia	r5!, {s14}
 8008104:	42af      	cmp	r7, r5
 8008106:	444a      	add	r2, r9
 8008108:	f63f af0a 	bhi.w	8007f20 <lite_dense_if32of32wf32+0x34>
 800810c:	b15b      	cbz	r3, 8008126 <lite_dense_if32of32wf32+0x23a>
 800810e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008110:	b14a      	cbz	r2, 8008126 <lite_dense_if32of32wf32+0x23a>
 8008112:	edd0 7a00 	vldr	s15, [r0]
 8008116:	ecb3 7a01 	vldmia	r3!, {s14}
 800811a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800811e:	ece0 7a01 	vstmia	r0!, {s15}
 8008122:	4287      	cmp	r7, r0
 8008124:	d1f5      	bne.n	8008112 <lite_dense_if32of32wf32+0x226>
 8008126:	ecbd 8b0c 	vpop	{d8-d13}
 800812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800812e:	4634      	mov	r4, r6
 8008130:	4696      	mov	lr, r2
 8008132:	468c      	mov	ip, r1
 8008134:	e76c      	b.n	8008010 <lite_dense_if32of32wf32+0x124>
 8008136:	bf00      	nop
 8008138:	00000000 	.word	0x00000000

0800813c <ai_version_get>:
 800813c:	0212      	lsls	r2, r2, #8
 800813e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008142:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008146:	4770      	bx	lr

08008148 <get_tensor_byte_size>:
 8008148:	b430      	push	{r4, r5}
 800814a:	6985      	ldr	r5, [r0, #24]
 800814c:	68c4      	ldr	r4, [r0, #12]
 800814e:	6941      	ldr	r1, [r0, #20]
 8008150:	4b06      	ldr	r3, [pc, #24]	; (800816c <get_tensor_byte_size+0x24>)
 8008152:	6828      	ldr	r0, [r5, #0]
 8008154:	4a06      	ldr	r2, [pc, #24]	; (8008170 <get_tensor_byte_size+0x28>)
 8008156:	4003      	ands	r3, r0
 8008158:	68c9      	ldr	r1, [r1, #12]
 800815a:	68e0      	ldr	r0, [r4, #12]
 800815c:	4293      	cmp	r3, r2
 800815e:	fb01 f000 	mul.w	r0, r1, r0
 8008162:	d101      	bne.n	8008168 <get_tensor_byte_size+0x20>
 8008164:	3007      	adds	r0, #7
 8008166:	08c0      	lsrs	r0, r0, #3
 8008168:	bc30      	pop	{r4, r5}
 800816a:	4770      	bx	lr
 800816c:	017fffff 	.word	0x017fffff
 8008170:	000400c0 	.word	0x000400c0

08008174 <ai_array_to_buffer_fmt>:
 8008174:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8008178:	2b02      	cmp	r3, #2
 800817a:	d050      	beq.n	800821e <ai_array_to_buffer_fmt+0xaa>
 800817c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8008180:	4b29      	ldr	r3, [pc, #164]	; (8008228 <ai_array_to_buffer_fmt+0xb4>)
 8008182:	429a      	cmp	r2, r3
 8008184:	d00b      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 8008186:	dc1c      	bgt.n	80081c2 <ai_array_to_buffer_fmt+0x4e>
 8008188:	4b28      	ldr	r3, [pc, #160]	; (800822c <ai_array_to_buffer_fmt+0xb8>)
 800818a:	429a      	cmp	r2, r3
 800818c:	d007      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 800818e:	dd0b      	ble.n	80081a8 <ai_array_to_buffer_fmt+0x34>
 8008190:	4b27      	ldr	r3, [pc, #156]	; (8008230 <ai_array_to_buffer_fmt+0xbc>)
 8008192:	429a      	cmp	r2, r3
 8008194:	d003      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 8008196:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800819a:	429a      	cmp	r2, r3
 800819c:	d131      	bne.n	8008202 <ai_array_to_buffer_fmt+0x8e>
 800819e:	4613      	mov	r3, r2
 80081a0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80081a4:	4318      	orrs	r0, r3
 80081a6:	4770      	bx	lr
 80081a8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d0f6      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081b0:	dd2c      	ble.n	800820c <ai_array_to_buffer_fmt+0x98>
 80081b2:	4b20      	ldr	r3, [pc, #128]	; (8008234 <ai_array_to_buffer_fmt+0xc0>)
 80081b4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80081b8:	429a      	cmp	r2, r3
 80081ba:	bf18      	it	ne
 80081bc:	2340      	movne	r3, #64	; 0x40
 80081be:	4318      	orrs	r0, r3
 80081c0:	4770      	bx	lr
 80081c2:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <ai_array_to_buffer_fmt+0xc4>)
 80081c4:	429a      	cmp	r2, r3
 80081c6:	d0ea      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081c8:	dd0e      	ble.n	80081e8 <ai_array_to_buffer_fmt+0x74>
 80081ca:	4b1c      	ldr	r3, [pc, #112]	; (800823c <ai_array_to_buffer_fmt+0xc8>)
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d0e6      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081d0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d0e2      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081d8:	4b19      	ldr	r3, [pc, #100]	; (8008240 <ai_array_to_buffer_fmt+0xcc>)
 80081da:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80081de:	429a      	cmp	r2, r3
 80081e0:	bf18      	it	ne
 80081e2:	2340      	movne	r3, #64	; 0x40
 80081e4:	4318      	orrs	r0, r3
 80081e6:	4770      	bx	lr
 80081e8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d0d6      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081f0:	3307      	adds	r3, #7
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d0d3      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 80081f6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80081fa:	429a      	cmp	r2, r3
 80081fc:	bf18      	it	ne
 80081fe:	2340      	movne	r3, #64	; 0x40
 8008200:	e7ce      	b.n	80081a0 <ai_array_to_buffer_fmt+0x2c>
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <ai_array_to_buffer_fmt+0xd0>)
 8008204:	429a      	cmp	r2, r3
 8008206:	bf18      	it	ne
 8008208:	2340      	movne	r3, #64	; 0x40
 800820a:	e7c9      	b.n	80081a0 <ai_array_to_buffer_fmt+0x2c>
 800820c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008210:	429a      	cmp	r2, r3
 8008212:	d0c4      	beq.n	800819e <ai_array_to_buffer_fmt+0x2a>
 8008214:	3380      	adds	r3, #128	; 0x80
 8008216:	429a      	cmp	r2, r3
 8008218:	bf18      	it	ne
 800821a:	2340      	movne	r3, #64	; 0x40
 800821c:	e7c0      	b.n	80081a0 <ai_array_to_buffer_fmt+0x2c>
 800821e:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <ai_array_to_buffer_fmt+0xd4>)
 8008220:	4003      	ands	r3, r0
 8008222:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008226:	e7bb      	b.n	80081a0 <ai_array_to_buffer_fmt+0x2c>
 8008228:	00840040 	.word	0x00840040
 800822c:	00040840 	.word	0x00040840
 8008230:	00041040 	.word	0x00041040
 8008234:	00040447 	.word	0x00040447
 8008238:	00840840 	.word	0x00840840
 800823c:	00841040 	.word	0x00841040
 8008240:	0084084f 	.word	0x0084084f
 8008244:	0004084f 	.word	0x0004084f
 8008248:	00803fff 	.word	0x00803fff

0800824c <ai_array_get_byte_size>:
 800824c:	b319      	cbz	r1, 8008296 <ai_array_get_byte_size+0x4a>
 800824e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8008252:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8008256:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800825a:	11c0      	asrs	r0, r0, #7
 800825c:	fb03 f101 	mul.w	r1, r3, r1
 8008260:	2a04      	cmp	r2, #4
 8008262:	f101 0107 	add.w	r1, r1, #7
 8008266:	f021 0107 	bic.w	r1, r1, #7
 800826a:	fa21 f10c 	lsr.w	r1, r1, ip
 800826e:	d00b      	beq.n	8008288 <ai_array_get_byte_size+0x3c>
 8008270:	2a08      	cmp	r2, #8
 8008272:	d002      	beq.n	800827a <ai_array_get_byte_size+0x2e>
 8008274:	3107      	adds	r1, #7
 8008276:	08c8      	lsrs	r0, r1, #3
 8008278:	4770      	bx	lr
 800827a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800827e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8008282:	3107      	adds	r1, #7
 8008284:	08c8      	lsrs	r0, r1, #3
 8008286:	4770      	bx	lr
 8008288:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800828c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8008290:	3107      	adds	r1, #7
 8008292:	08c8      	lsrs	r0, r1, #3
 8008294:	4770      	bx	lr
 8008296:	4608      	mov	r0, r1
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop

0800829c <ai_array_get_data_byte_size>:
 800829c:	b161      	cbz	r1, 80082b8 <ai_array_get_data_byte_size+0x1c>
 800829e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80082a2:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80082a6:	fb03 f101 	mul.w	r1, r3, r1
 80082aa:	1dc8      	adds	r0, r1, #7
 80082ac:	f020 0007 	bic.w	r0, r0, #7
 80082b0:	40d0      	lsrs	r0, r2
 80082b2:	3007      	adds	r0, #7
 80082b4:	08c0      	lsrs	r0, r0, #3
 80082b6:	4770      	bx	lr
 80082b8:	4608      	mov	r0, r1
 80082ba:	4770      	bx	lr

080082bc <__errno>:
 80082bc:	4b01      	ldr	r3, [pc, #4]	; (80082c4 <__errno+0x8>)
 80082be:	6818      	ldr	r0, [r3, #0]
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	20000738 	.word	0x20000738

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	4d0d      	ldr	r5, [pc, #52]	; (8008300 <__libc_init_array+0x38>)
 80082cc:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <__libc_init_array+0x3c>)
 80082ce:	1b64      	subs	r4, r4, r5
 80082d0:	10a4      	asrs	r4, r4, #2
 80082d2:	2600      	movs	r6, #0
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	4d0b      	ldr	r5, [pc, #44]	; (8008308 <__libc_init_array+0x40>)
 80082da:	4c0c      	ldr	r4, [pc, #48]	; (800830c <__libc_init_array+0x44>)
 80082dc:	f003 f876 	bl	800b3cc <_init>
 80082e0:	1b64      	subs	r4, r4, r5
 80082e2:	10a4      	asrs	r4, r4, #2
 80082e4:	2600      	movs	r6, #0
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	0806e7e4 	.word	0x0806e7e4
 8008304:	0806e7e4 	.word	0x0806e7e4
 8008308:	0806e7e4 	.word	0x0806e7e4
 800830c:	0806e7e8 	.word	0x0806e7e8

08008310 <malloc>:
 8008310:	4b02      	ldr	r3, [pc, #8]	; (800831c <malloc+0xc>)
 8008312:	4601      	mov	r1, r0
 8008314:	6818      	ldr	r0, [r3, #0]
 8008316:	f000 b885 	b.w	8008424 <_malloc_r>
 800831a:	bf00      	nop
 800831c:	20000738 	.word	0x20000738

08008320 <memcpy>:
 8008320:	440a      	add	r2, r1
 8008322:	4291      	cmp	r1, r2
 8008324:	f100 33ff 	add.w	r3, r0, #4294967295
 8008328:	d100      	bne.n	800832c <memcpy+0xc>
 800832a:	4770      	bx	lr
 800832c:	b510      	push	{r4, lr}
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008336:	4291      	cmp	r1, r2
 8008338:	d1f9      	bne.n	800832e <memcpy+0xe>
 800833a:	bd10      	pop	{r4, pc}

0800833c <memset>:
 800833c:	4402      	add	r2, r0
 800833e:	4603      	mov	r3, r0
 8008340:	4293      	cmp	r3, r2
 8008342:	d100      	bne.n	8008346 <memset+0xa>
 8008344:	4770      	bx	lr
 8008346:	f803 1b01 	strb.w	r1, [r3], #1
 800834a:	e7f9      	b.n	8008340 <memset+0x4>

0800834c <_free_r>:
 800834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800834e:	2900      	cmp	r1, #0
 8008350:	d044      	beq.n	80083dc <_free_r+0x90>
 8008352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008356:	9001      	str	r0, [sp, #4]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f1a1 0404 	sub.w	r4, r1, #4
 800835e:	bfb8      	it	lt
 8008360:	18e4      	addlt	r4, r4, r3
 8008362:	f001 fbeb 	bl	8009b3c <__malloc_lock>
 8008366:	4a1e      	ldr	r2, [pc, #120]	; (80083e0 <_free_r+0x94>)
 8008368:	9801      	ldr	r0, [sp, #4]
 800836a:	6813      	ldr	r3, [r2, #0]
 800836c:	b933      	cbnz	r3, 800837c <_free_r+0x30>
 800836e:	6063      	str	r3, [r4, #4]
 8008370:	6014      	str	r4, [r2, #0]
 8008372:	b003      	add	sp, #12
 8008374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008378:	f001 bbe6 	b.w	8009b48 <__malloc_unlock>
 800837c:	42a3      	cmp	r3, r4
 800837e:	d908      	bls.n	8008392 <_free_r+0x46>
 8008380:	6825      	ldr	r5, [r4, #0]
 8008382:	1961      	adds	r1, r4, r5
 8008384:	428b      	cmp	r3, r1
 8008386:	bf01      	itttt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	1949      	addeq	r1, r1, r5
 800838e:	6021      	streq	r1, [r4, #0]
 8008390:	e7ed      	b.n	800836e <_free_r+0x22>
 8008392:	461a      	mov	r2, r3
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	b10b      	cbz	r3, 800839c <_free_r+0x50>
 8008398:	42a3      	cmp	r3, r4
 800839a:	d9fa      	bls.n	8008392 <_free_r+0x46>
 800839c:	6811      	ldr	r1, [r2, #0]
 800839e:	1855      	adds	r5, r2, r1
 80083a0:	42a5      	cmp	r5, r4
 80083a2:	d10b      	bne.n	80083bc <_free_r+0x70>
 80083a4:	6824      	ldr	r4, [r4, #0]
 80083a6:	4421      	add	r1, r4
 80083a8:	1854      	adds	r4, r2, r1
 80083aa:	42a3      	cmp	r3, r4
 80083ac:	6011      	str	r1, [r2, #0]
 80083ae:	d1e0      	bne.n	8008372 <_free_r+0x26>
 80083b0:	681c      	ldr	r4, [r3, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	6053      	str	r3, [r2, #4]
 80083b6:	4421      	add	r1, r4
 80083b8:	6011      	str	r1, [r2, #0]
 80083ba:	e7da      	b.n	8008372 <_free_r+0x26>
 80083bc:	d902      	bls.n	80083c4 <_free_r+0x78>
 80083be:	230c      	movs	r3, #12
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	e7d6      	b.n	8008372 <_free_r+0x26>
 80083c4:	6825      	ldr	r5, [r4, #0]
 80083c6:	1961      	adds	r1, r4, r5
 80083c8:	428b      	cmp	r3, r1
 80083ca:	bf04      	itt	eq
 80083cc:	6819      	ldreq	r1, [r3, #0]
 80083ce:	685b      	ldreq	r3, [r3, #4]
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	bf04      	itt	eq
 80083d4:	1949      	addeq	r1, r1, r5
 80083d6:	6021      	streq	r1, [r4, #0]
 80083d8:	6054      	str	r4, [r2, #4]
 80083da:	e7ca      	b.n	8008372 <_free_r+0x26>
 80083dc:	b003      	add	sp, #12
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	20003c2c 	.word	0x20003c2c

080083e4 <sbrk_aligned>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	4e0e      	ldr	r6, [pc, #56]	; (8008420 <sbrk_aligned+0x3c>)
 80083e8:	460c      	mov	r4, r1
 80083ea:	6831      	ldr	r1, [r6, #0]
 80083ec:	4605      	mov	r5, r0
 80083ee:	b911      	cbnz	r1, 80083f6 <sbrk_aligned+0x12>
 80083f0:	f000 fcf6 	bl	8008de0 <_sbrk_r>
 80083f4:	6030      	str	r0, [r6, #0]
 80083f6:	4621      	mov	r1, r4
 80083f8:	4628      	mov	r0, r5
 80083fa:	f000 fcf1 	bl	8008de0 <_sbrk_r>
 80083fe:	1c43      	adds	r3, r0, #1
 8008400:	d00a      	beq.n	8008418 <sbrk_aligned+0x34>
 8008402:	1cc4      	adds	r4, r0, #3
 8008404:	f024 0403 	bic.w	r4, r4, #3
 8008408:	42a0      	cmp	r0, r4
 800840a:	d007      	beq.n	800841c <sbrk_aligned+0x38>
 800840c:	1a21      	subs	r1, r4, r0
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fce6 	bl	8008de0 <_sbrk_r>
 8008414:	3001      	adds	r0, #1
 8008416:	d101      	bne.n	800841c <sbrk_aligned+0x38>
 8008418:	f04f 34ff 	mov.w	r4, #4294967295
 800841c:	4620      	mov	r0, r4
 800841e:	bd70      	pop	{r4, r5, r6, pc}
 8008420:	20003c30 	.word	0x20003c30

08008424 <_malloc_r>:
 8008424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	1ccd      	adds	r5, r1, #3
 800842a:	f025 0503 	bic.w	r5, r5, #3
 800842e:	3508      	adds	r5, #8
 8008430:	2d0c      	cmp	r5, #12
 8008432:	bf38      	it	cc
 8008434:	250c      	movcc	r5, #12
 8008436:	2d00      	cmp	r5, #0
 8008438:	4607      	mov	r7, r0
 800843a:	db01      	blt.n	8008440 <_malloc_r+0x1c>
 800843c:	42a9      	cmp	r1, r5
 800843e:	d905      	bls.n	800844c <_malloc_r+0x28>
 8008440:	230c      	movs	r3, #12
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	2600      	movs	r6, #0
 8008446:	4630      	mov	r0, r6
 8008448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800844c:	4e2e      	ldr	r6, [pc, #184]	; (8008508 <_malloc_r+0xe4>)
 800844e:	f001 fb75 	bl	8009b3c <__malloc_lock>
 8008452:	6833      	ldr	r3, [r6, #0]
 8008454:	461c      	mov	r4, r3
 8008456:	bb34      	cbnz	r4, 80084a6 <_malloc_r+0x82>
 8008458:	4629      	mov	r1, r5
 800845a:	4638      	mov	r0, r7
 800845c:	f7ff ffc2 	bl	80083e4 <sbrk_aligned>
 8008460:	1c43      	adds	r3, r0, #1
 8008462:	4604      	mov	r4, r0
 8008464:	d14d      	bne.n	8008502 <_malloc_r+0xde>
 8008466:	6834      	ldr	r4, [r6, #0]
 8008468:	4626      	mov	r6, r4
 800846a:	2e00      	cmp	r6, #0
 800846c:	d140      	bne.n	80084f0 <_malloc_r+0xcc>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	4631      	mov	r1, r6
 8008472:	4638      	mov	r0, r7
 8008474:	eb04 0803 	add.w	r8, r4, r3
 8008478:	f000 fcb2 	bl	8008de0 <_sbrk_r>
 800847c:	4580      	cmp	r8, r0
 800847e:	d13a      	bne.n	80084f6 <_malloc_r+0xd2>
 8008480:	6821      	ldr	r1, [r4, #0]
 8008482:	3503      	adds	r5, #3
 8008484:	1a6d      	subs	r5, r5, r1
 8008486:	f025 0503 	bic.w	r5, r5, #3
 800848a:	3508      	adds	r5, #8
 800848c:	2d0c      	cmp	r5, #12
 800848e:	bf38      	it	cc
 8008490:	250c      	movcc	r5, #12
 8008492:	4629      	mov	r1, r5
 8008494:	4638      	mov	r0, r7
 8008496:	f7ff ffa5 	bl	80083e4 <sbrk_aligned>
 800849a:	3001      	adds	r0, #1
 800849c:	d02b      	beq.n	80084f6 <_malloc_r+0xd2>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	442b      	add	r3, r5
 80084a2:	6023      	str	r3, [r4, #0]
 80084a4:	e00e      	b.n	80084c4 <_malloc_r+0xa0>
 80084a6:	6822      	ldr	r2, [r4, #0]
 80084a8:	1b52      	subs	r2, r2, r5
 80084aa:	d41e      	bmi.n	80084ea <_malloc_r+0xc6>
 80084ac:	2a0b      	cmp	r2, #11
 80084ae:	d916      	bls.n	80084de <_malloc_r+0xba>
 80084b0:	1961      	adds	r1, r4, r5
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	6025      	str	r5, [r4, #0]
 80084b6:	bf18      	it	ne
 80084b8:	6059      	strne	r1, [r3, #4]
 80084ba:	6863      	ldr	r3, [r4, #4]
 80084bc:	bf08      	it	eq
 80084be:	6031      	streq	r1, [r6, #0]
 80084c0:	5162      	str	r2, [r4, r5]
 80084c2:	604b      	str	r3, [r1, #4]
 80084c4:	4638      	mov	r0, r7
 80084c6:	f104 060b 	add.w	r6, r4, #11
 80084ca:	f001 fb3d 	bl	8009b48 <__malloc_unlock>
 80084ce:	f026 0607 	bic.w	r6, r6, #7
 80084d2:	1d23      	adds	r3, r4, #4
 80084d4:	1af2      	subs	r2, r6, r3
 80084d6:	d0b6      	beq.n	8008446 <_malloc_r+0x22>
 80084d8:	1b9b      	subs	r3, r3, r6
 80084da:	50a3      	str	r3, [r4, r2]
 80084dc:	e7b3      	b.n	8008446 <_malloc_r+0x22>
 80084de:	6862      	ldr	r2, [r4, #4]
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	bf0c      	ite	eq
 80084e4:	6032      	streq	r2, [r6, #0]
 80084e6:	605a      	strne	r2, [r3, #4]
 80084e8:	e7ec      	b.n	80084c4 <_malloc_r+0xa0>
 80084ea:	4623      	mov	r3, r4
 80084ec:	6864      	ldr	r4, [r4, #4]
 80084ee:	e7b2      	b.n	8008456 <_malloc_r+0x32>
 80084f0:	4634      	mov	r4, r6
 80084f2:	6876      	ldr	r6, [r6, #4]
 80084f4:	e7b9      	b.n	800846a <_malloc_r+0x46>
 80084f6:	230c      	movs	r3, #12
 80084f8:	603b      	str	r3, [r7, #0]
 80084fa:	4638      	mov	r0, r7
 80084fc:	f001 fb24 	bl	8009b48 <__malloc_unlock>
 8008500:	e7a1      	b.n	8008446 <_malloc_r+0x22>
 8008502:	6025      	str	r5, [r4, #0]
 8008504:	e7de      	b.n	80084c4 <_malloc_r+0xa0>
 8008506:	bf00      	nop
 8008508:	20003c2c 	.word	0x20003c2c

0800850c <__cvt>:
 800850c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	ec55 4b10 	vmov	r4, r5, d0
 8008514:	2d00      	cmp	r5, #0
 8008516:	460e      	mov	r6, r1
 8008518:	4619      	mov	r1, r3
 800851a:	462b      	mov	r3, r5
 800851c:	bfbb      	ittet	lt
 800851e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008522:	461d      	movlt	r5, r3
 8008524:	2300      	movge	r3, #0
 8008526:	232d      	movlt	r3, #45	; 0x2d
 8008528:	700b      	strb	r3, [r1, #0]
 800852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008530:	4691      	mov	r9, r2
 8008532:	f023 0820 	bic.w	r8, r3, #32
 8008536:	bfbc      	itt	lt
 8008538:	4622      	movlt	r2, r4
 800853a:	4614      	movlt	r4, r2
 800853c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008540:	d005      	beq.n	800854e <__cvt+0x42>
 8008542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008546:	d100      	bne.n	800854a <__cvt+0x3e>
 8008548:	3601      	adds	r6, #1
 800854a:	2102      	movs	r1, #2
 800854c:	e000      	b.n	8008550 <__cvt+0x44>
 800854e:	2103      	movs	r1, #3
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	ab02      	add	r3, sp, #8
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	ec45 4b10 	vmov	d0, r4, r5
 800855c:	4653      	mov	r3, sl
 800855e:	4632      	mov	r2, r6
 8008560:	f000 fcfa 	bl	8008f58 <_dtoa_r>
 8008564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008568:	4607      	mov	r7, r0
 800856a:	d102      	bne.n	8008572 <__cvt+0x66>
 800856c:	f019 0f01 	tst.w	r9, #1
 8008570:	d022      	beq.n	80085b8 <__cvt+0xac>
 8008572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008576:	eb07 0906 	add.w	r9, r7, r6
 800857a:	d110      	bne.n	800859e <__cvt+0x92>
 800857c:	783b      	ldrb	r3, [r7, #0]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	d10a      	bne.n	8008598 <__cvt+0x8c>
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 fabd 	bl	8000b08 <__aeabi_dcmpeq>
 800858e:	b918      	cbnz	r0, 8008598 <__cvt+0x8c>
 8008590:	f1c6 0601 	rsb	r6, r6, #1
 8008594:	f8ca 6000 	str.w	r6, [sl]
 8008598:	f8da 3000 	ldr.w	r3, [sl]
 800859c:	4499      	add	r9, r3
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80085aa:	b108      	cbz	r0, 80085b0 <__cvt+0xa4>
 80085ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80085b0:	2230      	movs	r2, #48	; 0x30
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	454b      	cmp	r3, r9
 80085b6:	d307      	bcc.n	80085c8 <__cvt+0xbc>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085bc:	1bdb      	subs	r3, r3, r7
 80085be:	4638      	mov	r0, r7
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	b004      	add	sp, #16
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	1c59      	adds	r1, r3, #1
 80085ca:	9103      	str	r1, [sp, #12]
 80085cc:	701a      	strb	r2, [r3, #0]
 80085ce:	e7f0      	b.n	80085b2 <__cvt+0xa6>

080085d0 <__exponent>:
 80085d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d2:	4603      	mov	r3, r0
 80085d4:	2900      	cmp	r1, #0
 80085d6:	bfb8      	it	lt
 80085d8:	4249      	neglt	r1, r1
 80085da:	f803 2b02 	strb.w	r2, [r3], #2
 80085de:	bfb4      	ite	lt
 80085e0:	222d      	movlt	r2, #45	; 0x2d
 80085e2:	222b      	movge	r2, #43	; 0x2b
 80085e4:	2909      	cmp	r1, #9
 80085e6:	7042      	strb	r2, [r0, #1]
 80085e8:	dd2a      	ble.n	8008640 <__exponent+0x70>
 80085ea:	f10d 0407 	add.w	r4, sp, #7
 80085ee:	46a4      	mov	ip, r4
 80085f0:	270a      	movs	r7, #10
 80085f2:	46a6      	mov	lr, r4
 80085f4:	460a      	mov	r2, r1
 80085f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80085fa:	fb07 1516 	mls	r5, r7, r6, r1
 80085fe:	3530      	adds	r5, #48	; 0x30
 8008600:	2a63      	cmp	r2, #99	; 0x63
 8008602:	f104 34ff 	add.w	r4, r4, #4294967295
 8008606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800860a:	4631      	mov	r1, r6
 800860c:	dcf1      	bgt.n	80085f2 <__exponent+0x22>
 800860e:	3130      	adds	r1, #48	; 0x30
 8008610:	f1ae 0502 	sub.w	r5, lr, #2
 8008614:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008618:	1c44      	adds	r4, r0, #1
 800861a:	4629      	mov	r1, r5
 800861c:	4561      	cmp	r1, ip
 800861e:	d30a      	bcc.n	8008636 <__exponent+0x66>
 8008620:	f10d 0209 	add.w	r2, sp, #9
 8008624:	eba2 020e 	sub.w	r2, r2, lr
 8008628:	4565      	cmp	r5, ip
 800862a:	bf88      	it	hi
 800862c:	2200      	movhi	r2, #0
 800862e:	4413      	add	r3, r2
 8008630:	1a18      	subs	r0, r3, r0
 8008632:	b003      	add	sp, #12
 8008634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800863a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800863e:	e7ed      	b.n	800861c <__exponent+0x4c>
 8008640:	2330      	movs	r3, #48	; 0x30
 8008642:	3130      	adds	r1, #48	; 0x30
 8008644:	7083      	strb	r3, [r0, #2]
 8008646:	70c1      	strb	r1, [r0, #3]
 8008648:	1d03      	adds	r3, r0, #4
 800864a:	e7f1      	b.n	8008630 <__exponent+0x60>

0800864c <_printf_float>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	ed2d 8b02 	vpush	{d8}
 8008654:	b08d      	sub	sp, #52	; 0x34
 8008656:	460c      	mov	r4, r1
 8008658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800865c:	4616      	mov	r6, r2
 800865e:	461f      	mov	r7, r3
 8008660:	4605      	mov	r5, r0
 8008662:	f001 fa67 	bl	8009b34 <_localeconv_r>
 8008666:	f8d0 a000 	ldr.w	sl, [r0]
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fdd0 	bl	8000210 <strlen>
 8008670:	2300      	movs	r3, #0
 8008672:	930a      	str	r3, [sp, #40]	; 0x28
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	f8d8 3000 	ldr.w	r3, [r8]
 800867c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008680:	3307      	adds	r3, #7
 8008682:	f023 0307 	bic.w	r3, r3, #7
 8008686:	f103 0208 	add.w	r2, r3, #8
 800868a:	f8c8 2000 	str.w	r2, [r8]
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800869a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80086a4:	ee08 0a10 	vmov	s16, r0
 80086a8:	4b9f      	ldr	r3, [pc, #636]	; (8008928 <_printf_float+0x2dc>)
 80086aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	f7f8 fa5b 	bl	8000b6c <__aeabi_dcmpun>
 80086b6:	bb88      	cbnz	r0, 800871c <_printf_float+0xd0>
 80086b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086bc:	4b9a      	ldr	r3, [pc, #616]	; (8008928 <_printf_float+0x2dc>)
 80086be:	f04f 32ff 	mov.w	r2, #4294967295
 80086c2:	f7f8 fa35 	bl	8000b30 <__aeabi_dcmple>
 80086c6:	bb48      	cbnz	r0, 800871c <_printf_float+0xd0>
 80086c8:	2200      	movs	r2, #0
 80086ca:	2300      	movs	r3, #0
 80086cc:	4640      	mov	r0, r8
 80086ce:	4649      	mov	r1, r9
 80086d0:	f7f8 fa24 	bl	8000b1c <__aeabi_dcmplt>
 80086d4:	b110      	cbz	r0, 80086dc <_printf_float+0x90>
 80086d6:	232d      	movs	r3, #45	; 0x2d
 80086d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086dc:	4b93      	ldr	r3, [pc, #588]	; (800892c <_printf_float+0x2e0>)
 80086de:	4894      	ldr	r0, [pc, #592]	; (8008930 <_printf_float+0x2e4>)
 80086e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086e4:	bf94      	ite	ls
 80086e6:	4698      	movls	r8, r3
 80086e8:	4680      	movhi	r8, r0
 80086ea:	2303      	movs	r3, #3
 80086ec:	6123      	str	r3, [r4, #16]
 80086ee:	9b05      	ldr	r3, [sp, #20]
 80086f0:	f023 0204 	bic.w	r2, r3, #4
 80086f4:	6022      	str	r2, [r4, #0]
 80086f6:	f04f 0900 	mov.w	r9, #0
 80086fa:	9700      	str	r7, [sp, #0]
 80086fc:	4633      	mov	r3, r6
 80086fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8008700:	4621      	mov	r1, r4
 8008702:	4628      	mov	r0, r5
 8008704:	f000 f9d8 	bl	8008ab8 <_printf_common>
 8008708:	3001      	adds	r0, #1
 800870a:	f040 8090 	bne.w	800882e <_printf_float+0x1e2>
 800870e:	f04f 30ff 	mov.w	r0, #4294967295
 8008712:	b00d      	add	sp, #52	; 0x34
 8008714:	ecbd 8b02 	vpop	{d8}
 8008718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871c:	4642      	mov	r2, r8
 800871e:	464b      	mov	r3, r9
 8008720:	4640      	mov	r0, r8
 8008722:	4649      	mov	r1, r9
 8008724:	f7f8 fa22 	bl	8000b6c <__aeabi_dcmpun>
 8008728:	b140      	cbz	r0, 800873c <_printf_float+0xf0>
 800872a:	464b      	mov	r3, r9
 800872c:	2b00      	cmp	r3, #0
 800872e:	bfbc      	itt	lt
 8008730:	232d      	movlt	r3, #45	; 0x2d
 8008732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008736:	487f      	ldr	r0, [pc, #508]	; (8008934 <_printf_float+0x2e8>)
 8008738:	4b7f      	ldr	r3, [pc, #508]	; (8008938 <_printf_float+0x2ec>)
 800873a:	e7d1      	b.n	80086e0 <_printf_float+0x94>
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008742:	9206      	str	r2, [sp, #24]
 8008744:	1c5a      	adds	r2, r3, #1
 8008746:	d13f      	bne.n	80087c8 <_printf_float+0x17c>
 8008748:	2306      	movs	r3, #6
 800874a:	6063      	str	r3, [r4, #4]
 800874c:	9b05      	ldr	r3, [sp, #20]
 800874e:	6861      	ldr	r1, [r4, #4]
 8008750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008754:	2300      	movs	r3, #0
 8008756:	9303      	str	r3, [sp, #12]
 8008758:	ab0a      	add	r3, sp, #40	; 0x28
 800875a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800875e:	ab09      	add	r3, sp, #36	; 0x24
 8008760:	ec49 8b10 	vmov	d0, r8, r9
 8008764:	9300      	str	r3, [sp, #0]
 8008766:	6022      	str	r2, [r4, #0]
 8008768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800876c:	4628      	mov	r0, r5
 800876e:	f7ff fecd 	bl	800850c <__cvt>
 8008772:	9b06      	ldr	r3, [sp, #24]
 8008774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008776:	2b47      	cmp	r3, #71	; 0x47
 8008778:	4680      	mov	r8, r0
 800877a:	d108      	bne.n	800878e <_printf_float+0x142>
 800877c:	1cc8      	adds	r0, r1, #3
 800877e:	db02      	blt.n	8008786 <_printf_float+0x13a>
 8008780:	6863      	ldr	r3, [r4, #4]
 8008782:	4299      	cmp	r1, r3
 8008784:	dd41      	ble.n	800880a <_printf_float+0x1be>
 8008786:	f1ab 0b02 	sub.w	fp, fp, #2
 800878a:	fa5f fb8b 	uxtb.w	fp, fp
 800878e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008792:	d820      	bhi.n	80087d6 <_printf_float+0x18a>
 8008794:	3901      	subs	r1, #1
 8008796:	465a      	mov	r2, fp
 8008798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800879c:	9109      	str	r1, [sp, #36]	; 0x24
 800879e:	f7ff ff17 	bl	80085d0 <__exponent>
 80087a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a4:	1813      	adds	r3, r2, r0
 80087a6:	2a01      	cmp	r2, #1
 80087a8:	4681      	mov	r9, r0
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	dc02      	bgt.n	80087b4 <_printf_float+0x168>
 80087ae:	6822      	ldr	r2, [r4, #0]
 80087b0:	07d2      	lsls	r2, r2, #31
 80087b2:	d501      	bpl.n	80087b8 <_printf_float+0x16c>
 80087b4:	3301      	adds	r3, #1
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d09c      	beq.n	80086fa <_printf_float+0xae>
 80087c0:	232d      	movs	r3, #45	; 0x2d
 80087c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c6:	e798      	b.n	80086fa <_printf_float+0xae>
 80087c8:	9a06      	ldr	r2, [sp, #24]
 80087ca:	2a47      	cmp	r2, #71	; 0x47
 80087cc:	d1be      	bne.n	800874c <_printf_float+0x100>
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1bc      	bne.n	800874c <_printf_float+0x100>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7b9      	b.n	800874a <_printf_float+0xfe>
 80087d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087da:	d118      	bne.n	800880e <_printf_float+0x1c2>
 80087dc:	2900      	cmp	r1, #0
 80087de:	6863      	ldr	r3, [r4, #4]
 80087e0:	dd0b      	ble.n	80087fa <_printf_float+0x1ae>
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	b913      	cbnz	r3, 80087ec <_printf_float+0x1a0>
 80087e6:	6822      	ldr	r2, [r4, #0]
 80087e8:	07d0      	lsls	r0, r2, #31
 80087ea:	d502      	bpl.n	80087f2 <_printf_float+0x1a6>
 80087ec:	3301      	adds	r3, #1
 80087ee:	440b      	add	r3, r1
 80087f0:	6123      	str	r3, [r4, #16]
 80087f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80087f4:	f04f 0900 	mov.w	r9, #0
 80087f8:	e7de      	b.n	80087b8 <_printf_float+0x16c>
 80087fa:	b913      	cbnz	r3, 8008802 <_printf_float+0x1b6>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	07d2      	lsls	r2, r2, #31
 8008800:	d501      	bpl.n	8008806 <_printf_float+0x1ba>
 8008802:	3302      	adds	r3, #2
 8008804:	e7f4      	b.n	80087f0 <_printf_float+0x1a4>
 8008806:	2301      	movs	r3, #1
 8008808:	e7f2      	b.n	80087f0 <_printf_float+0x1a4>
 800880a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800880e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008810:	4299      	cmp	r1, r3
 8008812:	db05      	blt.n	8008820 <_printf_float+0x1d4>
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	6121      	str	r1, [r4, #16]
 8008818:	07d8      	lsls	r0, r3, #31
 800881a:	d5ea      	bpl.n	80087f2 <_printf_float+0x1a6>
 800881c:	1c4b      	adds	r3, r1, #1
 800881e:	e7e7      	b.n	80087f0 <_printf_float+0x1a4>
 8008820:	2900      	cmp	r1, #0
 8008822:	bfd4      	ite	le
 8008824:	f1c1 0202 	rsble	r2, r1, #2
 8008828:	2201      	movgt	r2, #1
 800882a:	4413      	add	r3, r2
 800882c:	e7e0      	b.n	80087f0 <_printf_float+0x1a4>
 800882e:	6823      	ldr	r3, [r4, #0]
 8008830:	055a      	lsls	r2, r3, #21
 8008832:	d407      	bmi.n	8008844 <_printf_float+0x1f8>
 8008834:	6923      	ldr	r3, [r4, #16]
 8008836:	4642      	mov	r2, r8
 8008838:	4631      	mov	r1, r6
 800883a:	4628      	mov	r0, r5
 800883c:	47b8      	blx	r7
 800883e:	3001      	adds	r0, #1
 8008840:	d12c      	bne.n	800889c <_printf_float+0x250>
 8008842:	e764      	b.n	800870e <_printf_float+0xc2>
 8008844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008848:	f240 80e0 	bls.w	8008a0c <_printf_float+0x3c0>
 800884c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008850:	2200      	movs	r2, #0
 8008852:	2300      	movs	r3, #0
 8008854:	f7f8 f958 	bl	8000b08 <__aeabi_dcmpeq>
 8008858:	2800      	cmp	r0, #0
 800885a:	d034      	beq.n	80088c6 <_printf_float+0x27a>
 800885c:	4a37      	ldr	r2, [pc, #220]	; (800893c <_printf_float+0x2f0>)
 800885e:	2301      	movs	r3, #1
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af51 	beq.w	800870e <_printf_float+0xc2>
 800886c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008870:	429a      	cmp	r2, r3
 8008872:	db02      	blt.n	800887a <_printf_float+0x22e>
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	07d8      	lsls	r0, r3, #31
 8008878:	d510      	bpl.n	800889c <_printf_float+0x250>
 800887a:	ee18 3a10 	vmov	r3, s16
 800887e:	4652      	mov	r2, sl
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af41 	beq.w	800870e <_printf_float+0xc2>
 800888c:	f04f 0800 	mov.w	r8, #0
 8008890:	f104 091a 	add.w	r9, r4, #26
 8008894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008896:	3b01      	subs	r3, #1
 8008898:	4543      	cmp	r3, r8
 800889a:	dc09      	bgt.n	80088b0 <_printf_float+0x264>
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	079b      	lsls	r3, r3, #30
 80088a0:	f100 8105 	bmi.w	8008aae <_printf_float+0x462>
 80088a4:	68e0      	ldr	r0, [r4, #12]
 80088a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a8:	4298      	cmp	r0, r3
 80088aa:	bfb8      	it	lt
 80088ac:	4618      	movlt	r0, r3
 80088ae:	e730      	b.n	8008712 <_printf_float+0xc6>
 80088b0:	2301      	movs	r3, #1
 80088b2:	464a      	mov	r2, r9
 80088b4:	4631      	mov	r1, r6
 80088b6:	4628      	mov	r0, r5
 80088b8:	47b8      	blx	r7
 80088ba:	3001      	adds	r0, #1
 80088bc:	f43f af27 	beq.w	800870e <_printf_float+0xc2>
 80088c0:	f108 0801 	add.w	r8, r8, #1
 80088c4:	e7e6      	b.n	8008894 <_printf_float+0x248>
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	dc39      	bgt.n	8008940 <_printf_float+0x2f4>
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <_printf_float+0x2f0>)
 80088ce:	2301      	movs	r3, #1
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af19 	beq.w	800870e <_printf_float+0xc2>
 80088dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088e0:	4313      	orrs	r3, r2
 80088e2:	d102      	bne.n	80088ea <_printf_float+0x29e>
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	07d9      	lsls	r1, r3, #31
 80088e8:	d5d8      	bpl.n	800889c <_printf_float+0x250>
 80088ea:	ee18 3a10 	vmov	r3, s16
 80088ee:	4652      	mov	r2, sl
 80088f0:	4631      	mov	r1, r6
 80088f2:	4628      	mov	r0, r5
 80088f4:	47b8      	blx	r7
 80088f6:	3001      	adds	r0, #1
 80088f8:	f43f af09 	beq.w	800870e <_printf_float+0xc2>
 80088fc:	f04f 0900 	mov.w	r9, #0
 8008900:	f104 0a1a 	add.w	sl, r4, #26
 8008904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008906:	425b      	negs	r3, r3
 8008908:	454b      	cmp	r3, r9
 800890a:	dc01      	bgt.n	8008910 <_printf_float+0x2c4>
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	e792      	b.n	8008836 <_printf_float+0x1ea>
 8008910:	2301      	movs	r3, #1
 8008912:	4652      	mov	r2, sl
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	f43f aef7 	beq.w	800870e <_printf_float+0xc2>
 8008920:	f109 0901 	add.w	r9, r9, #1
 8008924:	e7ee      	b.n	8008904 <_printf_float+0x2b8>
 8008926:	bf00      	nop
 8008928:	7fefffff 	.word	0x7fefffff
 800892c:	0806e3ec 	.word	0x0806e3ec
 8008930:	0806e3f0 	.word	0x0806e3f0
 8008934:	0806e3f8 	.word	0x0806e3f8
 8008938:	0806e3f4 	.word	0x0806e3f4
 800893c:	0806e3fc 	.word	0x0806e3fc
 8008940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008944:	429a      	cmp	r2, r3
 8008946:	bfa8      	it	ge
 8008948:	461a      	movge	r2, r3
 800894a:	2a00      	cmp	r2, #0
 800894c:	4691      	mov	r9, r2
 800894e:	dc37      	bgt.n	80089c0 <_printf_float+0x374>
 8008950:	f04f 0b00 	mov.w	fp, #0
 8008954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008958:	f104 021a 	add.w	r2, r4, #26
 800895c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800895e:	9305      	str	r3, [sp, #20]
 8008960:	eba3 0309 	sub.w	r3, r3, r9
 8008964:	455b      	cmp	r3, fp
 8008966:	dc33      	bgt.n	80089d0 <_printf_float+0x384>
 8008968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800896c:	429a      	cmp	r2, r3
 800896e:	db3b      	blt.n	80089e8 <_printf_float+0x39c>
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d438      	bmi.n	80089e8 <_printf_float+0x39c>
 8008976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008978:	9a05      	ldr	r2, [sp, #20]
 800897a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800897c:	1a9a      	subs	r2, r3, r2
 800897e:	eba3 0901 	sub.w	r9, r3, r1
 8008982:	4591      	cmp	r9, r2
 8008984:	bfa8      	it	ge
 8008986:	4691      	movge	r9, r2
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	dc35      	bgt.n	80089fa <_printf_float+0x3ae>
 800898e:	f04f 0800 	mov.w	r8, #0
 8008992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008996:	f104 0a1a 	add.w	sl, r4, #26
 800899a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	eba3 0309 	sub.w	r3, r3, r9
 80089a4:	4543      	cmp	r3, r8
 80089a6:	f77f af79 	ble.w	800889c <_printf_float+0x250>
 80089aa:	2301      	movs	r3, #1
 80089ac:	4652      	mov	r2, sl
 80089ae:	4631      	mov	r1, r6
 80089b0:	4628      	mov	r0, r5
 80089b2:	47b8      	blx	r7
 80089b4:	3001      	adds	r0, #1
 80089b6:	f43f aeaa 	beq.w	800870e <_printf_float+0xc2>
 80089ba:	f108 0801 	add.w	r8, r8, #1
 80089be:	e7ec      	b.n	800899a <_printf_float+0x34e>
 80089c0:	4613      	mov	r3, r2
 80089c2:	4631      	mov	r1, r6
 80089c4:	4642      	mov	r2, r8
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d1c0      	bne.n	8008950 <_printf_float+0x304>
 80089ce:	e69e      	b.n	800870e <_printf_float+0xc2>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	9205      	str	r2, [sp, #20]
 80089d8:	47b8      	blx	r7
 80089da:	3001      	adds	r0, #1
 80089dc:	f43f ae97 	beq.w	800870e <_printf_float+0xc2>
 80089e0:	9a05      	ldr	r2, [sp, #20]
 80089e2:	f10b 0b01 	add.w	fp, fp, #1
 80089e6:	e7b9      	b.n	800895c <_printf_float+0x310>
 80089e8:	ee18 3a10 	vmov	r3, s16
 80089ec:	4652      	mov	r2, sl
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d1be      	bne.n	8008976 <_printf_float+0x32a>
 80089f8:	e689      	b.n	800870e <_printf_float+0xc2>
 80089fa:	9a05      	ldr	r2, [sp, #20]
 80089fc:	464b      	mov	r3, r9
 80089fe:	4442      	add	r2, r8
 8008a00:	4631      	mov	r1, r6
 8008a02:	4628      	mov	r0, r5
 8008a04:	47b8      	blx	r7
 8008a06:	3001      	adds	r0, #1
 8008a08:	d1c1      	bne.n	800898e <_printf_float+0x342>
 8008a0a:	e680      	b.n	800870e <_printf_float+0xc2>
 8008a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0e:	2a01      	cmp	r2, #1
 8008a10:	dc01      	bgt.n	8008a16 <_printf_float+0x3ca>
 8008a12:	07db      	lsls	r3, r3, #31
 8008a14:	d538      	bpl.n	8008a88 <_printf_float+0x43c>
 8008a16:	2301      	movs	r3, #1
 8008a18:	4642      	mov	r2, r8
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	f43f ae74 	beq.w	800870e <_printf_float+0xc2>
 8008a26:	ee18 3a10 	vmov	r3, s16
 8008a2a:	4652      	mov	r2, sl
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	f43f ae6b 	beq.w	800870e <_printf_float+0xc2>
 8008a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2300      	movs	r3, #0
 8008a40:	f7f8 f862 	bl	8000b08 <__aeabi_dcmpeq>
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_printf_float+0x432>
 8008a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a48:	f108 0201 	add.w	r2, r8, #1
 8008a4c:	3b01      	subs	r3, #1
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	d10e      	bne.n	8008a76 <_printf_float+0x42a>
 8008a58:	e659      	b.n	800870e <_printf_float+0xc2>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae52 	beq.w	800870e <_printf_float+0xc2>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	4543      	cmp	r3, r8
 8008a74:	dcf1      	bgt.n	8008a5a <_printf_float+0x40e>
 8008a76:	464b      	mov	r3, r9
 8008a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a7c:	e6dc      	b.n	8008838 <_printf_float+0x1ec>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	f104 0a1a 	add.w	sl, r4, #26
 8008a86:	e7f2      	b.n	8008a6e <_printf_float+0x422>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	e7df      	b.n	8008a4e <_printf_float+0x402>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	464a      	mov	r2, r9
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	f43f ae38 	beq.w	800870e <_printf_float+0xc2>
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aa6:	1a5b      	subs	r3, r3, r1
 8008aa8:	4543      	cmp	r3, r8
 8008aaa:	dcf0      	bgt.n	8008a8e <_printf_float+0x442>
 8008aac:	e6fa      	b.n	80088a4 <_printf_float+0x258>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	f104 0919 	add.w	r9, r4, #25
 8008ab6:	e7f4      	b.n	8008aa2 <_printf_float+0x456>

08008ab8 <_printf_common>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	4616      	mov	r6, r2
 8008abe:	4699      	mov	r9, r3
 8008ac0:	688a      	ldr	r2, [r1, #8]
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	bfb8      	it	lt
 8008acc:	4613      	movlt	r3, r2
 8008ace:	6033      	str	r3, [r6, #0]
 8008ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	b10a      	cbz	r2, 8008ade <_printf_common+0x26>
 8008ada:	3301      	adds	r3, #1
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	0699      	lsls	r1, r3, #26
 8008ae2:	bf42      	ittt	mi
 8008ae4:	6833      	ldrmi	r3, [r6, #0]
 8008ae6:	3302      	addmi	r3, #2
 8008ae8:	6033      	strmi	r3, [r6, #0]
 8008aea:	6825      	ldr	r5, [r4, #0]
 8008aec:	f015 0506 	ands.w	r5, r5, #6
 8008af0:	d106      	bne.n	8008b00 <_printf_common+0x48>
 8008af2:	f104 0a19 	add.w	sl, r4, #25
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	6832      	ldr	r2, [r6, #0]
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dc26      	bgt.n	8008b4e <_printf_common+0x96>
 8008b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b04:	1e13      	subs	r3, r2, #0
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	2301      	movne	r3, #1
 8008b0c:	0692      	lsls	r2, r2, #26
 8008b0e:	d42b      	bmi.n	8008b68 <_printf_common+0xb0>
 8008b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b14:	4649      	mov	r1, r9
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c0      	blx	r8
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d01e      	beq.n	8008b5c <_printf_common+0xa4>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	68e5      	ldr	r5, [r4, #12]
 8008b22:	6832      	ldr	r2, [r6, #0]
 8008b24:	f003 0306 	and.w	r3, r3, #6
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	bf08      	it	eq
 8008b2c:	1aad      	subeq	r5, r5, r2
 8008b2e:	68a3      	ldr	r3, [r4, #8]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	bf0c      	ite	eq
 8008b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b38:	2500      	movne	r5, #0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfc4      	itt	gt
 8008b3e:	1a9b      	subgt	r3, r3, r2
 8008b40:	18ed      	addgt	r5, r5, r3
 8008b42:	2600      	movs	r6, #0
 8008b44:	341a      	adds	r4, #26
 8008b46:	42b5      	cmp	r5, r6
 8008b48:	d11a      	bne.n	8008b80 <_printf_common+0xc8>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e008      	b.n	8008b60 <_printf_common+0xa8>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4652      	mov	r2, sl
 8008b52:	4649      	mov	r1, r9
 8008b54:	4638      	mov	r0, r7
 8008b56:	47c0      	blx	r8
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d103      	bne.n	8008b64 <_printf_common+0xac>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b64:	3501      	adds	r5, #1
 8008b66:	e7c6      	b.n	8008af6 <_printf_common+0x3e>
 8008b68:	18e1      	adds	r1, r4, r3
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	2030      	movs	r0, #48	; 0x30
 8008b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b72:	4422      	add	r2, r4
 8008b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	e7c7      	b.n	8008b10 <_printf_common+0x58>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4622      	mov	r2, r4
 8008b84:	4649      	mov	r1, r9
 8008b86:	4638      	mov	r0, r7
 8008b88:	47c0      	blx	r8
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d0e6      	beq.n	8008b5c <_printf_common+0xa4>
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7d9      	b.n	8008b46 <_printf_common+0x8e>
	...

08008b94 <_printf_i>:
 8008b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	7e0f      	ldrb	r7, [r1, #24]
 8008b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b9c:	2f78      	cmp	r7, #120	; 0x78
 8008b9e:	4691      	mov	r9, r2
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	469a      	mov	sl, r3
 8008ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008baa:	d807      	bhi.n	8008bbc <_printf_i+0x28>
 8008bac:	2f62      	cmp	r7, #98	; 0x62
 8008bae:	d80a      	bhi.n	8008bc6 <_printf_i+0x32>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	f000 80d8 	beq.w	8008d66 <_printf_i+0x1d2>
 8008bb6:	2f58      	cmp	r7, #88	; 0x58
 8008bb8:	f000 80a3 	beq.w	8008d02 <_printf_i+0x16e>
 8008bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bc4:	e03a      	b.n	8008c3c <_printf_i+0xa8>
 8008bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bca:	2b15      	cmp	r3, #21
 8008bcc:	d8f6      	bhi.n	8008bbc <_printf_i+0x28>
 8008bce:	a101      	add	r1, pc, #4	; (adr r1, 8008bd4 <_printf_i+0x40>)
 8008bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c41 	.word	0x08008c41
 8008bdc:	08008bbd 	.word	0x08008bbd
 8008be0:	08008bbd 	.word	0x08008bbd
 8008be4:	08008bbd 	.word	0x08008bbd
 8008be8:	08008bbd 	.word	0x08008bbd
 8008bec:	08008c41 	.word	0x08008c41
 8008bf0:	08008bbd 	.word	0x08008bbd
 8008bf4:	08008bbd 	.word	0x08008bbd
 8008bf8:	08008bbd 	.word	0x08008bbd
 8008bfc:	08008bbd 	.word	0x08008bbd
 8008c00:	08008d4d 	.word	0x08008d4d
 8008c04:	08008c71 	.word	0x08008c71
 8008c08:	08008d2f 	.word	0x08008d2f
 8008c0c:	08008bbd 	.word	0x08008bbd
 8008c10:	08008bbd 	.word	0x08008bbd
 8008c14:	08008d6f 	.word	0x08008d6f
 8008c18:	08008bbd 	.word	0x08008bbd
 8008c1c:	08008c71 	.word	0x08008c71
 8008c20:	08008bbd 	.word	0x08008bbd
 8008c24:	08008bbd 	.word	0x08008bbd
 8008c28:	08008d37 	.word	0x08008d37
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	602a      	str	r2, [r5, #0]
 8008c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e0a3      	b.n	8008d88 <_printf_i+0x1f4>
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	6829      	ldr	r1, [r5, #0]
 8008c44:	0606      	lsls	r6, r0, #24
 8008c46:	f101 0304 	add.w	r3, r1, #4
 8008c4a:	d50a      	bpl.n	8008c62 <_printf_i+0xce>
 8008c4c:	680e      	ldr	r6, [r1, #0]
 8008c4e:	602b      	str	r3, [r5, #0]
 8008c50:	2e00      	cmp	r6, #0
 8008c52:	da03      	bge.n	8008c5c <_printf_i+0xc8>
 8008c54:	232d      	movs	r3, #45	; 0x2d
 8008c56:	4276      	negs	r6, r6
 8008c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5c:	485e      	ldr	r0, [pc, #376]	; (8008dd8 <_printf_i+0x244>)
 8008c5e:	230a      	movs	r3, #10
 8008c60:	e019      	b.n	8008c96 <_printf_i+0x102>
 8008c62:	680e      	ldr	r6, [r1, #0]
 8008c64:	602b      	str	r3, [r5, #0]
 8008c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c6a:	bf18      	it	ne
 8008c6c:	b236      	sxthne	r6, r6
 8008c6e:	e7ef      	b.n	8008c50 <_printf_i+0xbc>
 8008c70:	682b      	ldr	r3, [r5, #0]
 8008c72:	6820      	ldr	r0, [r4, #0]
 8008c74:	1d19      	adds	r1, r3, #4
 8008c76:	6029      	str	r1, [r5, #0]
 8008c78:	0601      	lsls	r1, r0, #24
 8008c7a:	d501      	bpl.n	8008c80 <_printf_i+0xec>
 8008c7c:	681e      	ldr	r6, [r3, #0]
 8008c7e:	e002      	b.n	8008c86 <_printf_i+0xf2>
 8008c80:	0646      	lsls	r6, r0, #25
 8008c82:	d5fb      	bpl.n	8008c7c <_printf_i+0xe8>
 8008c84:	881e      	ldrh	r6, [r3, #0]
 8008c86:	4854      	ldr	r0, [pc, #336]	; (8008dd8 <_printf_i+0x244>)
 8008c88:	2f6f      	cmp	r7, #111	; 0x6f
 8008c8a:	bf0c      	ite	eq
 8008c8c:	2308      	moveq	r3, #8
 8008c8e:	230a      	movne	r3, #10
 8008c90:	2100      	movs	r1, #0
 8008c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c96:	6865      	ldr	r5, [r4, #4]
 8008c98:	60a5      	str	r5, [r4, #8]
 8008c9a:	2d00      	cmp	r5, #0
 8008c9c:	bfa2      	ittt	ge
 8008c9e:	6821      	ldrge	r1, [r4, #0]
 8008ca0:	f021 0104 	bicge.w	r1, r1, #4
 8008ca4:	6021      	strge	r1, [r4, #0]
 8008ca6:	b90e      	cbnz	r6, 8008cac <_printf_i+0x118>
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	d04d      	beq.n	8008d48 <_printf_i+0x1b4>
 8008cac:	4615      	mov	r5, r2
 8008cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8008cb6:	5dc7      	ldrb	r7, [r0, r7]
 8008cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cbc:	4637      	mov	r7, r6
 8008cbe:	42bb      	cmp	r3, r7
 8008cc0:	460e      	mov	r6, r1
 8008cc2:	d9f4      	bls.n	8008cae <_printf_i+0x11a>
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d10b      	bne.n	8008ce0 <_printf_i+0x14c>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	07de      	lsls	r6, r3, #31
 8008ccc:	d508      	bpl.n	8008ce0 <_printf_i+0x14c>
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	6861      	ldr	r1, [r4, #4]
 8008cd2:	4299      	cmp	r1, r3
 8008cd4:	bfde      	ittt	le
 8008cd6:	2330      	movle	r3, #48	; 0x30
 8008cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ce0:	1b52      	subs	r2, r2, r5
 8008ce2:	6122      	str	r2, [r4, #16]
 8008ce4:	f8cd a000 	str.w	sl, [sp]
 8008ce8:	464b      	mov	r3, r9
 8008cea:	aa03      	add	r2, sp, #12
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f7ff fee2 	bl	8008ab8 <_printf_common>
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	d14c      	bne.n	8008d92 <_printf_i+0x1fe>
 8008cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cfc:	b004      	add	sp, #16
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	4835      	ldr	r0, [pc, #212]	; (8008dd8 <_printf_i+0x244>)
 8008d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008d08:	6829      	ldr	r1, [r5, #0]
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d10:	6029      	str	r1, [r5, #0]
 8008d12:	061d      	lsls	r5, r3, #24
 8008d14:	d514      	bpl.n	8008d40 <_printf_i+0x1ac>
 8008d16:	07df      	lsls	r7, r3, #31
 8008d18:	bf44      	itt	mi
 8008d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d1e:	6023      	strmi	r3, [r4, #0]
 8008d20:	b91e      	cbnz	r6, 8008d2a <_printf_i+0x196>
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	f023 0320 	bic.w	r3, r3, #32
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	2310      	movs	r3, #16
 8008d2c:	e7b0      	b.n	8008c90 <_printf_i+0xfc>
 8008d2e:	6823      	ldr	r3, [r4, #0]
 8008d30:	f043 0320 	orr.w	r3, r3, #32
 8008d34:	6023      	str	r3, [r4, #0]
 8008d36:	2378      	movs	r3, #120	; 0x78
 8008d38:	4828      	ldr	r0, [pc, #160]	; (8008ddc <_printf_i+0x248>)
 8008d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d3e:	e7e3      	b.n	8008d08 <_printf_i+0x174>
 8008d40:	0659      	lsls	r1, r3, #25
 8008d42:	bf48      	it	mi
 8008d44:	b2b6      	uxthmi	r6, r6
 8008d46:	e7e6      	b.n	8008d16 <_printf_i+0x182>
 8008d48:	4615      	mov	r5, r2
 8008d4a:	e7bb      	b.n	8008cc4 <_printf_i+0x130>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	6826      	ldr	r6, [r4, #0]
 8008d50:	6961      	ldr	r1, [r4, #20]
 8008d52:	1d18      	adds	r0, r3, #4
 8008d54:	6028      	str	r0, [r5, #0]
 8008d56:	0635      	lsls	r5, r6, #24
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0x1cc>
 8008d5c:	6019      	str	r1, [r3, #0]
 8008d5e:	e002      	b.n	8008d66 <_printf_i+0x1d2>
 8008d60:	0670      	lsls	r0, r6, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0x1c8>
 8008d64:	8019      	strh	r1, [r3, #0]
 8008d66:	2300      	movs	r3, #0
 8008d68:	6123      	str	r3, [r4, #16]
 8008d6a:	4615      	mov	r5, r2
 8008d6c:	e7ba      	b.n	8008ce4 <_printf_i+0x150>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	1d1a      	adds	r2, r3, #4
 8008d72:	602a      	str	r2, [r5, #0]
 8008d74:	681d      	ldr	r5, [r3, #0]
 8008d76:	6862      	ldr	r2, [r4, #4]
 8008d78:	2100      	movs	r1, #0
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f7f7 fa50 	bl	8000220 <memchr>
 8008d80:	b108      	cbz	r0, 8008d86 <_printf_i+0x1f2>
 8008d82:	1b40      	subs	r0, r0, r5
 8008d84:	6060      	str	r0, [r4, #4]
 8008d86:	6863      	ldr	r3, [r4, #4]
 8008d88:	6123      	str	r3, [r4, #16]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d90:	e7a8      	b.n	8008ce4 <_printf_i+0x150>
 8008d92:	6923      	ldr	r3, [r4, #16]
 8008d94:	462a      	mov	r2, r5
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	47d0      	blx	sl
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d0ab      	beq.n	8008cf8 <_printf_i+0x164>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	079b      	lsls	r3, r3, #30
 8008da4:	d413      	bmi.n	8008dce <_printf_i+0x23a>
 8008da6:	68e0      	ldr	r0, [r4, #12]
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	4298      	cmp	r0, r3
 8008dac:	bfb8      	it	lt
 8008dae:	4618      	movlt	r0, r3
 8008db0:	e7a4      	b.n	8008cfc <_printf_i+0x168>
 8008db2:	2301      	movs	r3, #1
 8008db4:	4632      	mov	r2, r6
 8008db6:	4649      	mov	r1, r9
 8008db8:	4640      	mov	r0, r8
 8008dba:	47d0      	blx	sl
 8008dbc:	3001      	adds	r0, #1
 8008dbe:	d09b      	beq.n	8008cf8 <_printf_i+0x164>
 8008dc0:	3501      	adds	r5, #1
 8008dc2:	68e3      	ldr	r3, [r4, #12]
 8008dc4:	9903      	ldr	r1, [sp, #12]
 8008dc6:	1a5b      	subs	r3, r3, r1
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	dcf2      	bgt.n	8008db2 <_printf_i+0x21e>
 8008dcc:	e7eb      	b.n	8008da6 <_printf_i+0x212>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	f104 0619 	add.w	r6, r4, #25
 8008dd4:	e7f5      	b.n	8008dc2 <_printf_i+0x22e>
 8008dd6:	bf00      	nop
 8008dd8:	0806e3fe 	.word	0x0806e3fe
 8008ddc:	0806e40f 	.word	0x0806e40f

08008de0 <_sbrk_r>:
 8008de0:	b538      	push	{r3, r4, r5, lr}
 8008de2:	4d06      	ldr	r5, [pc, #24]	; (8008dfc <_sbrk_r+0x1c>)
 8008de4:	2300      	movs	r3, #0
 8008de6:	4604      	mov	r4, r0
 8008de8:	4608      	mov	r0, r1
 8008dea:	602b      	str	r3, [r5, #0]
 8008dec:	f7f9 faf2 	bl	80023d4 <_sbrk>
 8008df0:	1c43      	adds	r3, r0, #1
 8008df2:	d102      	bne.n	8008dfa <_sbrk_r+0x1a>
 8008df4:	682b      	ldr	r3, [r5, #0]
 8008df6:	b103      	cbz	r3, 8008dfa <_sbrk_r+0x1a>
 8008df8:	6023      	str	r3, [r4, #0]
 8008dfa:	bd38      	pop	{r3, r4, r5, pc}
 8008dfc:	20003c34 	.word	0x20003c34

08008e00 <siprintf>:
 8008e00:	b40e      	push	{r1, r2, r3}
 8008e02:	b500      	push	{lr}
 8008e04:	b09c      	sub	sp, #112	; 0x70
 8008e06:	ab1d      	add	r3, sp, #116	; 0x74
 8008e08:	9002      	str	r0, [sp, #8]
 8008e0a:	9006      	str	r0, [sp, #24]
 8008e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <siprintf+0x38>)
 8008e12:	9107      	str	r1, [sp, #28]
 8008e14:	9104      	str	r1, [sp, #16]
 8008e16:	4909      	ldr	r1, [pc, #36]	; (8008e3c <siprintf+0x3c>)
 8008e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	6800      	ldr	r0, [r0, #0]
 8008e20:	9301      	str	r3, [sp, #4]
 8008e22:	a902      	add	r1, sp, #8
 8008e24:	f001 faba 	bl	800a39c <_svfiprintf_r>
 8008e28:	9b02      	ldr	r3, [sp, #8]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	b01c      	add	sp, #112	; 0x70
 8008e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e34:	b003      	add	sp, #12
 8008e36:	4770      	bx	lr
 8008e38:	20000738 	.word	0x20000738
 8008e3c:	ffff0208 	.word	0xffff0208

08008e40 <quorem>:
 8008e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e44:	6903      	ldr	r3, [r0, #16]
 8008e46:	690c      	ldr	r4, [r1, #16]
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	4607      	mov	r7, r0
 8008e4c:	f2c0 8081 	blt.w	8008f52 <quorem+0x112>
 8008e50:	3c01      	subs	r4, #1
 8008e52:	f101 0814 	add.w	r8, r1, #20
 8008e56:	f100 0514 	add.w	r5, r0, #20
 8008e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e5e:	9301      	str	r3, [sp, #4]
 8008e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e68:	3301      	adds	r3, #1
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e74:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e78:	d331      	bcc.n	8008ede <quorem+0x9e>
 8008e7a:	f04f 0e00 	mov.w	lr, #0
 8008e7e:	4640      	mov	r0, r8
 8008e80:	46ac      	mov	ip, r5
 8008e82:	46f2      	mov	sl, lr
 8008e84:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e88:	b293      	uxth	r3, r2
 8008e8a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	ebaa 0303 	sub.w	r3, sl, r3
 8008e98:	f8dc a000 	ldr.w	sl, [ip]
 8008e9c:	0c12      	lsrs	r2, r2, #16
 8008e9e:	fa13 f38a 	uxtah	r3, r3, sl
 8008ea2:	fb06 e202 	mla	r2, r6, r2, lr
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	9b00      	ldr	r3, [sp, #0]
 8008eaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008eae:	b292      	uxth	r2, r2
 8008eb0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008eb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eb8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ebc:	4581      	cmp	r9, r0
 8008ebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ec2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ec6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008eca:	d2db      	bcs.n	8008e84 <quorem+0x44>
 8008ecc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ed0:	b92b      	cbnz	r3, 8008ede <quorem+0x9e>
 8008ed2:	9b01      	ldr	r3, [sp, #4]
 8008ed4:	3b04      	subs	r3, #4
 8008ed6:	429d      	cmp	r5, r3
 8008ed8:	461a      	mov	r2, r3
 8008eda:	d32e      	bcc.n	8008f3a <quorem+0xfa>
 8008edc:	613c      	str	r4, [r7, #16]
 8008ede:	4638      	mov	r0, r7
 8008ee0:	f001 f8ba 	bl	800a058 <__mcmp>
 8008ee4:	2800      	cmp	r0, #0
 8008ee6:	db24      	blt.n	8008f32 <quorem+0xf2>
 8008ee8:	3601      	adds	r6, #1
 8008eea:	4628      	mov	r0, r5
 8008eec:	f04f 0c00 	mov.w	ip, #0
 8008ef0:	f858 2b04 	ldr.w	r2, [r8], #4
 8008ef4:	f8d0 e000 	ldr.w	lr, [r0]
 8008ef8:	b293      	uxth	r3, r2
 8008efa:	ebac 0303 	sub.w	r3, ip, r3
 8008efe:	0c12      	lsrs	r2, r2, #16
 8008f00:	fa13 f38e 	uxtah	r3, r3, lr
 8008f04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f12:	45c1      	cmp	r9, r8
 8008f14:	f840 3b04 	str.w	r3, [r0], #4
 8008f18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f1c:	d2e8      	bcs.n	8008ef0 <quorem+0xb0>
 8008f1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f26:	b922      	cbnz	r2, 8008f32 <quorem+0xf2>
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	429d      	cmp	r5, r3
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	d30a      	bcc.n	8008f46 <quorem+0x106>
 8008f30:	613c      	str	r4, [r7, #16]
 8008f32:	4630      	mov	r0, r6
 8008f34:	b003      	add	sp, #12
 8008f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3a:	6812      	ldr	r2, [r2, #0]
 8008f3c:	3b04      	subs	r3, #4
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	d1cc      	bne.n	8008edc <quorem+0x9c>
 8008f42:	3c01      	subs	r4, #1
 8008f44:	e7c7      	b.n	8008ed6 <quorem+0x96>
 8008f46:	6812      	ldr	r2, [r2, #0]
 8008f48:	3b04      	subs	r3, #4
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	d1f0      	bne.n	8008f30 <quorem+0xf0>
 8008f4e:	3c01      	subs	r4, #1
 8008f50:	e7eb      	b.n	8008f2a <quorem+0xea>
 8008f52:	2000      	movs	r0, #0
 8008f54:	e7ee      	b.n	8008f34 <quorem+0xf4>
	...

08008f58 <_dtoa_r>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	ed2d 8b04 	vpush	{d8-d9}
 8008f60:	ec57 6b10 	vmov	r6, r7, d0
 8008f64:	b093      	sub	sp, #76	; 0x4c
 8008f66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f6c:	9106      	str	r1, [sp, #24]
 8008f6e:	ee10 aa10 	vmov	sl, s0
 8008f72:	4604      	mov	r4, r0
 8008f74:	9209      	str	r2, [sp, #36]	; 0x24
 8008f76:	930c      	str	r3, [sp, #48]	; 0x30
 8008f78:	46bb      	mov	fp, r7
 8008f7a:	b975      	cbnz	r5, 8008f9a <_dtoa_r+0x42>
 8008f7c:	2010      	movs	r0, #16
 8008f7e:	f7ff f9c7 	bl	8008310 <malloc>
 8008f82:	4602      	mov	r2, r0
 8008f84:	6260      	str	r0, [r4, #36]	; 0x24
 8008f86:	b920      	cbnz	r0, 8008f92 <_dtoa_r+0x3a>
 8008f88:	4ba7      	ldr	r3, [pc, #668]	; (8009228 <_dtoa_r+0x2d0>)
 8008f8a:	21ea      	movs	r1, #234	; 0xea
 8008f8c:	48a7      	ldr	r0, [pc, #668]	; (800922c <_dtoa_r+0x2d4>)
 8008f8e:	f001 fb05 	bl	800a59c <__assert_func>
 8008f92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008f96:	6005      	str	r5, [r0, #0]
 8008f98:	60c5      	str	r5, [r0, #12]
 8008f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	b151      	cbz	r1, 8008fb6 <_dtoa_r+0x5e>
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	604a      	str	r2, [r1, #4]
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	4093      	lsls	r3, r2
 8008fa8:	608b      	str	r3, [r1, #8]
 8008faa:	4620      	mov	r0, r4
 8008fac:	f000 fe12 	bl	8009bd4 <_Bfree>
 8008fb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
 8008fb6:	1e3b      	subs	r3, r7, #0
 8008fb8:	bfaa      	itet	ge
 8008fba:	2300      	movge	r3, #0
 8008fbc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008fc0:	f8c8 3000 	strge.w	r3, [r8]
 8008fc4:	4b9a      	ldr	r3, [pc, #616]	; (8009230 <_dtoa_r+0x2d8>)
 8008fc6:	bfbc      	itt	lt
 8008fc8:	2201      	movlt	r2, #1
 8008fca:	f8c8 2000 	strlt.w	r2, [r8]
 8008fce:	ea33 030b 	bics.w	r3, r3, fp
 8008fd2:	d11b      	bne.n	800900c <_dtoa_r+0xb4>
 8008fd4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fd6:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fe0:	4333      	orrs	r3, r6
 8008fe2:	f000 8592 	beq.w	8009b0a <_dtoa_r+0xbb2>
 8008fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fe8:	b963      	cbnz	r3, 8009004 <_dtoa_r+0xac>
 8008fea:	4b92      	ldr	r3, [pc, #584]	; (8009234 <_dtoa_r+0x2dc>)
 8008fec:	e022      	b.n	8009034 <_dtoa_r+0xdc>
 8008fee:	4b92      	ldr	r3, [pc, #584]	; (8009238 <_dtoa_r+0x2e0>)
 8008ff0:	9301      	str	r3, [sp, #4]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ff6:	6013      	str	r3, [r2, #0]
 8008ff8:	9801      	ldr	r0, [sp, #4]
 8008ffa:	b013      	add	sp, #76	; 0x4c
 8008ffc:	ecbd 8b04 	vpop	{d8-d9}
 8009000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009004:	4b8b      	ldr	r3, [pc, #556]	; (8009234 <_dtoa_r+0x2dc>)
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	3303      	adds	r3, #3
 800900a:	e7f3      	b.n	8008ff4 <_dtoa_r+0x9c>
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	4650      	mov	r0, sl
 8009012:	4659      	mov	r1, fp
 8009014:	f7f7 fd78 	bl	8000b08 <__aeabi_dcmpeq>
 8009018:	ec4b ab19 	vmov	d9, sl, fp
 800901c:	4680      	mov	r8, r0
 800901e:	b158      	cbz	r0, 8009038 <_dtoa_r+0xe0>
 8009020:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009022:	2301      	movs	r3, #1
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 856b 	beq.w	8009b04 <_dtoa_r+0xbac>
 800902e:	4883      	ldr	r0, [pc, #524]	; (800923c <_dtoa_r+0x2e4>)
 8009030:	6018      	str	r0, [r3, #0]
 8009032:	1e43      	subs	r3, r0, #1
 8009034:	9301      	str	r3, [sp, #4]
 8009036:	e7df      	b.n	8008ff8 <_dtoa_r+0xa0>
 8009038:	ec4b ab10 	vmov	d0, sl, fp
 800903c:	aa10      	add	r2, sp, #64	; 0x40
 800903e:	a911      	add	r1, sp, #68	; 0x44
 8009040:	4620      	mov	r0, r4
 8009042:	f001 f8af 	bl	800a1a4 <__d2b>
 8009046:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800904a:	ee08 0a10 	vmov	s16, r0
 800904e:	2d00      	cmp	r5, #0
 8009050:	f000 8084 	beq.w	800915c <_dtoa_r+0x204>
 8009054:	ee19 3a90 	vmov	r3, s19
 8009058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800905c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009060:	4656      	mov	r6, sl
 8009062:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009066:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800906a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800906e:	4b74      	ldr	r3, [pc, #464]	; (8009240 <_dtoa_r+0x2e8>)
 8009070:	2200      	movs	r2, #0
 8009072:	4630      	mov	r0, r6
 8009074:	4639      	mov	r1, r7
 8009076:	f7f7 f927 	bl	80002c8 <__aeabi_dsub>
 800907a:	a365      	add	r3, pc, #404	; (adr r3, 8009210 <_dtoa_r+0x2b8>)
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f7f7 fada 	bl	8000638 <__aeabi_dmul>
 8009084:	a364      	add	r3, pc, #400	; (adr r3, 8009218 <_dtoa_r+0x2c0>)
 8009086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800908a:	f7f7 f91f 	bl	80002cc <__adddf3>
 800908e:	4606      	mov	r6, r0
 8009090:	4628      	mov	r0, r5
 8009092:	460f      	mov	r7, r1
 8009094:	f7f7 fa66 	bl	8000564 <__aeabi_i2d>
 8009098:	a361      	add	r3, pc, #388	; (adr r3, 8009220 <_dtoa_r+0x2c8>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 facb 	bl	8000638 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 f90f 	bl	80002cc <__adddf3>
 80090ae:	4606      	mov	r6, r0
 80090b0:	460f      	mov	r7, r1
 80090b2:	f7f7 fd71 	bl	8000b98 <__aeabi_d2iz>
 80090b6:	2200      	movs	r2, #0
 80090b8:	9000      	str	r0, [sp, #0]
 80090ba:	2300      	movs	r3, #0
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fd2c 	bl	8000b1c <__aeabi_dcmplt>
 80090c4:	b150      	cbz	r0, 80090dc <_dtoa_r+0x184>
 80090c6:	9800      	ldr	r0, [sp, #0]
 80090c8:	f7f7 fa4c 	bl	8000564 <__aeabi_i2d>
 80090cc:	4632      	mov	r2, r6
 80090ce:	463b      	mov	r3, r7
 80090d0:	f7f7 fd1a 	bl	8000b08 <__aeabi_dcmpeq>
 80090d4:	b910      	cbnz	r0, 80090dc <_dtoa_r+0x184>
 80090d6:	9b00      	ldr	r3, [sp, #0]
 80090d8:	3b01      	subs	r3, #1
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	2b16      	cmp	r3, #22
 80090e0:	d85a      	bhi.n	8009198 <_dtoa_r+0x240>
 80090e2:	9a00      	ldr	r2, [sp, #0]
 80090e4:	4b57      	ldr	r3, [pc, #348]	; (8009244 <_dtoa_r+0x2ec>)
 80090e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	ec51 0b19 	vmov	r0, r1, d9
 80090f2:	f7f7 fd13 	bl	8000b1c <__aeabi_dcmplt>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d050      	beq.n	800919c <_dtoa_r+0x244>
 80090fa:	9b00      	ldr	r3, [sp, #0]
 80090fc:	3b01      	subs	r3, #1
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	930b      	str	r3, [sp, #44]	; 0x2c
 8009104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009106:	1b5d      	subs	r5, r3, r5
 8009108:	1e6b      	subs	r3, r5, #1
 800910a:	9305      	str	r3, [sp, #20]
 800910c:	bf45      	ittet	mi
 800910e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009112:	9304      	strmi	r3, [sp, #16]
 8009114:	2300      	movpl	r3, #0
 8009116:	2300      	movmi	r3, #0
 8009118:	bf4c      	ite	mi
 800911a:	9305      	strmi	r3, [sp, #20]
 800911c:	9304      	strpl	r3, [sp, #16]
 800911e:	9b00      	ldr	r3, [sp, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	db3d      	blt.n	80091a0 <_dtoa_r+0x248>
 8009124:	9b05      	ldr	r3, [sp, #20]
 8009126:	9a00      	ldr	r2, [sp, #0]
 8009128:	920a      	str	r2, [sp, #40]	; 0x28
 800912a:	4413      	add	r3, r2
 800912c:	9305      	str	r3, [sp, #20]
 800912e:	2300      	movs	r3, #0
 8009130:	9307      	str	r3, [sp, #28]
 8009132:	9b06      	ldr	r3, [sp, #24]
 8009134:	2b09      	cmp	r3, #9
 8009136:	f200 8089 	bhi.w	800924c <_dtoa_r+0x2f4>
 800913a:	2b05      	cmp	r3, #5
 800913c:	bfc4      	itt	gt
 800913e:	3b04      	subgt	r3, #4
 8009140:	9306      	strgt	r3, [sp, #24]
 8009142:	9b06      	ldr	r3, [sp, #24]
 8009144:	f1a3 0302 	sub.w	r3, r3, #2
 8009148:	bfcc      	ite	gt
 800914a:	2500      	movgt	r5, #0
 800914c:	2501      	movle	r5, #1
 800914e:	2b03      	cmp	r3, #3
 8009150:	f200 8087 	bhi.w	8009262 <_dtoa_r+0x30a>
 8009154:	e8df f003 	tbb	[pc, r3]
 8009158:	59383a2d 	.word	0x59383a2d
 800915c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009160:	441d      	add	r5, r3
 8009162:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009166:	2b20      	cmp	r3, #32
 8009168:	bfc1      	itttt	gt
 800916a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800916e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009172:	fa0b f303 	lslgt.w	r3, fp, r3
 8009176:	fa26 f000 	lsrgt.w	r0, r6, r0
 800917a:	bfda      	itte	le
 800917c:	f1c3 0320 	rsble	r3, r3, #32
 8009180:	fa06 f003 	lslle.w	r0, r6, r3
 8009184:	4318      	orrgt	r0, r3
 8009186:	f7f7 f9dd 	bl	8000544 <__aeabi_ui2d>
 800918a:	2301      	movs	r3, #1
 800918c:	4606      	mov	r6, r0
 800918e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009192:	3d01      	subs	r5, #1
 8009194:	930e      	str	r3, [sp, #56]	; 0x38
 8009196:	e76a      	b.n	800906e <_dtoa_r+0x116>
 8009198:	2301      	movs	r3, #1
 800919a:	e7b2      	b.n	8009102 <_dtoa_r+0x1aa>
 800919c:	900b      	str	r0, [sp, #44]	; 0x2c
 800919e:	e7b1      	b.n	8009104 <_dtoa_r+0x1ac>
 80091a0:	9b04      	ldr	r3, [sp, #16]
 80091a2:	9a00      	ldr	r2, [sp, #0]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	9304      	str	r3, [sp, #16]
 80091a8:	4253      	negs	r3, r2
 80091aa:	9307      	str	r3, [sp, #28]
 80091ac:	2300      	movs	r3, #0
 80091ae:	930a      	str	r3, [sp, #40]	; 0x28
 80091b0:	e7bf      	b.n	8009132 <_dtoa_r+0x1da>
 80091b2:	2300      	movs	r3, #0
 80091b4:	9308      	str	r3, [sp, #32]
 80091b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dc55      	bgt.n	8009268 <_dtoa_r+0x310>
 80091bc:	2301      	movs	r3, #1
 80091be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80091c2:	461a      	mov	r2, r3
 80091c4:	9209      	str	r2, [sp, #36]	; 0x24
 80091c6:	e00c      	b.n	80091e2 <_dtoa_r+0x28a>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7f3      	b.n	80091b4 <_dtoa_r+0x25c>
 80091cc:	2300      	movs	r3, #0
 80091ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d0:	9308      	str	r3, [sp, #32]
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	4413      	add	r3, r2
 80091d6:	9302      	str	r3, [sp, #8]
 80091d8:	3301      	adds	r3, #1
 80091da:	2b01      	cmp	r3, #1
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	bfb8      	it	lt
 80091e0:	2301      	movlt	r3, #1
 80091e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091e4:	2200      	movs	r2, #0
 80091e6:	6042      	str	r2, [r0, #4]
 80091e8:	2204      	movs	r2, #4
 80091ea:	f102 0614 	add.w	r6, r2, #20
 80091ee:	429e      	cmp	r6, r3
 80091f0:	6841      	ldr	r1, [r0, #4]
 80091f2:	d93d      	bls.n	8009270 <_dtoa_r+0x318>
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 fcad 	bl	8009b54 <_Balloc>
 80091fa:	9001      	str	r0, [sp, #4]
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d13b      	bne.n	8009278 <_dtoa_r+0x320>
 8009200:	4b11      	ldr	r3, [pc, #68]	; (8009248 <_dtoa_r+0x2f0>)
 8009202:	4602      	mov	r2, r0
 8009204:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009208:	e6c0      	b.n	8008f8c <_dtoa_r+0x34>
 800920a:	2301      	movs	r3, #1
 800920c:	e7df      	b.n	80091ce <_dtoa_r+0x276>
 800920e:	bf00      	nop
 8009210:	636f4361 	.word	0x636f4361
 8009214:	3fd287a7 	.word	0x3fd287a7
 8009218:	8b60c8b3 	.word	0x8b60c8b3
 800921c:	3fc68a28 	.word	0x3fc68a28
 8009220:	509f79fb 	.word	0x509f79fb
 8009224:	3fd34413 	.word	0x3fd34413
 8009228:	0806e42d 	.word	0x0806e42d
 800922c:	0806e444 	.word	0x0806e444
 8009230:	7ff00000 	.word	0x7ff00000
 8009234:	0806e429 	.word	0x0806e429
 8009238:	0806e420 	.word	0x0806e420
 800923c:	0806e3fd 	.word	0x0806e3fd
 8009240:	3ff80000 	.word	0x3ff80000
 8009244:	0806e538 	.word	0x0806e538
 8009248:	0806e49f 	.word	0x0806e49f
 800924c:	2501      	movs	r5, #1
 800924e:	2300      	movs	r3, #0
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	9508      	str	r5, [sp, #32]
 8009254:	f04f 33ff 	mov.w	r3, #4294967295
 8009258:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800925c:	2200      	movs	r2, #0
 800925e:	2312      	movs	r3, #18
 8009260:	e7b0      	b.n	80091c4 <_dtoa_r+0x26c>
 8009262:	2301      	movs	r3, #1
 8009264:	9308      	str	r3, [sp, #32]
 8009266:	e7f5      	b.n	8009254 <_dtoa_r+0x2fc>
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800926e:	e7b8      	b.n	80091e2 <_dtoa_r+0x28a>
 8009270:	3101      	adds	r1, #1
 8009272:	6041      	str	r1, [r0, #4]
 8009274:	0052      	lsls	r2, r2, #1
 8009276:	e7b8      	b.n	80091ea <_dtoa_r+0x292>
 8009278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800927a:	9a01      	ldr	r2, [sp, #4]
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	2b0e      	cmp	r3, #14
 8009282:	f200 809d 	bhi.w	80093c0 <_dtoa_r+0x468>
 8009286:	2d00      	cmp	r5, #0
 8009288:	f000 809a 	beq.w	80093c0 <_dtoa_r+0x468>
 800928c:	9b00      	ldr	r3, [sp, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	dd32      	ble.n	80092f8 <_dtoa_r+0x3a0>
 8009292:	4ab7      	ldr	r2, [pc, #732]	; (8009570 <_dtoa_r+0x618>)
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800929c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80092a0:	9b00      	ldr	r3, [sp, #0]
 80092a2:	05d8      	lsls	r0, r3, #23
 80092a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80092a8:	d516      	bpl.n	80092d8 <_dtoa_r+0x380>
 80092aa:	4bb2      	ldr	r3, [pc, #712]	; (8009574 <_dtoa_r+0x61c>)
 80092ac:	ec51 0b19 	vmov	r0, r1, d9
 80092b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092b4:	f7f7 faea 	bl	800088c <__aeabi_ddiv>
 80092b8:	f007 070f 	and.w	r7, r7, #15
 80092bc:	4682      	mov	sl, r0
 80092be:	468b      	mov	fp, r1
 80092c0:	2503      	movs	r5, #3
 80092c2:	4eac      	ldr	r6, [pc, #688]	; (8009574 <_dtoa_r+0x61c>)
 80092c4:	b957      	cbnz	r7, 80092dc <_dtoa_r+0x384>
 80092c6:	4642      	mov	r2, r8
 80092c8:	464b      	mov	r3, r9
 80092ca:	4650      	mov	r0, sl
 80092cc:	4659      	mov	r1, fp
 80092ce:	f7f7 fadd 	bl	800088c <__aeabi_ddiv>
 80092d2:	4682      	mov	sl, r0
 80092d4:	468b      	mov	fp, r1
 80092d6:	e028      	b.n	800932a <_dtoa_r+0x3d2>
 80092d8:	2502      	movs	r5, #2
 80092da:	e7f2      	b.n	80092c2 <_dtoa_r+0x36a>
 80092dc:	07f9      	lsls	r1, r7, #31
 80092de:	d508      	bpl.n	80092f2 <_dtoa_r+0x39a>
 80092e0:	4640      	mov	r0, r8
 80092e2:	4649      	mov	r1, r9
 80092e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092e8:	f7f7 f9a6 	bl	8000638 <__aeabi_dmul>
 80092ec:	3501      	adds	r5, #1
 80092ee:	4680      	mov	r8, r0
 80092f0:	4689      	mov	r9, r1
 80092f2:	107f      	asrs	r7, r7, #1
 80092f4:	3608      	adds	r6, #8
 80092f6:	e7e5      	b.n	80092c4 <_dtoa_r+0x36c>
 80092f8:	f000 809b 	beq.w	8009432 <_dtoa_r+0x4da>
 80092fc:	9b00      	ldr	r3, [sp, #0]
 80092fe:	4f9d      	ldr	r7, [pc, #628]	; (8009574 <_dtoa_r+0x61c>)
 8009300:	425e      	negs	r6, r3
 8009302:	4b9b      	ldr	r3, [pc, #620]	; (8009570 <_dtoa_r+0x618>)
 8009304:	f006 020f 	and.w	r2, r6, #15
 8009308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800930c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009310:	ec51 0b19 	vmov	r0, r1, d9
 8009314:	f7f7 f990 	bl	8000638 <__aeabi_dmul>
 8009318:	1136      	asrs	r6, r6, #4
 800931a:	4682      	mov	sl, r0
 800931c:	468b      	mov	fp, r1
 800931e:	2300      	movs	r3, #0
 8009320:	2502      	movs	r5, #2
 8009322:	2e00      	cmp	r6, #0
 8009324:	d17a      	bne.n	800941c <_dtoa_r+0x4c4>
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1d3      	bne.n	80092d2 <_dtoa_r+0x37a>
 800932a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	f000 8082 	beq.w	8009436 <_dtoa_r+0x4de>
 8009332:	4b91      	ldr	r3, [pc, #580]	; (8009578 <_dtoa_r+0x620>)
 8009334:	2200      	movs	r2, #0
 8009336:	4650      	mov	r0, sl
 8009338:	4659      	mov	r1, fp
 800933a:	f7f7 fbef 	bl	8000b1c <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	d079      	beq.n	8009436 <_dtoa_r+0x4de>
 8009342:	9b03      	ldr	r3, [sp, #12]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d076      	beq.n	8009436 <_dtoa_r+0x4de>
 8009348:	9b02      	ldr	r3, [sp, #8]
 800934a:	2b00      	cmp	r3, #0
 800934c:	dd36      	ble.n	80093bc <_dtoa_r+0x464>
 800934e:	9b00      	ldr	r3, [sp, #0]
 8009350:	4650      	mov	r0, sl
 8009352:	4659      	mov	r1, fp
 8009354:	1e5f      	subs	r7, r3, #1
 8009356:	2200      	movs	r2, #0
 8009358:	4b88      	ldr	r3, [pc, #544]	; (800957c <_dtoa_r+0x624>)
 800935a:	f7f7 f96d 	bl	8000638 <__aeabi_dmul>
 800935e:	9e02      	ldr	r6, [sp, #8]
 8009360:	4682      	mov	sl, r0
 8009362:	468b      	mov	fp, r1
 8009364:	3501      	adds	r5, #1
 8009366:	4628      	mov	r0, r5
 8009368:	f7f7 f8fc 	bl	8000564 <__aeabi_i2d>
 800936c:	4652      	mov	r2, sl
 800936e:	465b      	mov	r3, fp
 8009370:	f7f7 f962 	bl	8000638 <__aeabi_dmul>
 8009374:	4b82      	ldr	r3, [pc, #520]	; (8009580 <_dtoa_r+0x628>)
 8009376:	2200      	movs	r2, #0
 8009378:	f7f6 ffa8 	bl	80002cc <__adddf3>
 800937c:	46d0      	mov	r8, sl
 800937e:	46d9      	mov	r9, fp
 8009380:	4682      	mov	sl, r0
 8009382:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009386:	2e00      	cmp	r6, #0
 8009388:	d158      	bne.n	800943c <_dtoa_r+0x4e4>
 800938a:	4b7e      	ldr	r3, [pc, #504]	; (8009584 <_dtoa_r+0x62c>)
 800938c:	2200      	movs	r2, #0
 800938e:	4640      	mov	r0, r8
 8009390:	4649      	mov	r1, r9
 8009392:	f7f6 ff99 	bl	80002c8 <__aeabi_dsub>
 8009396:	4652      	mov	r2, sl
 8009398:	465b      	mov	r3, fp
 800939a:	4680      	mov	r8, r0
 800939c:	4689      	mov	r9, r1
 800939e:	f7f7 fbdb 	bl	8000b58 <__aeabi_dcmpgt>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f040 8295 	bne.w	80098d2 <_dtoa_r+0x97a>
 80093a8:	4652      	mov	r2, sl
 80093aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80093ae:	4640      	mov	r0, r8
 80093b0:	4649      	mov	r1, r9
 80093b2:	f7f7 fbb3 	bl	8000b1c <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f040 8289 	bne.w	80098ce <_dtoa_r+0x976>
 80093bc:	ec5b ab19 	vmov	sl, fp, d9
 80093c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f2c0 8148 	blt.w	8009658 <_dtoa_r+0x700>
 80093c8:	9a00      	ldr	r2, [sp, #0]
 80093ca:	2a0e      	cmp	r2, #14
 80093cc:	f300 8144 	bgt.w	8009658 <_dtoa_r+0x700>
 80093d0:	4b67      	ldr	r3, [pc, #412]	; (8009570 <_dtoa_r+0x618>)
 80093d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80093da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f280 80d5 	bge.w	800958c <_dtoa_r+0x634>
 80093e2:	9b03      	ldr	r3, [sp, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f300 80d1 	bgt.w	800958c <_dtoa_r+0x634>
 80093ea:	f040 826f 	bne.w	80098cc <_dtoa_r+0x974>
 80093ee:	4b65      	ldr	r3, [pc, #404]	; (8009584 <_dtoa_r+0x62c>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	4640      	mov	r0, r8
 80093f4:	4649      	mov	r1, r9
 80093f6:	f7f7 f91f 	bl	8000638 <__aeabi_dmul>
 80093fa:	4652      	mov	r2, sl
 80093fc:	465b      	mov	r3, fp
 80093fe:	f7f7 fba1 	bl	8000b44 <__aeabi_dcmpge>
 8009402:	9e03      	ldr	r6, [sp, #12]
 8009404:	4637      	mov	r7, r6
 8009406:	2800      	cmp	r0, #0
 8009408:	f040 8245 	bne.w	8009896 <_dtoa_r+0x93e>
 800940c:	9d01      	ldr	r5, [sp, #4]
 800940e:	2331      	movs	r3, #49	; 0x31
 8009410:	f805 3b01 	strb.w	r3, [r5], #1
 8009414:	9b00      	ldr	r3, [sp, #0]
 8009416:	3301      	adds	r3, #1
 8009418:	9300      	str	r3, [sp, #0]
 800941a:	e240      	b.n	800989e <_dtoa_r+0x946>
 800941c:	07f2      	lsls	r2, r6, #31
 800941e:	d505      	bpl.n	800942c <_dtoa_r+0x4d4>
 8009420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009424:	f7f7 f908 	bl	8000638 <__aeabi_dmul>
 8009428:	3501      	adds	r5, #1
 800942a:	2301      	movs	r3, #1
 800942c:	1076      	asrs	r6, r6, #1
 800942e:	3708      	adds	r7, #8
 8009430:	e777      	b.n	8009322 <_dtoa_r+0x3ca>
 8009432:	2502      	movs	r5, #2
 8009434:	e779      	b.n	800932a <_dtoa_r+0x3d2>
 8009436:	9f00      	ldr	r7, [sp, #0]
 8009438:	9e03      	ldr	r6, [sp, #12]
 800943a:	e794      	b.n	8009366 <_dtoa_r+0x40e>
 800943c:	9901      	ldr	r1, [sp, #4]
 800943e:	4b4c      	ldr	r3, [pc, #304]	; (8009570 <_dtoa_r+0x618>)
 8009440:	4431      	add	r1, r6
 8009442:	910d      	str	r1, [sp, #52]	; 0x34
 8009444:	9908      	ldr	r1, [sp, #32]
 8009446:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800944a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800944e:	2900      	cmp	r1, #0
 8009450:	d043      	beq.n	80094da <_dtoa_r+0x582>
 8009452:	494d      	ldr	r1, [pc, #308]	; (8009588 <_dtoa_r+0x630>)
 8009454:	2000      	movs	r0, #0
 8009456:	f7f7 fa19 	bl	800088c <__aeabi_ddiv>
 800945a:	4652      	mov	r2, sl
 800945c:	465b      	mov	r3, fp
 800945e:	f7f6 ff33 	bl	80002c8 <__aeabi_dsub>
 8009462:	9d01      	ldr	r5, [sp, #4]
 8009464:	4682      	mov	sl, r0
 8009466:	468b      	mov	fp, r1
 8009468:	4649      	mov	r1, r9
 800946a:	4640      	mov	r0, r8
 800946c:	f7f7 fb94 	bl	8000b98 <__aeabi_d2iz>
 8009470:	4606      	mov	r6, r0
 8009472:	f7f7 f877 	bl	8000564 <__aeabi_i2d>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4640      	mov	r0, r8
 800947c:	4649      	mov	r1, r9
 800947e:	f7f6 ff23 	bl	80002c8 <__aeabi_dsub>
 8009482:	3630      	adds	r6, #48	; 0x30
 8009484:	f805 6b01 	strb.w	r6, [r5], #1
 8009488:	4652      	mov	r2, sl
 800948a:	465b      	mov	r3, fp
 800948c:	4680      	mov	r8, r0
 800948e:	4689      	mov	r9, r1
 8009490:	f7f7 fb44 	bl	8000b1c <__aeabi_dcmplt>
 8009494:	2800      	cmp	r0, #0
 8009496:	d163      	bne.n	8009560 <_dtoa_r+0x608>
 8009498:	4642      	mov	r2, r8
 800949a:	464b      	mov	r3, r9
 800949c:	4936      	ldr	r1, [pc, #216]	; (8009578 <_dtoa_r+0x620>)
 800949e:	2000      	movs	r0, #0
 80094a0:	f7f6 ff12 	bl	80002c8 <__aeabi_dsub>
 80094a4:	4652      	mov	r2, sl
 80094a6:	465b      	mov	r3, fp
 80094a8:	f7f7 fb38 	bl	8000b1c <__aeabi_dcmplt>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	f040 80b5 	bne.w	800961c <_dtoa_r+0x6c4>
 80094b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094b4:	429d      	cmp	r5, r3
 80094b6:	d081      	beq.n	80093bc <_dtoa_r+0x464>
 80094b8:	4b30      	ldr	r3, [pc, #192]	; (800957c <_dtoa_r+0x624>)
 80094ba:	2200      	movs	r2, #0
 80094bc:	4650      	mov	r0, sl
 80094be:	4659      	mov	r1, fp
 80094c0:	f7f7 f8ba 	bl	8000638 <__aeabi_dmul>
 80094c4:	4b2d      	ldr	r3, [pc, #180]	; (800957c <_dtoa_r+0x624>)
 80094c6:	4682      	mov	sl, r0
 80094c8:	468b      	mov	fp, r1
 80094ca:	4640      	mov	r0, r8
 80094cc:	4649      	mov	r1, r9
 80094ce:	2200      	movs	r2, #0
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	4680      	mov	r8, r0
 80094d6:	4689      	mov	r9, r1
 80094d8:	e7c6      	b.n	8009468 <_dtoa_r+0x510>
 80094da:	4650      	mov	r0, sl
 80094dc:	4659      	mov	r1, fp
 80094de:	f7f7 f8ab 	bl	8000638 <__aeabi_dmul>
 80094e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80094e4:	9d01      	ldr	r5, [sp, #4]
 80094e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e8:	4682      	mov	sl, r0
 80094ea:	468b      	mov	fp, r1
 80094ec:	4649      	mov	r1, r9
 80094ee:	4640      	mov	r0, r8
 80094f0:	f7f7 fb52 	bl	8000b98 <__aeabi_d2iz>
 80094f4:	4606      	mov	r6, r0
 80094f6:	f7f7 f835 	bl	8000564 <__aeabi_i2d>
 80094fa:	3630      	adds	r6, #48	; 0x30
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4640      	mov	r0, r8
 8009502:	4649      	mov	r1, r9
 8009504:	f7f6 fee0 	bl	80002c8 <__aeabi_dsub>
 8009508:	f805 6b01 	strb.w	r6, [r5], #1
 800950c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800950e:	429d      	cmp	r5, r3
 8009510:	4680      	mov	r8, r0
 8009512:	4689      	mov	r9, r1
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	d124      	bne.n	8009564 <_dtoa_r+0x60c>
 800951a:	4b1b      	ldr	r3, [pc, #108]	; (8009588 <_dtoa_r+0x630>)
 800951c:	4650      	mov	r0, sl
 800951e:	4659      	mov	r1, fp
 8009520:	f7f6 fed4 	bl	80002cc <__adddf3>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4640      	mov	r0, r8
 800952a:	4649      	mov	r1, r9
 800952c:	f7f7 fb14 	bl	8000b58 <__aeabi_dcmpgt>
 8009530:	2800      	cmp	r0, #0
 8009532:	d173      	bne.n	800961c <_dtoa_r+0x6c4>
 8009534:	4652      	mov	r2, sl
 8009536:	465b      	mov	r3, fp
 8009538:	4913      	ldr	r1, [pc, #76]	; (8009588 <_dtoa_r+0x630>)
 800953a:	2000      	movs	r0, #0
 800953c:	f7f6 fec4 	bl	80002c8 <__aeabi_dsub>
 8009540:	4602      	mov	r2, r0
 8009542:	460b      	mov	r3, r1
 8009544:	4640      	mov	r0, r8
 8009546:	4649      	mov	r1, r9
 8009548:	f7f7 fae8 	bl	8000b1c <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	f43f af35 	beq.w	80093bc <_dtoa_r+0x464>
 8009552:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009554:	1e6b      	subs	r3, r5, #1
 8009556:	930f      	str	r3, [sp, #60]	; 0x3c
 8009558:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800955c:	2b30      	cmp	r3, #48	; 0x30
 800955e:	d0f8      	beq.n	8009552 <_dtoa_r+0x5fa>
 8009560:	9700      	str	r7, [sp, #0]
 8009562:	e049      	b.n	80095f8 <_dtoa_r+0x6a0>
 8009564:	4b05      	ldr	r3, [pc, #20]	; (800957c <_dtoa_r+0x624>)
 8009566:	f7f7 f867 	bl	8000638 <__aeabi_dmul>
 800956a:	4680      	mov	r8, r0
 800956c:	4689      	mov	r9, r1
 800956e:	e7bd      	b.n	80094ec <_dtoa_r+0x594>
 8009570:	0806e538 	.word	0x0806e538
 8009574:	0806e510 	.word	0x0806e510
 8009578:	3ff00000 	.word	0x3ff00000
 800957c:	40240000 	.word	0x40240000
 8009580:	401c0000 	.word	0x401c0000
 8009584:	40140000 	.word	0x40140000
 8009588:	3fe00000 	.word	0x3fe00000
 800958c:	9d01      	ldr	r5, [sp, #4]
 800958e:	4656      	mov	r6, sl
 8009590:	465f      	mov	r7, fp
 8009592:	4642      	mov	r2, r8
 8009594:	464b      	mov	r3, r9
 8009596:	4630      	mov	r0, r6
 8009598:	4639      	mov	r1, r7
 800959a:	f7f7 f977 	bl	800088c <__aeabi_ddiv>
 800959e:	f7f7 fafb 	bl	8000b98 <__aeabi_d2iz>
 80095a2:	4682      	mov	sl, r0
 80095a4:	f7f6 ffde 	bl	8000564 <__aeabi_i2d>
 80095a8:	4642      	mov	r2, r8
 80095aa:	464b      	mov	r3, r9
 80095ac:	f7f7 f844 	bl	8000638 <__aeabi_dmul>
 80095b0:	4602      	mov	r2, r0
 80095b2:	460b      	mov	r3, r1
 80095b4:	4630      	mov	r0, r6
 80095b6:	4639      	mov	r1, r7
 80095b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80095bc:	f7f6 fe84 	bl	80002c8 <__aeabi_dsub>
 80095c0:	f805 6b01 	strb.w	r6, [r5], #1
 80095c4:	9e01      	ldr	r6, [sp, #4]
 80095c6:	9f03      	ldr	r7, [sp, #12]
 80095c8:	1bae      	subs	r6, r5, r6
 80095ca:	42b7      	cmp	r7, r6
 80095cc:	4602      	mov	r2, r0
 80095ce:	460b      	mov	r3, r1
 80095d0:	d135      	bne.n	800963e <_dtoa_r+0x6e6>
 80095d2:	f7f6 fe7b 	bl	80002cc <__adddf3>
 80095d6:	4642      	mov	r2, r8
 80095d8:	464b      	mov	r3, r9
 80095da:	4606      	mov	r6, r0
 80095dc:	460f      	mov	r7, r1
 80095de:	f7f7 fabb 	bl	8000b58 <__aeabi_dcmpgt>
 80095e2:	b9d0      	cbnz	r0, 800961a <_dtoa_r+0x6c2>
 80095e4:	4642      	mov	r2, r8
 80095e6:	464b      	mov	r3, r9
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 fa8c 	bl	8000b08 <__aeabi_dcmpeq>
 80095f0:	b110      	cbz	r0, 80095f8 <_dtoa_r+0x6a0>
 80095f2:	f01a 0f01 	tst.w	sl, #1
 80095f6:	d110      	bne.n	800961a <_dtoa_r+0x6c2>
 80095f8:	4620      	mov	r0, r4
 80095fa:	ee18 1a10 	vmov	r1, s16
 80095fe:	f000 fae9 	bl	8009bd4 <_Bfree>
 8009602:	2300      	movs	r3, #0
 8009604:	9800      	ldr	r0, [sp, #0]
 8009606:	702b      	strb	r3, [r5, #0]
 8009608:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800960a:	3001      	adds	r0, #1
 800960c:	6018      	str	r0, [r3, #0]
 800960e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009610:	2b00      	cmp	r3, #0
 8009612:	f43f acf1 	beq.w	8008ff8 <_dtoa_r+0xa0>
 8009616:	601d      	str	r5, [r3, #0]
 8009618:	e4ee      	b.n	8008ff8 <_dtoa_r+0xa0>
 800961a:	9f00      	ldr	r7, [sp, #0]
 800961c:	462b      	mov	r3, r5
 800961e:	461d      	mov	r5, r3
 8009620:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009624:	2a39      	cmp	r2, #57	; 0x39
 8009626:	d106      	bne.n	8009636 <_dtoa_r+0x6de>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	429a      	cmp	r2, r3
 800962c:	d1f7      	bne.n	800961e <_dtoa_r+0x6c6>
 800962e:	9901      	ldr	r1, [sp, #4]
 8009630:	2230      	movs	r2, #48	; 0x30
 8009632:	3701      	adds	r7, #1
 8009634:	700a      	strb	r2, [r1, #0]
 8009636:	781a      	ldrb	r2, [r3, #0]
 8009638:	3201      	adds	r2, #1
 800963a:	701a      	strb	r2, [r3, #0]
 800963c:	e790      	b.n	8009560 <_dtoa_r+0x608>
 800963e:	4ba6      	ldr	r3, [pc, #664]	; (80098d8 <_dtoa_r+0x980>)
 8009640:	2200      	movs	r2, #0
 8009642:	f7f6 fff9 	bl	8000638 <__aeabi_dmul>
 8009646:	2200      	movs	r2, #0
 8009648:	2300      	movs	r3, #0
 800964a:	4606      	mov	r6, r0
 800964c:	460f      	mov	r7, r1
 800964e:	f7f7 fa5b 	bl	8000b08 <__aeabi_dcmpeq>
 8009652:	2800      	cmp	r0, #0
 8009654:	d09d      	beq.n	8009592 <_dtoa_r+0x63a>
 8009656:	e7cf      	b.n	80095f8 <_dtoa_r+0x6a0>
 8009658:	9a08      	ldr	r2, [sp, #32]
 800965a:	2a00      	cmp	r2, #0
 800965c:	f000 80d7 	beq.w	800980e <_dtoa_r+0x8b6>
 8009660:	9a06      	ldr	r2, [sp, #24]
 8009662:	2a01      	cmp	r2, #1
 8009664:	f300 80ba 	bgt.w	80097dc <_dtoa_r+0x884>
 8009668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800966a:	2a00      	cmp	r2, #0
 800966c:	f000 80b2 	beq.w	80097d4 <_dtoa_r+0x87c>
 8009670:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009674:	9e07      	ldr	r6, [sp, #28]
 8009676:	9d04      	ldr	r5, [sp, #16]
 8009678:	9a04      	ldr	r2, [sp, #16]
 800967a:	441a      	add	r2, r3
 800967c:	9204      	str	r2, [sp, #16]
 800967e:	9a05      	ldr	r2, [sp, #20]
 8009680:	2101      	movs	r1, #1
 8009682:	441a      	add	r2, r3
 8009684:	4620      	mov	r0, r4
 8009686:	9205      	str	r2, [sp, #20]
 8009688:	f000 fb5c 	bl	8009d44 <__i2b>
 800968c:	4607      	mov	r7, r0
 800968e:	2d00      	cmp	r5, #0
 8009690:	dd0c      	ble.n	80096ac <_dtoa_r+0x754>
 8009692:	9b05      	ldr	r3, [sp, #20]
 8009694:	2b00      	cmp	r3, #0
 8009696:	dd09      	ble.n	80096ac <_dtoa_r+0x754>
 8009698:	42ab      	cmp	r3, r5
 800969a:	9a04      	ldr	r2, [sp, #16]
 800969c:	bfa8      	it	ge
 800969e:	462b      	movge	r3, r5
 80096a0:	1ad2      	subs	r2, r2, r3
 80096a2:	9204      	str	r2, [sp, #16]
 80096a4:	9a05      	ldr	r2, [sp, #20]
 80096a6:	1aed      	subs	r5, r5, r3
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	9305      	str	r3, [sp, #20]
 80096ac:	9b07      	ldr	r3, [sp, #28]
 80096ae:	b31b      	cbz	r3, 80096f8 <_dtoa_r+0x7a0>
 80096b0:	9b08      	ldr	r3, [sp, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80af 	beq.w	8009816 <_dtoa_r+0x8be>
 80096b8:	2e00      	cmp	r6, #0
 80096ba:	dd13      	ble.n	80096e4 <_dtoa_r+0x78c>
 80096bc:	4639      	mov	r1, r7
 80096be:	4632      	mov	r2, r6
 80096c0:	4620      	mov	r0, r4
 80096c2:	f000 fbff 	bl	8009ec4 <__pow5mult>
 80096c6:	ee18 2a10 	vmov	r2, s16
 80096ca:	4601      	mov	r1, r0
 80096cc:	4607      	mov	r7, r0
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 fb4e 	bl	8009d70 <__multiply>
 80096d4:	ee18 1a10 	vmov	r1, s16
 80096d8:	4680      	mov	r8, r0
 80096da:	4620      	mov	r0, r4
 80096dc:	f000 fa7a 	bl	8009bd4 <_Bfree>
 80096e0:	ee08 8a10 	vmov	s16, r8
 80096e4:	9b07      	ldr	r3, [sp, #28]
 80096e6:	1b9a      	subs	r2, r3, r6
 80096e8:	d006      	beq.n	80096f8 <_dtoa_r+0x7a0>
 80096ea:	ee18 1a10 	vmov	r1, s16
 80096ee:	4620      	mov	r0, r4
 80096f0:	f000 fbe8 	bl	8009ec4 <__pow5mult>
 80096f4:	ee08 0a10 	vmov	s16, r0
 80096f8:	2101      	movs	r1, #1
 80096fa:	4620      	mov	r0, r4
 80096fc:	f000 fb22 	bl	8009d44 <__i2b>
 8009700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009702:	2b00      	cmp	r3, #0
 8009704:	4606      	mov	r6, r0
 8009706:	f340 8088 	ble.w	800981a <_dtoa_r+0x8c2>
 800970a:	461a      	mov	r2, r3
 800970c:	4601      	mov	r1, r0
 800970e:	4620      	mov	r0, r4
 8009710:	f000 fbd8 	bl	8009ec4 <__pow5mult>
 8009714:	9b06      	ldr	r3, [sp, #24]
 8009716:	2b01      	cmp	r3, #1
 8009718:	4606      	mov	r6, r0
 800971a:	f340 8081 	ble.w	8009820 <_dtoa_r+0x8c8>
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	6933      	ldr	r3, [r6, #16]
 8009724:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009728:	6918      	ldr	r0, [r3, #16]
 800972a:	f000 fabb 	bl	8009ca4 <__hi0bits>
 800972e:	f1c0 0020 	rsb	r0, r0, #32
 8009732:	9b05      	ldr	r3, [sp, #20]
 8009734:	4418      	add	r0, r3
 8009736:	f010 001f 	ands.w	r0, r0, #31
 800973a:	f000 8092 	beq.w	8009862 <_dtoa_r+0x90a>
 800973e:	f1c0 0320 	rsb	r3, r0, #32
 8009742:	2b04      	cmp	r3, #4
 8009744:	f340 808a 	ble.w	800985c <_dtoa_r+0x904>
 8009748:	f1c0 001c 	rsb	r0, r0, #28
 800974c:	9b04      	ldr	r3, [sp, #16]
 800974e:	4403      	add	r3, r0
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	4403      	add	r3, r0
 8009756:	4405      	add	r5, r0
 8009758:	9305      	str	r3, [sp, #20]
 800975a:	9b04      	ldr	r3, [sp, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd07      	ble.n	8009770 <_dtoa_r+0x818>
 8009760:	ee18 1a10 	vmov	r1, s16
 8009764:	461a      	mov	r2, r3
 8009766:	4620      	mov	r0, r4
 8009768:	f000 fc06 	bl	8009f78 <__lshift>
 800976c:	ee08 0a10 	vmov	s16, r0
 8009770:	9b05      	ldr	r3, [sp, #20]
 8009772:	2b00      	cmp	r3, #0
 8009774:	dd05      	ble.n	8009782 <_dtoa_r+0x82a>
 8009776:	4631      	mov	r1, r6
 8009778:	461a      	mov	r2, r3
 800977a:	4620      	mov	r0, r4
 800977c:	f000 fbfc 	bl	8009f78 <__lshift>
 8009780:	4606      	mov	r6, r0
 8009782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009784:	2b00      	cmp	r3, #0
 8009786:	d06e      	beq.n	8009866 <_dtoa_r+0x90e>
 8009788:	ee18 0a10 	vmov	r0, s16
 800978c:	4631      	mov	r1, r6
 800978e:	f000 fc63 	bl	800a058 <__mcmp>
 8009792:	2800      	cmp	r0, #0
 8009794:	da67      	bge.n	8009866 <_dtoa_r+0x90e>
 8009796:	9b00      	ldr	r3, [sp, #0]
 8009798:	3b01      	subs	r3, #1
 800979a:	ee18 1a10 	vmov	r1, s16
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	220a      	movs	r2, #10
 80097a2:	2300      	movs	r3, #0
 80097a4:	4620      	mov	r0, r4
 80097a6:	f000 fa37 	bl	8009c18 <__multadd>
 80097aa:	9b08      	ldr	r3, [sp, #32]
 80097ac:	ee08 0a10 	vmov	s16, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 81b1 	beq.w	8009b18 <_dtoa_r+0xbc0>
 80097b6:	2300      	movs	r3, #0
 80097b8:	4639      	mov	r1, r7
 80097ba:	220a      	movs	r2, #10
 80097bc:	4620      	mov	r0, r4
 80097be:	f000 fa2b 	bl	8009c18 <__multadd>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	4607      	mov	r7, r0
 80097c8:	f300 808e 	bgt.w	80098e8 <_dtoa_r+0x990>
 80097cc:	9b06      	ldr	r3, [sp, #24]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	dc51      	bgt.n	8009876 <_dtoa_r+0x91e>
 80097d2:	e089      	b.n	80098e8 <_dtoa_r+0x990>
 80097d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80097d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80097da:	e74b      	b.n	8009674 <_dtoa_r+0x71c>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	1e5e      	subs	r6, r3, #1
 80097e0:	9b07      	ldr	r3, [sp, #28]
 80097e2:	42b3      	cmp	r3, r6
 80097e4:	bfbf      	itttt	lt
 80097e6:	9b07      	ldrlt	r3, [sp, #28]
 80097e8:	9607      	strlt	r6, [sp, #28]
 80097ea:	1af2      	sublt	r2, r6, r3
 80097ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80097ee:	bfb6      	itet	lt
 80097f0:	189b      	addlt	r3, r3, r2
 80097f2:	1b9e      	subge	r6, r3, r6
 80097f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80097f6:	9b03      	ldr	r3, [sp, #12]
 80097f8:	bfb8      	it	lt
 80097fa:	2600      	movlt	r6, #0
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	bfb7      	itett	lt
 8009800:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009804:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009808:	1a9d      	sublt	r5, r3, r2
 800980a:	2300      	movlt	r3, #0
 800980c:	e734      	b.n	8009678 <_dtoa_r+0x720>
 800980e:	9e07      	ldr	r6, [sp, #28]
 8009810:	9d04      	ldr	r5, [sp, #16]
 8009812:	9f08      	ldr	r7, [sp, #32]
 8009814:	e73b      	b.n	800968e <_dtoa_r+0x736>
 8009816:	9a07      	ldr	r2, [sp, #28]
 8009818:	e767      	b.n	80096ea <_dtoa_r+0x792>
 800981a:	9b06      	ldr	r3, [sp, #24]
 800981c:	2b01      	cmp	r3, #1
 800981e:	dc18      	bgt.n	8009852 <_dtoa_r+0x8fa>
 8009820:	f1ba 0f00 	cmp.w	sl, #0
 8009824:	d115      	bne.n	8009852 <_dtoa_r+0x8fa>
 8009826:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800982a:	b993      	cbnz	r3, 8009852 <_dtoa_r+0x8fa>
 800982c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009830:	0d1b      	lsrs	r3, r3, #20
 8009832:	051b      	lsls	r3, r3, #20
 8009834:	b183      	cbz	r3, 8009858 <_dtoa_r+0x900>
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	3301      	adds	r3, #1
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	3301      	adds	r3, #1
 8009840:	9305      	str	r3, [sp, #20]
 8009842:	f04f 0801 	mov.w	r8, #1
 8009846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009848:	2b00      	cmp	r3, #0
 800984a:	f47f af6a 	bne.w	8009722 <_dtoa_r+0x7ca>
 800984e:	2001      	movs	r0, #1
 8009850:	e76f      	b.n	8009732 <_dtoa_r+0x7da>
 8009852:	f04f 0800 	mov.w	r8, #0
 8009856:	e7f6      	b.n	8009846 <_dtoa_r+0x8ee>
 8009858:	4698      	mov	r8, r3
 800985a:	e7f4      	b.n	8009846 <_dtoa_r+0x8ee>
 800985c:	f43f af7d 	beq.w	800975a <_dtoa_r+0x802>
 8009860:	4618      	mov	r0, r3
 8009862:	301c      	adds	r0, #28
 8009864:	e772      	b.n	800974c <_dtoa_r+0x7f4>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	2b00      	cmp	r3, #0
 800986a:	dc37      	bgt.n	80098dc <_dtoa_r+0x984>
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	2b02      	cmp	r3, #2
 8009870:	dd34      	ble.n	80098dc <_dtoa_r+0x984>
 8009872:	9b03      	ldr	r3, [sp, #12]
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	9b02      	ldr	r3, [sp, #8]
 8009878:	b96b      	cbnz	r3, 8009896 <_dtoa_r+0x93e>
 800987a:	4631      	mov	r1, r6
 800987c:	2205      	movs	r2, #5
 800987e:	4620      	mov	r0, r4
 8009880:	f000 f9ca 	bl	8009c18 <__multadd>
 8009884:	4601      	mov	r1, r0
 8009886:	4606      	mov	r6, r0
 8009888:	ee18 0a10 	vmov	r0, s16
 800988c:	f000 fbe4 	bl	800a058 <__mcmp>
 8009890:	2800      	cmp	r0, #0
 8009892:	f73f adbb 	bgt.w	800940c <_dtoa_r+0x4b4>
 8009896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009898:	9d01      	ldr	r5, [sp, #4]
 800989a:	43db      	mvns	r3, r3
 800989c:	9300      	str	r3, [sp, #0]
 800989e:	f04f 0800 	mov.w	r8, #0
 80098a2:	4631      	mov	r1, r6
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 f995 	bl	8009bd4 <_Bfree>
 80098aa:	2f00      	cmp	r7, #0
 80098ac:	f43f aea4 	beq.w	80095f8 <_dtoa_r+0x6a0>
 80098b0:	f1b8 0f00 	cmp.w	r8, #0
 80098b4:	d005      	beq.n	80098c2 <_dtoa_r+0x96a>
 80098b6:	45b8      	cmp	r8, r7
 80098b8:	d003      	beq.n	80098c2 <_dtoa_r+0x96a>
 80098ba:	4641      	mov	r1, r8
 80098bc:	4620      	mov	r0, r4
 80098be:	f000 f989 	bl	8009bd4 <_Bfree>
 80098c2:	4639      	mov	r1, r7
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 f985 	bl	8009bd4 <_Bfree>
 80098ca:	e695      	b.n	80095f8 <_dtoa_r+0x6a0>
 80098cc:	2600      	movs	r6, #0
 80098ce:	4637      	mov	r7, r6
 80098d0:	e7e1      	b.n	8009896 <_dtoa_r+0x93e>
 80098d2:	9700      	str	r7, [sp, #0]
 80098d4:	4637      	mov	r7, r6
 80098d6:	e599      	b.n	800940c <_dtoa_r+0x4b4>
 80098d8:	40240000 	.word	0x40240000
 80098dc:	9b08      	ldr	r3, [sp, #32]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	f000 80ca 	beq.w	8009a78 <_dtoa_r+0xb20>
 80098e4:	9b03      	ldr	r3, [sp, #12]
 80098e6:	9302      	str	r3, [sp, #8]
 80098e8:	2d00      	cmp	r5, #0
 80098ea:	dd05      	ble.n	80098f8 <_dtoa_r+0x9a0>
 80098ec:	4639      	mov	r1, r7
 80098ee:	462a      	mov	r2, r5
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fb41 	bl	8009f78 <__lshift>
 80098f6:	4607      	mov	r7, r0
 80098f8:	f1b8 0f00 	cmp.w	r8, #0
 80098fc:	d05b      	beq.n	80099b6 <_dtoa_r+0xa5e>
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4620      	mov	r0, r4
 8009902:	f000 f927 	bl	8009b54 <_Balloc>
 8009906:	4605      	mov	r5, r0
 8009908:	b928      	cbnz	r0, 8009916 <_dtoa_r+0x9be>
 800990a:	4b87      	ldr	r3, [pc, #540]	; (8009b28 <_dtoa_r+0xbd0>)
 800990c:	4602      	mov	r2, r0
 800990e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009912:	f7ff bb3b 	b.w	8008f8c <_dtoa_r+0x34>
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	3202      	adds	r2, #2
 800991a:	0092      	lsls	r2, r2, #2
 800991c:	f107 010c 	add.w	r1, r7, #12
 8009920:	300c      	adds	r0, #12
 8009922:	f7fe fcfd 	bl	8008320 <memcpy>
 8009926:	2201      	movs	r2, #1
 8009928:	4629      	mov	r1, r5
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fb24 	bl	8009f78 <__lshift>
 8009930:	9b01      	ldr	r3, [sp, #4]
 8009932:	f103 0901 	add.w	r9, r3, #1
 8009936:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800993a:	4413      	add	r3, r2
 800993c:	9305      	str	r3, [sp, #20]
 800993e:	f00a 0301 	and.w	r3, sl, #1
 8009942:	46b8      	mov	r8, r7
 8009944:	9304      	str	r3, [sp, #16]
 8009946:	4607      	mov	r7, r0
 8009948:	4631      	mov	r1, r6
 800994a:	ee18 0a10 	vmov	r0, s16
 800994e:	f7ff fa77 	bl	8008e40 <quorem>
 8009952:	4641      	mov	r1, r8
 8009954:	9002      	str	r0, [sp, #8]
 8009956:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800995a:	ee18 0a10 	vmov	r0, s16
 800995e:	f000 fb7b 	bl	800a058 <__mcmp>
 8009962:	463a      	mov	r2, r7
 8009964:	9003      	str	r0, [sp, #12]
 8009966:	4631      	mov	r1, r6
 8009968:	4620      	mov	r0, r4
 800996a:	f000 fb91 	bl	800a090 <__mdiff>
 800996e:	68c2      	ldr	r2, [r0, #12]
 8009970:	f109 3bff 	add.w	fp, r9, #4294967295
 8009974:	4605      	mov	r5, r0
 8009976:	bb02      	cbnz	r2, 80099ba <_dtoa_r+0xa62>
 8009978:	4601      	mov	r1, r0
 800997a:	ee18 0a10 	vmov	r0, s16
 800997e:	f000 fb6b 	bl	800a058 <__mcmp>
 8009982:	4602      	mov	r2, r0
 8009984:	4629      	mov	r1, r5
 8009986:	4620      	mov	r0, r4
 8009988:	9207      	str	r2, [sp, #28]
 800998a:	f000 f923 	bl	8009bd4 <_Bfree>
 800998e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009992:	ea43 0102 	orr.w	r1, r3, r2
 8009996:	9b04      	ldr	r3, [sp, #16]
 8009998:	430b      	orrs	r3, r1
 800999a:	464d      	mov	r5, r9
 800999c:	d10f      	bne.n	80099be <_dtoa_r+0xa66>
 800999e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099a2:	d02a      	beq.n	80099fa <_dtoa_r+0xaa2>
 80099a4:	9b03      	ldr	r3, [sp, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd02      	ble.n	80099b0 <_dtoa_r+0xa58>
 80099aa:	9b02      	ldr	r3, [sp, #8]
 80099ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80099b0:	f88b a000 	strb.w	sl, [fp]
 80099b4:	e775      	b.n	80098a2 <_dtoa_r+0x94a>
 80099b6:	4638      	mov	r0, r7
 80099b8:	e7ba      	b.n	8009930 <_dtoa_r+0x9d8>
 80099ba:	2201      	movs	r2, #1
 80099bc:	e7e2      	b.n	8009984 <_dtoa_r+0xa2c>
 80099be:	9b03      	ldr	r3, [sp, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	db04      	blt.n	80099ce <_dtoa_r+0xa76>
 80099c4:	9906      	ldr	r1, [sp, #24]
 80099c6:	430b      	orrs	r3, r1
 80099c8:	9904      	ldr	r1, [sp, #16]
 80099ca:	430b      	orrs	r3, r1
 80099cc:	d122      	bne.n	8009a14 <_dtoa_r+0xabc>
 80099ce:	2a00      	cmp	r2, #0
 80099d0:	ddee      	ble.n	80099b0 <_dtoa_r+0xa58>
 80099d2:	ee18 1a10 	vmov	r1, s16
 80099d6:	2201      	movs	r2, #1
 80099d8:	4620      	mov	r0, r4
 80099da:	f000 facd 	bl	8009f78 <__lshift>
 80099de:	4631      	mov	r1, r6
 80099e0:	ee08 0a10 	vmov	s16, r0
 80099e4:	f000 fb38 	bl	800a058 <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	dc03      	bgt.n	80099f4 <_dtoa_r+0xa9c>
 80099ec:	d1e0      	bne.n	80099b0 <_dtoa_r+0xa58>
 80099ee:	f01a 0f01 	tst.w	sl, #1
 80099f2:	d0dd      	beq.n	80099b0 <_dtoa_r+0xa58>
 80099f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80099f8:	d1d7      	bne.n	80099aa <_dtoa_r+0xa52>
 80099fa:	2339      	movs	r3, #57	; 0x39
 80099fc:	f88b 3000 	strb.w	r3, [fp]
 8009a00:	462b      	mov	r3, r5
 8009a02:	461d      	mov	r5, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a0a:	2a39      	cmp	r2, #57	; 0x39
 8009a0c:	d071      	beq.n	8009af2 <_dtoa_r+0xb9a>
 8009a0e:	3201      	adds	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	e746      	b.n	80098a2 <_dtoa_r+0x94a>
 8009a14:	2a00      	cmp	r2, #0
 8009a16:	dd07      	ble.n	8009a28 <_dtoa_r+0xad0>
 8009a18:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009a1c:	d0ed      	beq.n	80099fa <_dtoa_r+0xaa2>
 8009a1e:	f10a 0301 	add.w	r3, sl, #1
 8009a22:	f88b 3000 	strb.w	r3, [fp]
 8009a26:	e73c      	b.n	80098a2 <_dtoa_r+0x94a>
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009a2e:	4599      	cmp	r9, r3
 8009a30:	d047      	beq.n	8009ac2 <_dtoa_r+0xb6a>
 8009a32:	ee18 1a10 	vmov	r1, s16
 8009a36:	2300      	movs	r3, #0
 8009a38:	220a      	movs	r2, #10
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	f000 f8ec 	bl	8009c18 <__multadd>
 8009a40:	45b8      	cmp	r8, r7
 8009a42:	ee08 0a10 	vmov	s16, r0
 8009a46:	f04f 0300 	mov.w	r3, #0
 8009a4a:	f04f 020a 	mov.w	r2, #10
 8009a4e:	4641      	mov	r1, r8
 8009a50:	4620      	mov	r0, r4
 8009a52:	d106      	bne.n	8009a62 <_dtoa_r+0xb0a>
 8009a54:	f000 f8e0 	bl	8009c18 <__multadd>
 8009a58:	4680      	mov	r8, r0
 8009a5a:	4607      	mov	r7, r0
 8009a5c:	f109 0901 	add.w	r9, r9, #1
 8009a60:	e772      	b.n	8009948 <_dtoa_r+0x9f0>
 8009a62:	f000 f8d9 	bl	8009c18 <__multadd>
 8009a66:	4639      	mov	r1, r7
 8009a68:	4680      	mov	r8, r0
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	220a      	movs	r2, #10
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f000 f8d2 	bl	8009c18 <__multadd>
 8009a74:	4607      	mov	r7, r0
 8009a76:	e7f1      	b.n	8009a5c <_dtoa_r+0xb04>
 8009a78:	9b03      	ldr	r3, [sp, #12]
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	9d01      	ldr	r5, [sp, #4]
 8009a7e:	ee18 0a10 	vmov	r0, s16
 8009a82:	4631      	mov	r1, r6
 8009a84:	f7ff f9dc 	bl	8008e40 <quorem>
 8009a88:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009a8c:	9b01      	ldr	r3, [sp, #4]
 8009a8e:	f805 ab01 	strb.w	sl, [r5], #1
 8009a92:	1aea      	subs	r2, r5, r3
 8009a94:	9b02      	ldr	r3, [sp, #8]
 8009a96:	4293      	cmp	r3, r2
 8009a98:	dd09      	ble.n	8009aae <_dtoa_r+0xb56>
 8009a9a:	ee18 1a10 	vmov	r1, s16
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	220a      	movs	r2, #10
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	f000 f8b8 	bl	8009c18 <__multadd>
 8009aa8:	ee08 0a10 	vmov	s16, r0
 8009aac:	e7e7      	b.n	8009a7e <_dtoa_r+0xb26>
 8009aae:	9b02      	ldr	r3, [sp, #8]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	bfc8      	it	gt
 8009ab4:	461d      	movgt	r5, r3
 8009ab6:	9b01      	ldr	r3, [sp, #4]
 8009ab8:	bfd8      	it	le
 8009aba:	2501      	movle	r5, #1
 8009abc:	441d      	add	r5, r3
 8009abe:	f04f 0800 	mov.w	r8, #0
 8009ac2:	ee18 1a10 	vmov	r1, s16
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f000 fa55 	bl	8009f78 <__lshift>
 8009ace:	4631      	mov	r1, r6
 8009ad0:	ee08 0a10 	vmov	s16, r0
 8009ad4:	f000 fac0 	bl	800a058 <__mcmp>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	dc91      	bgt.n	8009a00 <_dtoa_r+0xaa8>
 8009adc:	d102      	bne.n	8009ae4 <_dtoa_r+0xb8c>
 8009ade:	f01a 0f01 	tst.w	sl, #1
 8009ae2:	d18d      	bne.n	8009a00 <_dtoa_r+0xaa8>
 8009ae4:	462b      	mov	r3, r5
 8009ae6:	461d      	mov	r5, r3
 8009ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009aec:	2a30      	cmp	r2, #48	; 0x30
 8009aee:	d0fa      	beq.n	8009ae6 <_dtoa_r+0xb8e>
 8009af0:	e6d7      	b.n	80098a2 <_dtoa_r+0x94a>
 8009af2:	9a01      	ldr	r2, [sp, #4]
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d184      	bne.n	8009a02 <_dtoa_r+0xaaa>
 8009af8:	9b00      	ldr	r3, [sp, #0]
 8009afa:	3301      	adds	r3, #1
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2331      	movs	r3, #49	; 0x31
 8009b00:	7013      	strb	r3, [r2, #0]
 8009b02:	e6ce      	b.n	80098a2 <_dtoa_r+0x94a>
 8009b04:	4b09      	ldr	r3, [pc, #36]	; (8009b2c <_dtoa_r+0xbd4>)
 8009b06:	f7ff ba95 	b.w	8009034 <_dtoa_r+0xdc>
 8009b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	f47f aa6e 	bne.w	8008fee <_dtoa_r+0x96>
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <_dtoa_r+0xbd8>)
 8009b14:	f7ff ba8e 	b.w	8009034 <_dtoa_r+0xdc>
 8009b18:	9b02      	ldr	r3, [sp, #8]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	dcae      	bgt.n	8009a7c <_dtoa_r+0xb24>
 8009b1e:	9b06      	ldr	r3, [sp, #24]
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	f73f aea8 	bgt.w	8009876 <_dtoa_r+0x91e>
 8009b26:	e7a9      	b.n	8009a7c <_dtoa_r+0xb24>
 8009b28:	0806e49f 	.word	0x0806e49f
 8009b2c:	0806e3fc 	.word	0x0806e3fc
 8009b30:	0806e420 	.word	0x0806e420

08009b34 <_localeconv_r>:
 8009b34:	4800      	ldr	r0, [pc, #0]	; (8009b38 <_localeconv_r+0x4>)
 8009b36:	4770      	bx	lr
 8009b38:	2000088c 	.word	0x2000088c

08009b3c <__malloc_lock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__malloc_lock+0x8>)
 8009b3e:	f000 bd5e 	b.w	800a5fe <__retarget_lock_acquire_recursive>
 8009b42:	bf00      	nop
 8009b44:	20003c38 	.word	0x20003c38

08009b48 <__malloc_unlock>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__malloc_unlock+0x8>)
 8009b4a:	f000 bd59 	b.w	800a600 <__retarget_lock_release_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20003c38 	.word	0x20003c38

08009b54 <_Balloc>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009b58:	4604      	mov	r4, r0
 8009b5a:	460d      	mov	r5, r1
 8009b5c:	b976      	cbnz	r6, 8009b7c <_Balloc+0x28>
 8009b5e:	2010      	movs	r0, #16
 8009b60:	f7fe fbd6 	bl	8008310 <malloc>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6260      	str	r0, [r4, #36]	; 0x24
 8009b68:	b920      	cbnz	r0, 8009b74 <_Balloc+0x20>
 8009b6a:	4b18      	ldr	r3, [pc, #96]	; (8009bcc <_Balloc+0x78>)
 8009b6c:	4818      	ldr	r0, [pc, #96]	; (8009bd0 <_Balloc+0x7c>)
 8009b6e:	2166      	movs	r1, #102	; 0x66
 8009b70:	f000 fd14 	bl	800a59c <__assert_func>
 8009b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b78:	6006      	str	r6, [r0, #0]
 8009b7a:	60c6      	str	r6, [r0, #12]
 8009b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009b7e:	68f3      	ldr	r3, [r6, #12]
 8009b80:	b183      	cbz	r3, 8009ba4 <_Balloc+0x50>
 8009b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b8a:	b9b8      	cbnz	r0, 8009bbc <_Balloc+0x68>
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8009b92:	1d72      	adds	r2, r6, #5
 8009b94:	0092      	lsls	r2, r2, #2
 8009b96:	4620      	mov	r0, r4
 8009b98:	f000 fb60 	bl	800a25c <_calloc_r>
 8009b9c:	b160      	cbz	r0, 8009bb8 <_Balloc+0x64>
 8009b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ba2:	e00e      	b.n	8009bc2 <_Balloc+0x6e>
 8009ba4:	2221      	movs	r2, #33	; 0x21
 8009ba6:	2104      	movs	r1, #4
 8009ba8:	4620      	mov	r0, r4
 8009baa:	f000 fb57 	bl	800a25c <_calloc_r>
 8009bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bb0:	60f0      	str	r0, [r6, #12]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1e4      	bne.n	8009b82 <_Balloc+0x2e>
 8009bb8:	2000      	movs	r0, #0
 8009bba:	bd70      	pop	{r4, r5, r6, pc}
 8009bbc:	6802      	ldr	r2, [r0, #0]
 8009bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bc8:	e7f7      	b.n	8009bba <_Balloc+0x66>
 8009bca:	bf00      	nop
 8009bcc:	0806e42d 	.word	0x0806e42d
 8009bd0:	0806e4b0 	.word	0x0806e4b0

08009bd4 <_Bfree>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009bd8:	4605      	mov	r5, r0
 8009bda:	460c      	mov	r4, r1
 8009bdc:	b976      	cbnz	r6, 8009bfc <_Bfree+0x28>
 8009bde:	2010      	movs	r0, #16
 8009be0:	f7fe fb96 	bl	8008310 <malloc>
 8009be4:	4602      	mov	r2, r0
 8009be6:	6268      	str	r0, [r5, #36]	; 0x24
 8009be8:	b920      	cbnz	r0, 8009bf4 <_Bfree+0x20>
 8009bea:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <_Bfree+0x3c>)
 8009bec:	4809      	ldr	r0, [pc, #36]	; (8009c14 <_Bfree+0x40>)
 8009bee:	218a      	movs	r1, #138	; 0x8a
 8009bf0:	f000 fcd4 	bl	800a59c <__assert_func>
 8009bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf8:	6006      	str	r6, [r0, #0]
 8009bfa:	60c6      	str	r6, [r0, #12]
 8009bfc:	b13c      	cbz	r4, 8009c0e <_Bfree+0x3a>
 8009bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009c00:	6862      	ldr	r2, [r4, #4]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c08:	6021      	str	r1, [r4, #0]
 8009c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c0e:	bd70      	pop	{r4, r5, r6, pc}
 8009c10:	0806e42d 	.word	0x0806e42d
 8009c14:	0806e4b0 	.word	0x0806e4b0

08009c18 <__multadd>:
 8009c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1c:	690d      	ldr	r5, [r1, #16]
 8009c1e:	4607      	mov	r7, r0
 8009c20:	460c      	mov	r4, r1
 8009c22:	461e      	mov	r6, r3
 8009c24:	f101 0c14 	add.w	ip, r1, #20
 8009c28:	2000      	movs	r0, #0
 8009c2a:	f8dc 3000 	ldr.w	r3, [ip]
 8009c2e:	b299      	uxth	r1, r3
 8009c30:	fb02 6101 	mla	r1, r2, r1, r6
 8009c34:	0c1e      	lsrs	r6, r3, #16
 8009c36:	0c0b      	lsrs	r3, r1, #16
 8009c38:	fb02 3306 	mla	r3, r2, r6, r3
 8009c3c:	b289      	uxth	r1, r1
 8009c3e:	3001      	adds	r0, #1
 8009c40:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c44:	4285      	cmp	r5, r0
 8009c46:	f84c 1b04 	str.w	r1, [ip], #4
 8009c4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c4e:	dcec      	bgt.n	8009c2a <__multadd+0x12>
 8009c50:	b30e      	cbz	r6, 8009c96 <__multadd+0x7e>
 8009c52:	68a3      	ldr	r3, [r4, #8]
 8009c54:	42ab      	cmp	r3, r5
 8009c56:	dc19      	bgt.n	8009c8c <__multadd+0x74>
 8009c58:	6861      	ldr	r1, [r4, #4]
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	3101      	adds	r1, #1
 8009c5e:	f7ff ff79 	bl	8009b54 <_Balloc>
 8009c62:	4680      	mov	r8, r0
 8009c64:	b928      	cbnz	r0, 8009c72 <__multadd+0x5a>
 8009c66:	4602      	mov	r2, r0
 8009c68:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <__multadd+0x84>)
 8009c6a:	480d      	ldr	r0, [pc, #52]	; (8009ca0 <__multadd+0x88>)
 8009c6c:	21b5      	movs	r1, #181	; 0xb5
 8009c6e:	f000 fc95 	bl	800a59c <__assert_func>
 8009c72:	6922      	ldr	r2, [r4, #16]
 8009c74:	3202      	adds	r2, #2
 8009c76:	f104 010c 	add.w	r1, r4, #12
 8009c7a:	0092      	lsls	r2, r2, #2
 8009c7c:	300c      	adds	r0, #12
 8009c7e:	f7fe fb4f 	bl	8008320 <memcpy>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4638      	mov	r0, r7
 8009c86:	f7ff ffa5 	bl	8009bd4 <_Bfree>
 8009c8a:	4644      	mov	r4, r8
 8009c8c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c90:	3501      	adds	r5, #1
 8009c92:	615e      	str	r6, [r3, #20]
 8009c94:	6125      	str	r5, [r4, #16]
 8009c96:	4620      	mov	r0, r4
 8009c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c9c:	0806e49f 	.word	0x0806e49f
 8009ca0:	0806e4b0 	.word	0x0806e4b0

08009ca4 <__hi0bits>:
 8009ca4:	0c03      	lsrs	r3, r0, #16
 8009ca6:	041b      	lsls	r3, r3, #16
 8009ca8:	b9d3      	cbnz	r3, 8009ce0 <__hi0bits+0x3c>
 8009caa:	0400      	lsls	r0, r0, #16
 8009cac:	2310      	movs	r3, #16
 8009cae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009cb2:	bf04      	itt	eq
 8009cb4:	0200      	lsleq	r0, r0, #8
 8009cb6:	3308      	addeq	r3, #8
 8009cb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009cbc:	bf04      	itt	eq
 8009cbe:	0100      	lsleq	r0, r0, #4
 8009cc0:	3304      	addeq	r3, #4
 8009cc2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009cc6:	bf04      	itt	eq
 8009cc8:	0080      	lsleq	r0, r0, #2
 8009cca:	3302      	addeq	r3, #2
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	db05      	blt.n	8009cdc <__hi0bits+0x38>
 8009cd0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cd4:	f103 0301 	add.w	r3, r3, #1
 8009cd8:	bf08      	it	eq
 8009cda:	2320      	moveq	r3, #32
 8009cdc:	4618      	mov	r0, r3
 8009cde:	4770      	bx	lr
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	e7e4      	b.n	8009cae <__hi0bits+0xa>

08009ce4 <__lo0bits>:
 8009ce4:	6803      	ldr	r3, [r0, #0]
 8009ce6:	f013 0207 	ands.w	r2, r3, #7
 8009cea:	4601      	mov	r1, r0
 8009cec:	d00b      	beq.n	8009d06 <__lo0bits+0x22>
 8009cee:	07da      	lsls	r2, r3, #31
 8009cf0:	d423      	bmi.n	8009d3a <__lo0bits+0x56>
 8009cf2:	0798      	lsls	r0, r3, #30
 8009cf4:	bf49      	itett	mi
 8009cf6:	085b      	lsrmi	r3, r3, #1
 8009cf8:	089b      	lsrpl	r3, r3, #2
 8009cfa:	2001      	movmi	r0, #1
 8009cfc:	600b      	strmi	r3, [r1, #0]
 8009cfe:	bf5c      	itt	pl
 8009d00:	600b      	strpl	r3, [r1, #0]
 8009d02:	2002      	movpl	r0, #2
 8009d04:	4770      	bx	lr
 8009d06:	b298      	uxth	r0, r3
 8009d08:	b9a8      	cbnz	r0, 8009d36 <__lo0bits+0x52>
 8009d0a:	0c1b      	lsrs	r3, r3, #16
 8009d0c:	2010      	movs	r0, #16
 8009d0e:	b2da      	uxtb	r2, r3
 8009d10:	b90a      	cbnz	r2, 8009d16 <__lo0bits+0x32>
 8009d12:	3008      	adds	r0, #8
 8009d14:	0a1b      	lsrs	r3, r3, #8
 8009d16:	071a      	lsls	r2, r3, #28
 8009d18:	bf04      	itt	eq
 8009d1a:	091b      	lsreq	r3, r3, #4
 8009d1c:	3004      	addeq	r0, #4
 8009d1e:	079a      	lsls	r2, r3, #30
 8009d20:	bf04      	itt	eq
 8009d22:	089b      	lsreq	r3, r3, #2
 8009d24:	3002      	addeq	r0, #2
 8009d26:	07da      	lsls	r2, r3, #31
 8009d28:	d403      	bmi.n	8009d32 <__lo0bits+0x4e>
 8009d2a:	085b      	lsrs	r3, r3, #1
 8009d2c:	f100 0001 	add.w	r0, r0, #1
 8009d30:	d005      	beq.n	8009d3e <__lo0bits+0x5a>
 8009d32:	600b      	str	r3, [r1, #0]
 8009d34:	4770      	bx	lr
 8009d36:	4610      	mov	r0, r2
 8009d38:	e7e9      	b.n	8009d0e <__lo0bits+0x2a>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	4770      	bx	lr
 8009d3e:	2020      	movs	r0, #32
 8009d40:	4770      	bx	lr
	...

08009d44 <__i2b>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	460c      	mov	r4, r1
 8009d48:	2101      	movs	r1, #1
 8009d4a:	f7ff ff03 	bl	8009b54 <_Balloc>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	b928      	cbnz	r0, 8009d5e <__i2b+0x1a>
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <__i2b+0x24>)
 8009d54:	4805      	ldr	r0, [pc, #20]	; (8009d6c <__i2b+0x28>)
 8009d56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009d5a:	f000 fc1f 	bl	800a59c <__assert_func>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6144      	str	r4, [r0, #20]
 8009d62:	6103      	str	r3, [r0, #16]
 8009d64:	bd10      	pop	{r4, pc}
 8009d66:	bf00      	nop
 8009d68:	0806e49f 	.word	0x0806e49f
 8009d6c:	0806e4b0 	.word	0x0806e4b0

08009d70 <__multiply>:
 8009d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d74:	4691      	mov	r9, r2
 8009d76:	690a      	ldr	r2, [r1, #16]
 8009d78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	bfb8      	it	lt
 8009d80:	460b      	movlt	r3, r1
 8009d82:	460c      	mov	r4, r1
 8009d84:	bfbc      	itt	lt
 8009d86:	464c      	movlt	r4, r9
 8009d88:	4699      	movlt	r9, r3
 8009d8a:	6927      	ldr	r7, [r4, #16]
 8009d8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d90:	68a3      	ldr	r3, [r4, #8]
 8009d92:	6861      	ldr	r1, [r4, #4]
 8009d94:	eb07 060a 	add.w	r6, r7, sl
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	bfb8      	it	lt
 8009d9e:	3101      	addlt	r1, #1
 8009da0:	f7ff fed8 	bl	8009b54 <_Balloc>
 8009da4:	b930      	cbnz	r0, 8009db4 <__multiply+0x44>
 8009da6:	4602      	mov	r2, r0
 8009da8:	4b44      	ldr	r3, [pc, #272]	; (8009ebc <__multiply+0x14c>)
 8009daa:	4845      	ldr	r0, [pc, #276]	; (8009ec0 <__multiply+0x150>)
 8009dac:	f240 115d 	movw	r1, #349	; 0x15d
 8009db0:	f000 fbf4 	bl	800a59c <__assert_func>
 8009db4:	f100 0514 	add.w	r5, r0, #20
 8009db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009dbc:	462b      	mov	r3, r5
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	4543      	cmp	r3, r8
 8009dc2:	d321      	bcc.n	8009e08 <__multiply+0x98>
 8009dc4:	f104 0314 	add.w	r3, r4, #20
 8009dc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009dcc:	f109 0314 	add.w	r3, r9, #20
 8009dd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009dd4:	9202      	str	r2, [sp, #8]
 8009dd6:	1b3a      	subs	r2, r7, r4
 8009dd8:	3a15      	subs	r2, #21
 8009dda:	f022 0203 	bic.w	r2, r2, #3
 8009dde:	3204      	adds	r2, #4
 8009de0:	f104 0115 	add.w	r1, r4, #21
 8009de4:	428f      	cmp	r7, r1
 8009de6:	bf38      	it	cc
 8009de8:	2204      	movcc	r2, #4
 8009dea:	9201      	str	r2, [sp, #4]
 8009dec:	9a02      	ldr	r2, [sp, #8]
 8009dee:	9303      	str	r3, [sp, #12]
 8009df0:	429a      	cmp	r2, r3
 8009df2:	d80c      	bhi.n	8009e0e <__multiply+0x9e>
 8009df4:	2e00      	cmp	r6, #0
 8009df6:	dd03      	ble.n	8009e00 <__multiply+0x90>
 8009df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d05a      	beq.n	8009eb6 <__multiply+0x146>
 8009e00:	6106      	str	r6, [r0, #16]
 8009e02:	b005      	add	sp, #20
 8009e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e08:	f843 2b04 	str.w	r2, [r3], #4
 8009e0c:	e7d8      	b.n	8009dc0 <__multiply+0x50>
 8009e0e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e12:	f1ba 0f00 	cmp.w	sl, #0
 8009e16:	d024      	beq.n	8009e62 <__multiply+0xf2>
 8009e18:	f104 0e14 	add.w	lr, r4, #20
 8009e1c:	46a9      	mov	r9, r5
 8009e1e:	f04f 0c00 	mov.w	ip, #0
 8009e22:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009e26:	f8d9 1000 	ldr.w	r1, [r9]
 8009e2a:	fa1f fb82 	uxth.w	fp, r2
 8009e2e:	b289      	uxth	r1, r1
 8009e30:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e34:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e38:	f8d9 2000 	ldr.w	r2, [r9]
 8009e3c:	4461      	add	r1, ip
 8009e3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e42:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e4a:	b289      	uxth	r1, r1
 8009e4c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e50:	4577      	cmp	r7, lr
 8009e52:	f849 1b04 	str.w	r1, [r9], #4
 8009e56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e5a:	d8e2      	bhi.n	8009e22 <__multiply+0xb2>
 8009e5c:	9a01      	ldr	r2, [sp, #4]
 8009e5e:	f845 c002 	str.w	ip, [r5, r2]
 8009e62:	9a03      	ldr	r2, [sp, #12]
 8009e64:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	f1b9 0f00 	cmp.w	r9, #0
 8009e6e:	d020      	beq.n	8009eb2 <__multiply+0x142>
 8009e70:	6829      	ldr	r1, [r5, #0]
 8009e72:	f104 0c14 	add.w	ip, r4, #20
 8009e76:	46ae      	mov	lr, r5
 8009e78:	f04f 0a00 	mov.w	sl, #0
 8009e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8009e80:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e84:	fb09 220b 	mla	r2, r9, fp, r2
 8009e88:	4492      	add	sl, r2
 8009e8a:	b289      	uxth	r1, r1
 8009e8c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009e90:	f84e 1b04 	str.w	r1, [lr], #4
 8009e94:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009e98:	f8be 1000 	ldrh.w	r1, [lr]
 8009e9c:	0c12      	lsrs	r2, r2, #16
 8009e9e:	fb09 1102 	mla	r1, r9, r2, r1
 8009ea2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009ea6:	4567      	cmp	r7, ip
 8009ea8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009eac:	d8e6      	bhi.n	8009e7c <__multiply+0x10c>
 8009eae:	9a01      	ldr	r2, [sp, #4]
 8009eb0:	50a9      	str	r1, [r5, r2]
 8009eb2:	3504      	adds	r5, #4
 8009eb4:	e79a      	b.n	8009dec <__multiply+0x7c>
 8009eb6:	3e01      	subs	r6, #1
 8009eb8:	e79c      	b.n	8009df4 <__multiply+0x84>
 8009eba:	bf00      	nop
 8009ebc:	0806e49f 	.word	0x0806e49f
 8009ec0:	0806e4b0 	.word	0x0806e4b0

08009ec4 <__pow5mult>:
 8009ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ec8:	4615      	mov	r5, r2
 8009eca:	f012 0203 	ands.w	r2, r2, #3
 8009ece:	4606      	mov	r6, r0
 8009ed0:	460f      	mov	r7, r1
 8009ed2:	d007      	beq.n	8009ee4 <__pow5mult+0x20>
 8009ed4:	4c25      	ldr	r4, [pc, #148]	; (8009f6c <__pow5mult+0xa8>)
 8009ed6:	3a01      	subs	r2, #1
 8009ed8:	2300      	movs	r3, #0
 8009eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ede:	f7ff fe9b 	bl	8009c18 <__multadd>
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	10ad      	asrs	r5, r5, #2
 8009ee6:	d03d      	beq.n	8009f64 <__pow5mult+0xa0>
 8009ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009eea:	b97c      	cbnz	r4, 8009f0c <__pow5mult+0x48>
 8009eec:	2010      	movs	r0, #16
 8009eee:	f7fe fa0f 	bl	8008310 <malloc>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8009ef6:	b928      	cbnz	r0, 8009f04 <__pow5mult+0x40>
 8009ef8:	4b1d      	ldr	r3, [pc, #116]	; (8009f70 <__pow5mult+0xac>)
 8009efa:	481e      	ldr	r0, [pc, #120]	; (8009f74 <__pow5mult+0xb0>)
 8009efc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009f00:	f000 fb4c 	bl	800a59c <__assert_func>
 8009f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f08:	6004      	str	r4, [r0, #0]
 8009f0a:	60c4      	str	r4, [r0, #12]
 8009f0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f14:	b94c      	cbnz	r4, 8009f2a <__pow5mult+0x66>
 8009f16:	f240 2171 	movw	r1, #625	; 0x271
 8009f1a:	4630      	mov	r0, r6
 8009f1c:	f7ff ff12 	bl	8009d44 <__i2b>
 8009f20:	2300      	movs	r3, #0
 8009f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f26:	4604      	mov	r4, r0
 8009f28:	6003      	str	r3, [r0, #0]
 8009f2a:	f04f 0900 	mov.w	r9, #0
 8009f2e:	07eb      	lsls	r3, r5, #31
 8009f30:	d50a      	bpl.n	8009f48 <__pow5mult+0x84>
 8009f32:	4639      	mov	r1, r7
 8009f34:	4622      	mov	r2, r4
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ff1a 	bl	8009d70 <__multiply>
 8009f3c:	4639      	mov	r1, r7
 8009f3e:	4680      	mov	r8, r0
 8009f40:	4630      	mov	r0, r6
 8009f42:	f7ff fe47 	bl	8009bd4 <_Bfree>
 8009f46:	4647      	mov	r7, r8
 8009f48:	106d      	asrs	r5, r5, #1
 8009f4a:	d00b      	beq.n	8009f64 <__pow5mult+0xa0>
 8009f4c:	6820      	ldr	r0, [r4, #0]
 8009f4e:	b938      	cbnz	r0, 8009f60 <__pow5mult+0x9c>
 8009f50:	4622      	mov	r2, r4
 8009f52:	4621      	mov	r1, r4
 8009f54:	4630      	mov	r0, r6
 8009f56:	f7ff ff0b 	bl	8009d70 <__multiply>
 8009f5a:	6020      	str	r0, [r4, #0]
 8009f5c:	f8c0 9000 	str.w	r9, [r0]
 8009f60:	4604      	mov	r4, r0
 8009f62:	e7e4      	b.n	8009f2e <__pow5mult+0x6a>
 8009f64:	4638      	mov	r0, r7
 8009f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f6a:	bf00      	nop
 8009f6c:	0806e600 	.word	0x0806e600
 8009f70:	0806e42d 	.word	0x0806e42d
 8009f74:	0806e4b0 	.word	0x0806e4b0

08009f78 <__lshift>:
 8009f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f7c:	460c      	mov	r4, r1
 8009f7e:	6849      	ldr	r1, [r1, #4]
 8009f80:	6923      	ldr	r3, [r4, #16]
 8009f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f86:	68a3      	ldr	r3, [r4, #8]
 8009f88:	4607      	mov	r7, r0
 8009f8a:	4691      	mov	r9, r2
 8009f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f90:	f108 0601 	add.w	r6, r8, #1
 8009f94:	42b3      	cmp	r3, r6
 8009f96:	db0b      	blt.n	8009fb0 <__lshift+0x38>
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff fddb 	bl	8009b54 <_Balloc>
 8009f9e:	4605      	mov	r5, r0
 8009fa0:	b948      	cbnz	r0, 8009fb6 <__lshift+0x3e>
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	4b2a      	ldr	r3, [pc, #168]	; (800a050 <__lshift+0xd8>)
 8009fa6:	482b      	ldr	r0, [pc, #172]	; (800a054 <__lshift+0xdc>)
 8009fa8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009fac:	f000 faf6 	bl	800a59c <__assert_func>
 8009fb0:	3101      	adds	r1, #1
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	e7ee      	b.n	8009f94 <__lshift+0x1c>
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	f100 0114 	add.w	r1, r0, #20
 8009fbc:	f100 0210 	add.w	r2, r0, #16
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	4553      	cmp	r3, sl
 8009fc4:	db37      	blt.n	800a036 <__lshift+0xbe>
 8009fc6:	6920      	ldr	r0, [r4, #16]
 8009fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fcc:	f104 0314 	add.w	r3, r4, #20
 8009fd0:	f019 091f 	ands.w	r9, r9, #31
 8009fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fd8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009fdc:	d02f      	beq.n	800a03e <__lshift+0xc6>
 8009fde:	f1c9 0e20 	rsb	lr, r9, #32
 8009fe2:	468a      	mov	sl, r1
 8009fe4:	f04f 0c00 	mov.w	ip, #0
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	fa02 f209 	lsl.w	r2, r2, r9
 8009fee:	ea42 020c 	orr.w	r2, r2, ip
 8009ff2:	f84a 2b04 	str.w	r2, [sl], #4
 8009ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ffa:	4298      	cmp	r0, r3
 8009ffc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a000:	d8f2      	bhi.n	8009fe8 <__lshift+0x70>
 800a002:	1b03      	subs	r3, r0, r4
 800a004:	3b15      	subs	r3, #21
 800a006:	f023 0303 	bic.w	r3, r3, #3
 800a00a:	3304      	adds	r3, #4
 800a00c:	f104 0215 	add.w	r2, r4, #21
 800a010:	4290      	cmp	r0, r2
 800a012:	bf38      	it	cc
 800a014:	2304      	movcc	r3, #4
 800a016:	f841 c003 	str.w	ip, [r1, r3]
 800a01a:	f1bc 0f00 	cmp.w	ip, #0
 800a01e:	d001      	beq.n	800a024 <__lshift+0xac>
 800a020:	f108 0602 	add.w	r6, r8, #2
 800a024:	3e01      	subs	r6, #1
 800a026:	4638      	mov	r0, r7
 800a028:	612e      	str	r6, [r5, #16]
 800a02a:	4621      	mov	r1, r4
 800a02c:	f7ff fdd2 	bl	8009bd4 <_Bfree>
 800a030:	4628      	mov	r0, r5
 800a032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a036:	f842 0f04 	str.w	r0, [r2, #4]!
 800a03a:	3301      	adds	r3, #1
 800a03c:	e7c1      	b.n	8009fc2 <__lshift+0x4a>
 800a03e:	3904      	subs	r1, #4
 800a040:	f853 2b04 	ldr.w	r2, [r3], #4
 800a044:	f841 2f04 	str.w	r2, [r1, #4]!
 800a048:	4298      	cmp	r0, r3
 800a04a:	d8f9      	bhi.n	800a040 <__lshift+0xc8>
 800a04c:	e7ea      	b.n	800a024 <__lshift+0xac>
 800a04e:	bf00      	nop
 800a050:	0806e49f 	.word	0x0806e49f
 800a054:	0806e4b0 	.word	0x0806e4b0

0800a058 <__mcmp>:
 800a058:	b530      	push	{r4, r5, lr}
 800a05a:	6902      	ldr	r2, [r0, #16]
 800a05c:	690c      	ldr	r4, [r1, #16]
 800a05e:	1b12      	subs	r2, r2, r4
 800a060:	d10e      	bne.n	800a080 <__mcmp+0x28>
 800a062:	f100 0314 	add.w	r3, r0, #20
 800a066:	3114      	adds	r1, #20
 800a068:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a06c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a070:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a074:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a078:	42a5      	cmp	r5, r4
 800a07a:	d003      	beq.n	800a084 <__mcmp+0x2c>
 800a07c:	d305      	bcc.n	800a08a <__mcmp+0x32>
 800a07e:	2201      	movs	r2, #1
 800a080:	4610      	mov	r0, r2
 800a082:	bd30      	pop	{r4, r5, pc}
 800a084:	4283      	cmp	r3, r0
 800a086:	d3f3      	bcc.n	800a070 <__mcmp+0x18>
 800a088:	e7fa      	b.n	800a080 <__mcmp+0x28>
 800a08a:	f04f 32ff 	mov.w	r2, #4294967295
 800a08e:	e7f7      	b.n	800a080 <__mcmp+0x28>

0800a090 <__mdiff>:
 800a090:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a094:	460c      	mov	r4, r1
 800a096:	4606      	mov	r6, r0
 800a098:	4611      	mov	r1, r2
 800a09a:	4620      	mov	r0, r4
 800a09c:	4690      	mov	r8, r2
 800a09e:	f7ff ffdb 	bl	800a058 <__mcmp>
 800a0a2:	1e05      	subs	r5, r0, #0
 800a0a4:	d110      	bne.n	800a0c8 <__mdiff+0x38>
 800a0a6:	4629      	mov	r1, r5
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	f7ff fd53 	bl	8009b54 <_Balloc>
 800a0ae:	b930      	cbnz	r0, 800a0be <__mdiff+0x2e>
 800a0b0:	4b3a      	ldr	r3, [pc, #232]	; (800a19c <__mdiff+0x10c>)
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	f240 2132 	movw	r1, #562	; 0x232
 800a0b8:	4839      	ldr	r0, [pc, #228]	; (800a1a0 <__mdiff+0x110>)
 800a0ba:	f000 fa6f 	bl	800a59c <__assert_func>
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a0c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	bfa4      	itt	ge
 800a0ca:	4643      	movge	r3, r8
 800a0cc:	46a0      	movge	r8, r4
 800a0ce:	4630      	mov	r0, r6
 800a0d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0d4:	bfa6      	itte	ge
 800a0d6:	461c      	movge	r4, r3
 800a0d8:	2500      	movge	r5, #0
 800a0da:	2501      	movlt	r5, #1
 800a0dc:	f7ff fd3a 	bl	8009b54 <_Balloc>
 800a0e0:	b920      	cbnz	r0, 800a0ec <__mdiff+0x5c>
 800a0e2:	4b2e      	ldr	r3, [pc, #184]	; (800a19c <__mdiff+0x10c>)
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a0ea:	e7e5      	b.n	800a0b8 <__mdiff+0x28>
 800a0ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0f0:	6926      	ldr	r6, [r4, #16]
 800a0f2:	60c5      	str	r5, [r0, #12]
 800a0f4:	f104 0914 	add.w	r9, r4, #20
 800a0f8:	f108 0514 	add.w	r5, r8, #20
 800a0fc:	f100 0e14 	add.w	lr, r0, #20
 800a100:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a104:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a108:	f108 0210 	add.w	r2, r8, #16
 800a10c:	46f2      	mov	sl, lr
 800a10e:	2100      	movs	r1, #0
 800a110:	f859 3b04 	ldr.w	r3, [r9], #4
 800a114:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a118:	fa1f f883 	uxth.w	r8, r3
 800a11c:	fa11 f18b 	uxtah	r1, r1, fp
 800a120:	0c1b      	lsrs	r3, r3, #16
 800a122:	eba1 0808 	sub.w	r8, r1, r8
 800a126:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a12a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a12e:	fa1f f888 	uxth.w	r8, r8
 800a132:	1419      	asrs	r1, r3, #16
 800a134:	454e      	cmp	r6, r9
 800a136:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a13a:	f84a 3b04 	str.w	r3, [sl], #4
 800a13e:	d8e7      	bhi.n	800a110 <__mdiff+0x80>
 800a140:	1b33      	subs	r3, r6, r4
 800a142:	3b15      	subs	r3, #21
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	3304      	adds	r3, #4
 800a14a:	3415      	adds	r4, #21
 800a14c:	42a6      	cmp	r6, r4
 800a14e:	bf38      	it	cc
 800a150:	2304      	movcc	r3, #4
 800a152:	441d      	add	r5, r3
 800a154:	4473      	add	r3, lr
 800a156:	469e      	mov	lr, r3
 800a158:	462e      	mov	r6, r5
 800a15a:	4566      	cmp	r6, ip
 800a15c:	d30e      	bcc.n	800a17c <__mdiff+0xec>
 800a15e:	f10c 0203 	add.w	r2, ip, #3
 800a162:	1b52      	subs	r2, r2, r5
 800a164:	f022 0203 	bic.w	r2, r2, #3
 800a168:	3d03      	subs	r5, #3
 800a16a:	45ac      	cmp	ip, r5
 800a16c:	bf38      	it	cc
 800a16e:	2200      	movcc	r2, #0
 800a170:	441a      	add	r2, r3
 800a172:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a176:	b17b      	cbz	r3, 800a198 <__mdiff+0x108>
 800a178:	6107      	str	r7, [r0, #16]
 800a17a:	e7a3      	b.n	800a0c4 <__mdiff+0x34>
 800a17c:	f856 8b04 	ldr.w	r8, [r6], #4
 800a180:	fa11 f288 	uxtah	r2, r1, r8
 800a184:	1414      	asrs	r4, r2, #16
 800a186:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a18a:	b292      	uxth	r2, r2
 800a18c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a190:	f84e 2b04 	str.w	r2, [lr], #4
 800a194:	1421      	asrs	r1, r4, #16
 800a196:	e7e0      	b.n	800a15a <__mdiff+0xca>
 800a198:	3f01      	subs	r7, #1
 800a19a:	e7ea      	b.n	800a172 <__mdiff+0xe2>
 800a19c:	0806e49f 	.word	0x0806e49f
 800a1a0:	0806e4b0 	.word	0x0806e4b0

0800a1a4 <__d2b>:
 800a1a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a1a8:	4689      	mov	r9, r1
 800a1aa:	2101      	movs	r1, #1
 800a1ac:	ec57 6b10 	vmov	r6, r7, d0
 800a1b0:	4690      	mov	r8, r2
 800a1b2:	f7ff fccf 	bl	8009b54 <_Balloc>
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	b930      	cbnz	r0, 800a1c8 <__d2b+0x24>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	4b25      	ldr	r3, [pc, #148]	; (800a254 <__d2b+0xb0>)
 800a1be:	4826      	ldr	r0, [pc, #152]	; (800a258 <__d2b+0xb4>)
 800a1c0:	f240 310a 	movw	r1, #778	; 0x30a
 800a1c4:	f000 f9ea 	bl	800a59c <__assert_func>
 800a1c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a1cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1d0:	bb35      	cbnz	r5, 800a220 <__d2b+0x7c>
 800a1d2:	2e00      	cmp	r6, #0
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	d028      	beq.n	800a22a <__d2b+0x86>
 800a1d8:	4668      	mov	r0, sp
 800a1da:	9600      	str	r6, [sp, #0]
 800a1dc:	f7ff fd82 	bl	8009ce4 <__lo0bits>
 800a1e0:	9900      	ldr	r1, [sp, #0]
 800a1e2:	b300      	cbz	r0, 800a226 <__d2b+0x82>
 800a1e4:	9a01      	ldr	r2, [sp, #4]
 800a1e6:	f1c0 0320 	rsb	r3, r0, #32
 800a1ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	40c2      	lsrs	r2, r0
 800a1f2:	6163      	str	r3, [r4, #20]
 800a1f4:	9201      	str	r2, [sp, #4]
 800a1f6:	9b01      	ldr	r3, [sp, #4]
 800a1f8:	61a3      	str	r3, [r4, #24]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	bf14      	ite	ne
 800a1fe:	2202      	movne	r2, #2
 800a200:	2201      	moveq	r2, #1
 800a202:	6122      	str	r2, [r4, #16]
 800a204:	b1d5      	cbz	r5, 800a23c <__d2b+0x98>
 800a206:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a20a:	4405      	add	r5, r0
 800a20c:	f8c9 5000 	str.w	r5, [r9]
 800a210:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a214:	f8c8 0000 	str.w	r0, [r8]
 800a218:	4620      	mov	r0, r4
 800a21a:	b003      	add	sp, #12
 800a21c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a220:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a224:	e7d5      	b.n	800a1d2 <__d2b+0x2e>
 800a226:	6161      	str	r1, [r4, #20]
 800a228:	e7e5      	b.n	800a1f6 <__d2b+0x52>
 800a22a:	a801      	add	r0, sp, #4
 800a22c:	f7ff fd5a 	bl	8009ce4 <__lo0bits>
 800a230:	9b01      	ldr	r3, [sp, #4]
 800a232:	6163      	str	r3, [r4, #20]
 800a234:	2201      	movs	r2, #1
 800a236:	6122      	str	r2, [r4, #16]
 800a238:	3020      	adds	r0, #32
 800a23a:	e7e3      	b.n	800a204 <__d2b+0x60>
 800a23c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a240:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a244:	f8c9 0000 	str.w	r0, [r9]
 800a248:	6918      	ldr	r0, [r3, #16]
 800a24a:	f7ff fd2b 	bl	8009ca4 <__hi0bits>
 800a24e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a252:	e7df      	b.n	800a214 <__d2b+0x70>
 800a254:	0806e49f 	.word	0x0806e49f
 800a258:	0806e4b0 	.word	0x0806e4b0

0800a25c <_calloc_r>:
 800a25c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a25e:	fba1 2402 	umull	r2, r4, r1, r2
 800a262:	b94c      	cbnz	r4, 800a278 <_calloc_r+0x1c>
 800a264:	4611      	mov	r1, r2
 800a266:	9201      	str	r2, [sp, #4]
 800a268:	f7fe f8dc 	bl	8008424 <_malloc_r>
 800a26c:	9a01      	ldr	r2, [sp, #4]
 800a26e:	4605      	mov	r5, r0
 800a270:	b930      	cbnz	r0, 800a280 <_calloc_r+0x24>
 800a272:	4628      	mov	r0, r5
 800a274:	b003      	add	sp, #12
 800a276:	bd30      	pop	{r4, r5, pc}
 800a278:	220c      	movs	r2, #12
 800a27a:	6002      	str	r2, [r0, #0]
 800a27c:	2500      	movs	r5, #0
 800a27e:	e7f8      	b.n	800a272 <_calloc_r+0x16>
 800a280:	4621      	mov	r1, r4
 800a282:	f7fe f85b 	bl	800833c <memset>
 800a286:	e7f4      	b.n	800a272 <_calloc_r+0x16>

0800a288 <_realloc_r>:
 800a288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28c:	4680      	mov	r8, r0
 800a28e:	4614      	mov	r4, r2
 800a290:	460e      	mov	r6, r1
 800a292:	b921      	cbnz	r1, 800a29e <_realloc_r+0x16>
 800a294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a298:	4611      	mov	r1, r2
 800a29a:	f7fe b8c3 	b.w	8008424 <_malloc_r>
 800a29e:	b92a      	cbnz	r2, 800a2ac <_realloc_r+0x24>
 800a2a0:	f7fe f854 	bl	800834c <_free_r>
 800a2a4:	4625      	mov	r5, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ac:	f000 f9d5 	bl	800a65a <_malloc_usable_size_r>
 800a2b0:	4284      	cmp	r4, r0
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	d802      	bhi.n	800a2bc <_realloc_r+0x34>
 800a2b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a2ba:	d812      	bhi.n	800a2e2 <_realloc_r+0x5a>
 800a2bc:	4621      	mov	r1, r4
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f7fe f8b0 	bl	8008424 <_malloc_r>
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d0ed      	beq.n	800a2a6 <_realloc_r+0x1e>
 800a2ca:	42bc      	cmp	r4, r7
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	4631      	mov	r1, r6
 800a2d0:	bf28      	it	cs
 800a2d2:	463a      	movcs	r2, r7
 800a2d4:	f7fe f824 	bl	8008320 <memcpy>
 800a2d8:	4631      	mov	r1, r6
 800a2da:	4640      	mov	r0, r8
 800a2dc:	f7fe f836 	bl	800834c <_free_r>
 800a2e0:	e7e1      	b.n	800a2a6 <_realloc_r+0x1e>
 800a2e2:	4635      	mov	r5, r6
 800a2e4:	e7df      	b.n	800a2a6 <_realloc_r+0x1e>

0800a2e6 <__ssputs_r>:
 800a2e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2ea:	688e      	ldr	r6, [r1, #8]
 800a2ec:	429e      	cmp	r6, r3
 800a2ee:	4682      	mov	sl, r0
 800a2f0:	460c      	mov	r4, r1
 800a2f2:	4690      	mov	r8, r2
 800a2f4:	461f      	mov	r7, r3
 800a2f6:	d838      	bhi.n	800a36a <__ssputs_r+0x84>
 800a2f8:	898a      	ldrh	r2, [r1, #12]
 800a2fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2fe:	d032      	beq.n	800a366 <__ssputs_r+0x80>
 800a300:	6825      	ldr	r5, [r4, #0]
 800a302:	6909      	ldr	r1, [r1, #16]
 800a304:	eba5 0901 	sub.w	r9, r5, r1
 800a308:	6965      	ldr	r5, [r4, #20]
 800a30a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a30e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a312:	3301      	adds	r3, #1
 800a314:	444b      	add	r3, r9
 800a316:	106d      	asrs	r5, r5, #1
 800a318:	429d      	cmp	r5, r3
 800a31a:	bf38      	it	cc
 800a31c:	461d      	movcc	r5, r3
 800a31e:	0553      	lsls	r3, r2, #21
 800a320:	d531      	bpl.n	800a386 <__ssputs_r+0xa0>
 800a322:	4629      	mov	r1, r5
 800a324:	f7fe f87e 	bl	8008424 <_malloc_r>
 800a328:	4606      	mov	r6, r0
 800a32a:	b950      	cbnz	r0, 800a342 <__ssputs_r+0x5c>
 800a32c:	230c      	movs	r3, #12
 800a32e:	f8ca 3000 	str.w	r3, [sl]
 800a332:	89a3      	ldrh	r3, [r4, #12]
 800a334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a338:	81a3      	strh	r3, [r4, #12]
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a342:	6921      	ldr	r1, [r4, #16]
 800a344:	464a      	mov	r2, r9
 800a346:	f7fd ffeb 	bl	8008320 <memcpy>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a354:	81a3      	strh	r3, [r4, #12]
 800a356:	6126      	str	r6, [r4, #16]
 800a358:	6165      	str	r5, [r4, #20]
 800a35a:	444e      	add	r6, r9
 800a35c:	eba5 0509 	sub.w	r5, r5, r9
 800a360:	6026      	str	r6, [r4, #0]
 800a362:	60a5      	str	r5, [r4, #8]
 800a364:	463e      	mov	r6, r7
 800a366:	42be      	cmp	r6, r7
 800a368:	d900      	bls.n	800a36c <__ssputs_r+0x86>
 800a36a:	463e      	mov	r6, r7
 800a36c:	6820      	ldr	r0, [r4, #0]
 800a36e:	4632      	mov	r2, r6
 800a370:	4641      	mov	r1, r8
 800a372:	f000 f958 	bl	800a626 <memmove>
 800a376:	68a3      	ldr	r3, [r4, #8]
 800a378:	1b9b      	subs	r3, r3, r6
 800a37a:	60a3      	str	r3, [r4, #8]
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	4433      	add	r3, r6
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	2000      	movs	r0, #0
 800a384:	e7db      	b.n	800a33e <__ssputs_r+0x58>
 800a386:	462a      	mov	r2, r5
 800a388:	f7ff ff7e 	bl	800a288 <_realloc_r>
 800a38c:	4606      	mov	r6, r0
 800a38e:	2800      	cmp	r0, #0
 800a390:	d1e1      	bne.n	800a356 <__ssputs_r+0x70>
 800a392:	6921      	ldr	r1, [r4, #16]
 800a394:	4650      	mov	r0, sl
 800a396:	f7fd ffd9 	bl	800834c <_free_r>
 800a39a:	e7c7      	b.n	800a32c <__ssputs_r+0x46>

0800a39c <_svfiprintf_r>:
 800a39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a0:	4698      	mov	r8, r3
 800a3a2:	898b      	ldrh	r3, [r1, #12]
 800a3a4:	061b      	lsls	r3, r3, #24
 800a3a6:	b09d      	sub	sp, #116	; 0x74
 800a3a8:	4607      	mov	r7, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	d50e      	bpl.n	800a3ce <_svfiprintf_r+0x32>
 800a3b0:	690b      	ldr	r3, [r1, #16]
 800a3b2:	b963      	cbnz	r3, 800a3ce <_svfiprintf_r+0x32>
 800a3b4:	2140      	movs	r1, #64	; 0x40
 800a3b6:	f7fe f835 	bl	8008424 <_malloc_r>
 800a3ba:	6028      	str	r0, [r5, #0]
 800a3bc:	6128      	str	r0, [r5, #16]
 800a3be:	b920      	cbnz	r0, 800a3ca <_svfiprintf_r+0x2e>
 800a3c0:	230c      	movs	r3, #12
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	e0d1      	b.n	800a56e <_svfiprintf_r+0x1d2>
 800a3ca:	2340      	movs	r3, #64	; 0x40
 800a3cc:	616b      	str	r3, [r5, #20]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800a3d2:	2320      	movs	r3, #32
 800a3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3dc:	2330      	movs	r3, #48	; 0x30
 800a3de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a588 <_svfiprintf_r+0x1ec>
 800a3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e6:	f04f 0901 	mov.w	r9, #1
 800a3ea:	4623      	mov	r3, r4
 800a3ec:	469a      	mov	sl, r3
 800a3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3f2:	b10a      	cbz	r2, 800a3f8 <_svfiprintf_r+0x5c>
 800a3f4:	2a25      	cmp	r2, #37	; 0x25
 800a3f6:	d1f9      	bne.n	800a3ec <_svfiprintf_r+0x50>
 800a3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3fc:	d00b      	beq.n	800a416 <_svfiprintf_r+0x7a>
 800a3fe:	465b      	mov	r3, fp
 800a400:	4622      	mov	r2, r4
 800a402:	4629      	mov	r1, r5
 800a404:	4638      	mov	r0, r7
 800a406:	f7ff ff6e 	bl	800a2e6 <__ssputs_r>
 800a40a:	3001      	adds	r0, #1
 800a40c:	f000 80aa 	beq.w	800a564 <_svfiprintf_r+0x1c8>
 800a410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a412:	445a      	add	r2, fp
 800a414:	9209      	str	r2, [sp, #36]	; 0x24
 800a416:	f89a 3000 	ldrb.w	r3, [sl]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	f000 80a2 	beq.w	800a564 <_svfiprintf_r+0x1c8>
 800a420:	2300      	movs	r3, #0
 800a422:	f04f 32ff 	mov.w	r2, #4294967295
 800a426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a42a:	f10a 0a01 	add.w	sl, sl, #1
 800a42e:	9304      	str	r3, [sp, #16]
 800a430:	9307      	str	r3, [sp, #28]
 800a432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a436:	931a      	str	r3, [sp, #104]	; 0x68
 800a438:	4654      	mov	r4, sl
 800a43a:	2205      	movs	r2, #5
 800a43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a440:	4851      	ldr	r0, [pc, #324]	; (800a588 <_svfiprintf_r+0x1ec>)
 800a442:	f7f5 feed 	bl	8000220 <memchr>
 800a446:	9a04      	ldr	r2, [sp, #16]
 800a448:	b9d8      	cbnz	r0, 800a482 <_svfiprintf_r+0xe6>
 800a44a:	06d0      	lsls	r0, r2, #27
 800a44c:	bf44      	itt	mi
 800a44e:	2320      	movmi	r3, #32
 800a450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a454:	0711      	lsls	r1, r2, #28
 800a456:	bf44      	itt	mi
 800a458:	232b      	movmi	r3, #43	; 0x2b
 800a45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a45e:	f89a 3000 	ldrb.w	r3, [sl]
 800a462:	2b2a      	cmp	r3, #42	; 0x2a
 800a464:	d015      	beq.n	800a492 <_svfiprintf_r+0xf6>
 800a466:	9a07      	ldr	r2, [sp, #28]
 800a468:	4654      	mov	r4, sl
 800a46a:	2000      	movs	r0, #0
 800a46c:	f04f 0c0a 	mov.w	ip, #10
 800a470:	4621      	mov	r1, r4
 800a472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a476:	3b30      	subs	r3, #48	; 0x30
 800a478:	2b09      	cmp	r3, #9
 800a47a:	d94e      	bls.n	800a51a <_svfiprintf_r+0x17e>
 800a47c:	b1b0      	cbz	r0, 800a4ac <_svfiprintf_r+0x110>
 800a47e:	9207      	str	r2, [sp, #28]
 800a480:	e014      	b.n	800a4ac <_svfiprintf_r+0x110>
 800a482:	eba0 0308 	sub.w	r3, r0, r8
 800a486:	fa09 f303 	lsl.w	r3, r9, r3
 800a48a:	4313      	orrs	r3, r2
 800a48c:	9304      	str	r3, [sp, #16]
 800a48e:	46a2      	mov	sl, r4
 800a490:	e7d2      	b.n	800a438 <_svfiprintf_r+0x9c>
 800a492:	9b03      	ldr	r3, [sp, #12]
 800a494:	1d19      	adds	r1, r3, #4
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	9103      	str	r1, [sp, #12]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	bfbb      	ittet	lt
 800a49e:	425b      	neglt	r3, r3
 800a4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800a4a4:	9307      	strge	r3, [sp, #28]
 800a4a6:	9307      	strlt	r3, [sp, #28]
 800a4a8:	bfb8      	it	lt
 800a4aa:	9204      	strlt	r2, [sp, #16]
 800a4ac:	7823      	ldrb	r3, [r4, #0]
 800a4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800a4b0:	d10c      	bne.n	800a4cc <_svfiprintf_r+0x130>
 800a4b2:	7863      	ldrb	r3, [r4, #1]
 800a4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4b6:	d135      	bne.n	800a524 <_svfiprintf_r+0x188>
 800a4b8:	9b03      	ldr	r3, [sp, #12]
 800a4ba:	1d1a      	adds	r2, r3, #4
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	9203      	str	r2, [sp, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bfb8      	it	lt
 800a4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4c8:	3402      	adds	r4, #2
 800a4ca:	9305      	str	r3, [sp, #20]
 800a4cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a598 <_svfiprintf_r+0x1fc>
 800a4d0:	7821      	ldrb	r1, [r4, #0]
 800a4d2:	2203      	movs	r2, #3
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	f7f5 fea3 	bl	8000220 <memchr>
 800a4da:	b140      	cbz	r0, 800a4ee <_svfiprintf_r+0x152>
 800a4dc:	2340      	movs	r3, #64	; 0x40
 800a4de:	eba0 000a 	sub.w	r0, r0, sl
 800a4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	4303      	orrs	r3, r0
 800a4ea:	3401      	adds	r4, #1
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4f2:	4826      	ldr	r0, [pc, #152]	; (800a58c <_svfiprintf_r+0x1f0>)
 800a4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4f8:	2206      	movs	r2, #6
 800a4fa:	f7f5 fe91 	bl	8000220 <memchr>
 800a4fe:	2800      	cmp	r0, #0
 800a500:	d038      	beq.n	800a574 <_svfiprintf_r+0x1d8>
 800a502:	4b23      	ldr	r3, [pc, #140]	; (800a590 <_svfiprintf_r+0x1f4>)
 800a504:	bb1b      	cbnz	r3, 800a54e <_svfiprintf_r+0x1b2>
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	3307      	adds	r3, #7
 800a50a:	f023 0307 	bic.w	r3, r3, #7
 800a50e:	3308      	adds	r3, #8
 800a510:	9303      	str	r3, [sp, #12]
 800a512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a514:	4433      	add	r3, r6
 800a516:	9309      	str	r3, [sp, #36]	; 0x24
 800a518:	e767      	b.n	800a3ea <_svfiprintf_r+0x4e>
 800a51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a51e:	460c      	mov	r4, r1
 800a520:	2001      	movs	r0, #1
 800a522:	e7a5      	b.n	800a470 <_svfiprintf_r+0xd4>
 800a524:	2300      	movs	r3, #0
 800a526:	3401      	adds	r4, #1
 800a528:	9305      	str	r3, [sp, #20]
 800a52a:	4619      	mov	r1, r3
 800a52c:	f04f 0c0a 	mov.w	ip, #10
 800a530:	4620      	mov	r0, r4
 800a532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a536:	3a30      	subs	r2, #48	; 0x30
 800a538:	2a09      	cmp	r2, #9
 800a53a:	d903      	bls.n	800a544 <_svfiprintf_r+0x1a8>
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d0c5      	beq.n	800a4cc <_svfiprintf_r+0x130>
 800a540:	9105      	str	r1, [sp, #20]
 800a542:	e7c3      	b.n	800a4cc <_svfiprintf_r+0x130>
 800a544:	fb0c 2101 	mla	r1, ip, r1, r2
 800a548:	4604      	mov	r4, r0
 800a54a:	2301      	movs	r3, #1
 800a54c:	e7f0      	b.n	800a530 <_svfiprintf_r+0x194>
 800a54e:	ab03      	add	r3, sp, #12
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	462a      	mov	r2, r5
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <_svfiprintf_r+0x1f8>)
 800a556:	a904      	add	r1, sp, #16
 800a558:	4638      	mov	r0, r7
 800a55a:	f7fe f877 	bl	800864c <_printf_float>
 800a55e:	1c42      	adds	r2, r0, #1
 800a560:	4606      	mov	r6, r0
 800a562:	d1d6      	bne.n	800a512 <_svfiprintf_r+0x176>
 800a564:	89ab      	ldrh	r3, [r5, #12]
 800a566:	065b      	lsls	r3, r3, #25
 800a568:	f53f af2c 	bmi.w	800a3c4 <_svfiprintf_r+0x28>
 800a56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a56e:	b01d      	add	sp, #116	; 0x74
 800a570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a574:	ab03      	add	r3, sp, #12
 800a576:	9300      	str	r3, [sp, #0]
 800a578:	462a      	mov	r2, r5
 800a57a:	4b06      	ldr	r3, [pc, #24]	; (800a594 <_svfiprintf_r+0x1f8>)
 800a57c:	a904      	add	r1, sp, #16
 800a57e:	4638      	mov	r0, r7
 800a580:	f7fe fb08 	bl	8008b94 <_printf_i>
 800a584:	e7eb      	b.n	800a55e <_svfiprintf_r+0x1c2>
 800a586:	bf00      	nop
 800a588:	0806e60c 	.word	0x0806e60c
 800a58c:	0806e616 	.word	0x0806e616
 800a590:	0800864d 	.word	0x0800864d
 800a594:	0800a2e7 	.word	0x0800a2e7
 800a598:	0806e612 	.word	0x0806e612

0800a59c <__assert_func>:
 800a59c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a59e:	4614      	mov	r4, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4b09      	ldr	r3, [pc, #36]	; (800a5c8 <__assert_func+0x2c>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4605      	mov	r5, r0
 800a5a8:	68d8      	ldr	r0, [r3, #12]
 800a5aa:	b14c      	cbz	r4, 800a5c0 <__assert_func+0x24>
 800a5ac:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <__assert_func+0x30>)
 800a5ae:	9100      	str	r1, [sp, #0]
 800a5b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a5b4:	4906      	ldr	r1, [pc, #24]	; (800a5d0 <__assert_func+0x34>)
 800a5b6:	462b      	mov	r3, r5
 800a5b8:	f000 f80e 	bl	800a5d8 <fiprintf>
 800a5bc:	f000 fa7c 	bl	800aab8 <abort>
 800a5c0:	4b04      	ldr	r3, [pc, #16]	; (800a5d4 <__assert_func+0x38>)
 800a5c2:	461c      	mov	r4, r3
 800a5c4:	e7f3      	b.n	800a5ae <__assert_func+0x12>
 800a5c6:	bf00      	nop
 800a5c8:	20000738 	.word	0x20000738
 800a5cc:	0806e61d 	.word	0x0806e61d
 800a5d0:	0806e62a 	.word	0x0806e62a
 800a5d4:	0806e658 	.word	0x0806e658

0800a5d8 <fiprintf>:
 800a5d8:	b40e      	push	{r1, r2, r3}
 800a5da:	b503      	push	{r0, r1, lr}
 800a5dc:	4601      	mov	r1, r0
 800a5de:	ab03      	add	r3, sp, #12
 800a5e0:	4805      	ldr	r0, [pc, #20]	; (800a5f8 <fiprintf+0x20>)
 800a5e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e6:	6800      	ldr	r0, [r0, #0]
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	f000 f867 	bl	800a6bc <_vfiprintf_r>
 800a5ee:	b002      	add	sp, #8
 800a5f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f4:	b003      	add	sp, #12
 800a5f6:	4770      	bx	lr
 800a5f8:	20000738 	.word	0x20000738

0800a5fc <__retarget_lock_init_recursive>:
 800a5fc:	4770      	bx	lr

0800a5fe <__retarget_lock_acquire_recursive>:
 800a5fe:	4770      	bx	lr

0800a600 <__retarget_lock_release_recursive>:
 800a600:	4770      	bx	lr

0800a602 <__ascii_mbtowc>:
 800a602:	b082      	sub	sp, #8
 800a604:	b901      	cbnz	r1, 800a608 <__ascii_mbtowc+0x6>
 800a606:	a901      	add	r1, sp, #4
 800a608:	b142      	cbz	r2, 800a61c <__ascii_mbtowc+0x1a>
 800a60a:	b14b      	cbz	r3, 800a620 <__ascii_mbtowc+0x1e>
 800a60c:	7813      	ldrb	r3, [r2, #0]
 800a60e:	600b      	str	r3, [r1, #0]
 800a610:	7812      	ldrb	r2, [r2, #0]
 800a612:	1e10      	subs	r0, r2, #0
 800a614:	bf18      	it	ne
 800a616:	2001      	movne	r0, #1
 800a618:	b002      	add	sp, #8
 800a61a:	4770      	bx	lr
 800a61c:	4610      	mov	r0, r2
 800a61e:	e7fb      	b.n	800a618 <__ascii_mbtowc+0x16>
 800a620:	f06f 0001 	mvn.w	r0, #1
 800a624:	e7f8      	b.n	800a618 <__ascii_mbtowc+0x16>

0800a626 <memmove>:
 800a626:	4288      	cmp	r0, r1
 800a628:	b510      	push	{r4, lr}
 800a62a:	eb01 0402 	add.w	r4, r1, r2
 800a62e:	d902      	bls.n	800a636 <memmove+0x10>
 800a630:	4284      	cmp	r4, r0
 800a632:	4623      	mov	r3, r4
 800a634:	d807      	bhi.n	800a646 <memmove+0x20>
 800a636:	1e43      	subs	r3, r0, #1
 800a638:	42a1      	cmp	r1, r4
 800a63a:	d008      	beq.n	800a64e <memmove+0x28>
 800a63c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a640:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a644:	e7f8      	b.n	800a638 <memmove+0x12>
 800a646:	4402      	add	r2, r0
 800a648:	4601      	mov	r1, r0
 800a64a:	428a      	cmp	r2, r1
 800a64c:	d100      	bne.n	800a650 <memmove+0x2a>
 800a64e:	bd10      	pop	{r4, pc}
 800a650:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a654:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a658:	e7f7      	b.n	800a64a <memmove+0x24>

0800a65a <_malloc_usable_size_r>:
 800a65a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a65e:	1f18      	subs	r0, r3, #4
 800a660:	2b00      	cmp	r3, #0
 800a662:	bfbc      	itt	lt
 800a664:	580b      	ldrlt	r3, [r1, r0]
 800a666:	18c0      	addlt	r0, r0, r3
 800a668:	4770      	bx	lr

0800a66a <__sfputc_r>:
 800a66a:	6893      	ldr	r3, [r2, #8]
 800a66c:	3b01      	subs	r3, #1
 800a66e:	2b00      	cmp	r3, #0
 800a670:	b410      	push	{r4}
 800a672:	6093      	str	r3, [r2, #8]
 800a674:	da08      	bge.n	800a688 <__sfputc_r+0x1e>
 800a676:	6994      	ldr	r4, [r2, #24]
 800a678:	42a3      	cmp	r3, r4
 800a67a:	db01      	blt.n	800a680 <__sfputc_r+0x16>
 800a67c:	290a      	cmp	r1, #10
 800a67e:	d103      	bne.n	800a688 <__sfputc_r+0x1e>
 800a680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a684:	f000 b94a 	b.w	800a91c <__swbuf_r>
 800a688:	6813      	ldr	r3, [r2, #0]
 800a68a:	1c58      	adds	r0, r3, #1
 800a68c:	6010      	str	r0, [r2, #0]
 800a68e:	7019      	strb	r1, [r3, #0]
 800a690:	4608      	mov	r0, r1
 800a692:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <__sfputs_r>:
 800a698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a69a:	4606      	mov	r6, r0
 800a69c:	460f      	mov	r7, r1
 800a69e:	4614      	mov	r4, r2
 800a6a0:	18d5      	adds	r5, r2, r3
 800a6a2:	42ac      	cmp	r4, r5
 800a6a4:	d101      	bne.n	800a6aa <__sfputs_r+0x12>
 800a6a6:	2000      	movs	r0, #0
 800a6a8:	e007      	b.n	800a6ba <__sfputs_r+0x22>
 800a6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6ae:	463a      	mov	r2, r7
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff ffda 	bl	800a66a <__sfputc_r>
 800a6b6:	1c43      	adds	r3, r0, #1
 800a6b8:	d1f3      	bne.n	800a6a2 <__sfputs_r+0xa>
 800a6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a6bc <_vfiprintf_r>:
 800a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c0:	460d      	mov	r5, r1
 800a6c2:	b09d      	sub	sp, #116	; 0x74
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	4698      	mov	r8, r3
 800a6c8:	4606      	mov	r6, r0
 800a6ca:	b118      	cbz	r0, 800a6d4 <_vfiprintf_r+0x18>
 800a6cc:	6983      	ldr	r3, [r0, #24]
 800a6ce:	b90b      	cbnz	r3, 800a6d4 <_vfiprintf_r+0x18>
 800a6d0:	f000 fb14 	bl	800acfc <__sinit>
 800a6d4:	4b89      	ldr	r3, [pc, #548]	; (800a8fc <_vfiprintf_r+0x240>)
 800a6d6:	429d      	cmp	r5, r3
 800a6d8:	d11b      	bne.n	800a712 <_vfiprintf_r+0x56>
 800a6da:	6875      	ldr	r5, [r6, #4]
 800a6dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6de:	07d9      	lsls	r1, r3, #31
 800a6e0:	d405      	bmi.n	800a6ee <_vfiprintf_r+0x32>
 800a6e2:	89ab      	ldrh	r3, [r5, #12]
 800a6e4:	059a      	lsls	r2, r3, #22
 800a6e6:	d402      	bmi.n	800a6ee <_vfiprintf_r+0x32>
 800a6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ea:	f7ff ff88 	bl	800a5fe <__retarget_lock_acquire_recursive>
 800a6ee:	89ab      	ldrh	r3, [r5, #12]
 800a6f0:	071b      	lsls	r3, r3, #28
 800a6f2:	d501      	bpl.n	800a6f8 <_vfiprintf_r+0x3c>
 800a6f4:	692b      	ldr	r3, [r5, #16]
 800a6f6:	b9eb      	cbnz	r3, 800a734 <_vfiprintf_r+0x78>
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f000 f96e 	bl	800a9dc <__swsetup_r>
 800a700:	b1c0      	cbz	r0, 800a734 <_vfiprintf_r+0x78>
 800a702:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a704:	07dc      	lsls	r4, r3, #31
 800a706:	d50e      	bpl.n	800a726 <_vfiprintf_r+0x6a>
 800a708:	f04f 30ff 	mov.w	r0, #4294967295
 800a70c:	b01d      	add	sp, #116	; 0x74
 800a70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a712:	4b7b      	ldr	r3, [pc, #492]	; (800a900 <_vfiprintf_r+0x244>)
 800a714:	429d      	cmp	r5, r3
 800a716:	d101      	bne.n	800a71c <_vfiprintf_r+0x60>
 800a718:	68b5      	ldr	r5, [r6, #8]
 800a71a:	e7df      	b.n	800a6dc <_vfiprintf_r+0x20>
 800a71c:	4b79      	ldr	r3, [pc, #484]	; (800a904 <_vfiprintf_r+0x248>)
 800a71e:	429d      	cmp	r5, r3
 800a720:	bf08      	it	eq
 800a722:	68f5      	ldreq	r5, [r6, #12]
 800a724:	e7da      	b.n	800a6dc <_vfiprintf_r+0x20>
 800a726:	89ab      	ldrh	r3, [r5, #12]
 800a728:	0598      	lsls	r0, r3, #22
 800a72a:	d4ed      	bmi.n	800a708 <_vfiprintf_r+0x4c>
 800a72c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a72e:	f7ff ff67 	bl	800a600 <__retarget_lock_release_recursive>
 800a732:	e7e9      	b.n	800a708 <_vfiprintf_r+0x4c>
 800a734:	2300      	movs	r3, #0
 800a736:	9309      	str	r3, [sp, #36]	; 0x24
 800a738:	2320      	movs	r3, #32
 800a73a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a73e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a742:	2330      	movs	r3, #48	; 0x30
 800a744:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a908 <_vfiprintf_r+0x24c>
 800a748:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a74c:	f04f 0901 	mov.w	r9, #1
 800a750:	4623      	mov	r3, r4
 800a752:	469a      	mov	sl, r3
 800a754:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a758:	b10a      	cbz	r2, 800a75e <_vfiprintf_r+0xa2>
 800a75a:	2a25      	cmp	r2, #37	; 0x25
 800a75c:	d1f9      	bne.n	800a752 <_vfiprintf_r+0x96>
 800a75e:	ebba 0b04 	subs.w	fp, sl, r4
 800a762:	d00b      	beq.n	800a77c <_vfiprintf_r+0xc0>
 800a764:	465b      	mov	r3, fp
 800a766:	4622      	mov	r2, r4
 800a768:	4629      	mov	r1, r5
 800a76a:	4630      	mov	r0, r6
 800a76c:	f7ff ff94 	bl	800a698 <__sfputs_r>
 800a770:	3001      	adds	r0, #1
 800a772:	f000 80aa 	beq.w	800a8ca <_vfiprintf_r+0x20e>
 800a776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a778:	445a      	add	r2, fp
 800a77a:	9209      	str	r2, [sp, #36]	; 0x24
 800a77c:	f89a 3000 	ldrb.w	r3, [sl]
 800a780:	2b00      	cmp	r3, #0
 800a782:	f000 80a2 	beq.w	800a8ca <_vfiprintf_r+0x20e>
 800a786:	2300      	movs	r3, #0
 800a788:	f04f 32ff 	mov.w	r2, #4294967295
 800a78c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a790:	f10a 0a01 	add.w	sl, sl, #1
 800a794:	9304      	str	r3, [sp, #16]
 800a796:	9307      	str	r3, [sp, #28]
 800a798:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a79c:	931a      	str	r3, [sp, #104]	; 0x68
 800a79e:	4654      	mov	r4, sl
 800a7a0:	2205      	movs	r2, #5
 800a7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a6:	4858      	ldr	r0, [pc, #352]	; (800a908 <_vfiprintf_r+0x24c>)
 800a7a8:	f7f5 fd3a 	bl	8000220 <memchr>
 800a7ac:	9a04      	ldr	r2, [sp, #16]
 800a7ae:	b9d8      	cbnz	r0, 800a7e8 <_vfiprintf_r+0x12c>
 800a7b0:	06d1      	lsls	r1, r2, #27
 800a7b2:	bf44      	itt	mi
 800a7b4:	2320      	movmi	r3, #32
 800a7b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ba:	0713      	lsls	r3, r2, #28
 800a7bc:	bf44      	itt	mi
 800a7be:	232b      	movmi	r3, #43	; 0x2b
 800a7c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7c4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7c8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ca:	d015      	beq.n	800a7f8 <_vfiprintf_r+0x13c>
 800a7cc:	9a07      	ldr	r2, [sp, #28]
 800a7ce:	4654      	mov	r4, sl
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	f04f 0c0a 	mov.w	ip, #10
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7dc:	3b30      	subs	r3, #48	; 0x30
 800a7de:	2b09      	cmp	r3, #9
 800a7e0:	d94e      	bls.n	800a880 <_vfiprintf_r+0x1c4>
 800a7e2:	b1b0      	cbz	r0, 800a812 <_vfiprintf_r+0x156>
 800a7e4:	9207      	str	r2, [sp, #28]
 800a7e6:	e014      	b.n	800a812 <_vfiprintf_r+0x156>
 800a7e8:	eba0 0308 	sub.w	r3, r0, r8
 800a7ec:	fa09 f303 	lsl.w	r3, r9, r3
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	46a2      	mov	sl, r4
 800a7f6:	e7d2      	b.n	800a79e <_vfiprintf_r+0xe2>
 800a7f8:	9b03      	ldr	r3, [sp, #12]
 800a7fa:	1d19      	adds	r1, r3, #4
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	9103      	str	r1, [sp, #12]
 800a800:	2b00      	cmp	r3, #0
 800a802:	bfbb      	ittet	lt
 800a804:	425b      	neglt	r3, r3
 800a806:	f042 0202 	orrlt.w	r2, r2, #2
 800a80a:	9307      	strge	r3, [sp, #28]
 800a80c:	9307      	strlt	r3, [sp, #28]
 800a80e:	bfb8      	it	lt
 800a810:	9204      	strlt	r2, [sp, #16]
 800a812:	7823      	ldrb	r3, [r4, #0]
 800a814:	2b2e      	cmp	r3, #46	; 0x2e
 800a816:	d10c      	bne.n	800a832 <_vfiprintf_r+0x176>
 800a818:	7863      	ldrb	r3, [r4, #1]
 800a81a:	2b2a      	cmp	r3, #42	; 0x2a
 800a81c:	d135      	bne.n	800a88a <_vfiprintf_r+0x1ce>
 800a81e:	9b03      	ldr	r3, [sp, #12]
 800a820:	1d1a      	adds	r2, r3, #4
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	9203      	str	r2, [sp, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	bfb8      	it	lt
 800a82a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a82e:	3402      	adds	r4, #2
 800a830:	9305      	str	r3, [sp, #20]
 800a832:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a918 <_vfiprintf_r+0x25c>
 800a836:	7821      	ldrb	r1, [r4, #0]
 800a838:	2203      	movs	r2, #3
 800a83a:	4650      	mov	r0, sl
 800a83c:	f7f5 fcf0 	bl	8000220 <memchr>
 800a840:	b140      	cbz	r0, 800a854 <_vfiprintf_r+0x198>
 800a842:	2340      	movs	r3, #64	; 0x40
 800a844:	eba0 000a 	sub.w	r0, r0, sl
 800a848:	fa03 f000 	lsl.w	r0, r3, r0
 800a84c:	9b04      	ldr	r3, [sp, #16]
 800a84e:	4303      	orrs	r3, r0
 800a850:	3401      	adds	r4, #1
 800a852:	9304      	str	r3, [sp, #16]
 800a854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a858:	482c      	ldr	r0, [pc, #176]	; (800a90c <_vfiprintf_r+0x250>)
 800a85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a85e:	2206      	movs	r2, #6
 800a860:	f7f5 fcde 	bl	8000220 <memchr>
 800a864:	2800      	cmp	r0, #0
 800a866:	d03f      	beq.n	800a8e8 <_vfiprintf_r+0x22c>
 800a868:	4b29      	ldr	r3, [pc, #164]	; (800a910 <_vfiprintf_r+0x254>)
 800a86a:	bb1b      	cbnz	r3, 800a8b4 <_vfiprintf_r+0x1f8>
 800a86c:	9b03      	ldr	r3, [sp, #12]
 800a86e:	3307      	adds	r3, #7
 800a870:	f023 0307 	bic.w	r3, r3, #7
 800a874:	3308      	adds	r3, #8
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a87a:	443b      	add	r3, r7
 800a87c:	9309      	str	r3, [sp, #36]	; 0x24
 800a87e:	e767      	b.n	800a750 <_vfiprintf_r+0x94>
 800a880:	fb0c 3202 	mla	r2, ip, r2, r3
 800a884:	460c      	mov	r4, r1
 800a886:	2001      	movs	r0, #1
 800a888:	e7a5      	b.n	800a7d6 <_vfiprintf_r+0x11a>
 800a88a:	2300      	movs	r3, #0
 800a88c:	3401      	adds	r4, #1
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	4619      	mov	r1, r3
 800a892:	f04f 0c0a 	mov.w	ip, #10
 800a896:	4620      	mov	r0, r4
 800a898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a89c:	3a30      	subs	r2, #48	; 0x30
 800a89e:	2a09      	cmp	r2, #9
 800a8a0:	d903      	bls.n	800a8aa <_vfiprintf_r+0x1ee>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d0c5      	beq.n	800a832 <_vfiprintf_r+0x176>
 800a8a6:	9105      	str	r1, [sp, #20]
 800a8a8:	e7c3      	b.n	800a832 <_vfiprintf_r+0x176>
 800a8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8ae:	4604      	mov	r4, r0
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e7f0      	b.n	800a896 <_vfiprintf_r+0x1da>
 800a8b4:	ab03      	add	r3, sp, #12
 800a8b6:	9300      	str	r3, [sp, #0]
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4b16      	ldr	r3, [pc, #88]	; (800a914 <_vfiprintf_r+0x258>)
 800a8bc:	a904      	add	r1, sp, #16
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f7fd fec4 	bl	800864c <_printf_float>
 800a8c4:	4607      	mov	r7, r0
 800a8c6:	1c78      	adds	r0, r7, #1
 800a8c8:	d1d6      	bne.n	800a878 <_vfiprintf_r+0x1bc>
 800a8ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8cc:	07d9      	lsls	r1, r3, #31
 800a8ce:	d405      	bmi.n	800a8dc <_vfiprintf_r+0x220>
 800a8d0:	89ab      	ldrh	r3, [r5, #12]
 800a8d2:	059a      	lsls	r2, r3, #22
 800a8d4:	d402      	bmi.n	800a8dc <_vfiprintf_r+0x220>
 800a8d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8d8:	f7ff fe92 	bl	800a600 <__retarget_lock_release_recursive>
 800a8dc:	89ab      	ldrh	r3, [r5, #12]
 800a8de:	065b      	lsls	r3, r3, #25
 800a8e0:	f53f af12 	bmi.w	800a708 <_vfiprintf_r+0x4c>
 800a8e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8e6:	e711      	b.n	800a70c <_vfiprintf_r+0x50>
 800a8e8:	ab03      	add	r3, sp, #12
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	462a      	mov	r2, r5
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <_vfiprintf_r+0x258>)
 800a8f0:	a904      	add	r1, sp, #16
 800a8f2:	4630      	mov	r0, r6
 800a8f4:	f7fe f94e 	bl	8008b94 <_printf_i>
 800a8f8:	e7e4      	b.n	800a8c4 <_vfiprintf_r+0x208>
 800a8fa:	bf00      	nop
 800a8fc:	0806e784 	.word	0x0806e784
 800a900:	0806e7a4 	.word	0x0806e7a4
 800a904:	0806e764 	.word	0x0806e764
 800a908:	0806e60c 	.word	0x0806e60c
 800a90c:	0806e616 	.word	0x0806e616
 800a910:	0800864d 	.word	0x0800864d
 800a914:	0800a699 	.word	0x0800a699
 800a918:	0806e612 	.word	0x0806e612

0800a91c <__swbuf_r>:
 800a91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91e:	460e      	mov	r6, r1
 800a920:	4614      	mov	r4, r2
 800a922:	4605      	mov	r5, r0
 800a924:	b118      	cbz	r0, 800a92e <__swbuf_r+0x12>
 800a926:	6983      	ldr	r3, [r0, #24]
 800a928:	b90b      	cbnz	r3, 800a92e <__swbuf_r+0x12>
 800a92a:	f000 f9e7 	bl	800acfc <__sinit>
 800a92e:	4b21      	ldr	r3, [pc, #132]	; (800a9b4 <__swbuf_r+0x98>)
 800a930:	429c      	cmp	r4, r3
 800a932:	d12b      	bne.n	800a98c <__swbuf_r+0x70>
 800a934:	686c      	ldr	r4, [r5, #4]
 800a936:	69a3      	ldr	r3, [r4, #24]
 800a938:	60a3      	str	r3, [r4, #8]
 800a93a:	89a3      	ldrh	r3, [r4, #12]
 800a93c:	071a      	lsls	r2, r3, #28
 800a93e:	d52f      	bpl.n	800a9a0 <__swbuf_r+0x84>
 800a940:	6923      	ldr	r3, [r4, #16]
 800a942:	b36b      	cbz	r3, 800a9a0 <__swbuf_r+0x84>
 800a944:	6923      	ldr	r3, [r4, #16]
 800a946:	6820      	ldr	r0, [r4, #0]
 800a948:	1ac0      	subs	r0, r0, r3
 800a94a:	6963      	ldr	r3, [r4, #20]
 800a94c:	b2f6      	uxtb	r6, r6
 800a94e:	4283      	cmp	r3, r0
 800a950:	4637      	mov	r7, r6
 800a952:	dc04      	bgt.n	800a95e <__swbuf_r+0x42>
 800a954:	4621      	mov	r1, r4
 800a956:	4628      	mov	r0, r5
 800a958:	f000 f93c 	bl	800abd4 <_fflush_r>
 800a95c:	bb30      	cbnz	r0, 800a9ac <__swbuf_r+0x90>
 800a95e:	68a3      	ldr	r3, [r4, #8]
 800a960:	3b01      	subs	r3, #1
 800a962:	60a3      	str	r3, [r4, #8]
 800a964:	6823      	ldr	r3, [r4, #0]
 800a966:	1c5a      	adds	r2, r3, #1
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	701e      	strb	r6, [r3, #0]
 800a96c:	6963      	ldr	r3, [r4, #20]
 800a96e:	3001      	adds	r0, #1
 800a970:	4283      	cmp	r3, r0
 800a972:	d004      	beq.n	800a97e <__swbuf_r+0x62>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	07db      	lsls	r3, r3, #31
 800a978:	d506      	bpl.n	800a988 <__swbuf_r+0x6c>
 800a97a:	2e0a      	cmp	r6, #10
 800a97c:	d104      	bne.n	800a988 <__swbuf_r+0x6c>
 800a97e:	4621      	mov	r1, r4
 800a980:	4628      	mov	r0, r5
 800a982:	f000 f927 	bl	800abd4 <_fflush_r>
 800a986:	b988      	cbnz	r0, 800a9ac <__swbuf_r+0x90>
 800a988:	4638      	mov	r0, r7
 800a98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a98c:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <__swbuf_r+0x9c>)
 800a98e:	429c      	cmp	r4, r3
 800a990:	d101      	bne.n	800a996 <__swbuf_r+0x7a>
 800a992:	68ac      	ldr	r4, [r5, #8]
 800a994:	e7cf      	b.n	800a936 <__swbuf_r+0x1a>
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <__swbuf_r+0xa0>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	bf08      	it	eq
 800a99c:	68ec      	ldreq	r4, [r5, #12]
 800a99e:	e7ca      	b.n	800a936 <__swbuf_r+0x1a>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f000 f81a 	bl	800a9dc <__swsetup_r>
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	d0cb      	beq.n	800a944 <__swbuf_r+0x28>
 800a9ac:	f04f 37ff 	mov.w	r7, #4294967295
 800a9b0:	e7ea      	b.n	800a988 <__swbuf_r+0x6c>
 800a9b2:	bf00      	nop
 800a9b4:	0806e784 	.word	0x0806e784
 800a9b8:	0806e7a4 	.word	0x0806e7a4
 800a9bc:	0806e764 	.word	0x0806e764

0800a9c0 <__ascii_wctomb>:
 800a9c0:	b149      	cbz	r1, 800a9d6 <__ascii_wctomb+0x16>
 800a9c2:	2aff      	cmp	r2, #255	; 0xff
 800a9c4:	bf85      	ittet	hi
 800a9c6:	238a      	movhi	r3, #138	; 0x8a
 800a9c8:	6003      	strhi	r3, [r0, #0]
 800a9ca:	700a      	strbls	r2, [r1, #0]
 800a9cc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a9d0:	bf98      	it	ls
 800a9d2:	2001      	movls	r0, #1
 800a9d4:	4770      	bx	lr
 800a9d6:	4608      	mov	r0, r1
 800a9d8:	4770      	bx	lr
	...

0800a9dc <__swsetup_r>:
 800a9dc:	4b32      	ldr	r3, [pc, #200]	; (800aaa8 <__swsetup_r+0xcc>)
 800a9de:	b570      	push	{r4, r5, r6, lr}
 800a9e0:	681d      	ldr	r5, [r3, #0]
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	b125      	cbz	r5, 800a9f2 <__swsetup_r+0x16>
 800a9e8:	69ab      	ldr	r3, [r5, #24]
 800a9ea:	b913      	cbnz	r3, 800a9f2 <__swsetup_r+0x16>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 f985 	bl	800acfc <__sinit>
 800a9f2:	4b2e      	ldr	r3, [pc, #184]	; (800aaac <__swsetup_r+0xd0>)
 800a9f4:	429c      	cmp	r4, r3
 800a9f6:	d10f      	bne.n	800aa18 <__swsetup_r+0x3c>
 800a9f8:	686c      	ldr	r4, [r5, #4]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa00:	0719      	lsls	r1, r3, #28
 800aa02:	d42c      	bmi.n	800aa5e <__swsetup_r+0x82>
 800aa04:	06dd      	lsls	r5, r3, #27
 800aa06:	d411      	bmi.n	800aa2c <__swsetup_r+0x50>
 800aa08:	2309      	movs	r3, #9
 800aa0a:	6033      	str	r3, [r6, #0]
 800aa0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa10:	81a3      	strh	r3, [r4, #12]
 800aa12:	f04f 30ff 	mov.w	r0, #4294967295
 800aa16:	e03e      	b.n	800aa96 <__swsetup_r+0xba>
 800aa18:	4b25      	ldr	r3, [pc, #148]	; (800aab0 <__swsetup_r+0xd4>)
 800aa1a:	429c      	cmp	r4, r3
 800aa1c:	d101      	bne.n	800aa22 <__swsetup_r+0x46>
 800aa1e:	68ac      	ldr	r4, [r5, #8]
 800aa20:	e7eb      	b.n	800a9fa <__swsetup_r+0x1e>
 800aa22:	4b24      	ldr	r3, [pc, #144]	; (800aab4 <__swsetup_r+0xd8>)
 800aa24:	429c      	cmp	r4, r3
 800aa26:	bf08      	it	eq
 800aa28:	68ec      	ldreq	r4, [r5, #12]
 800aa2a:	e7e6      	b.n	800a9fa <__swsetup_r+0x1e>
 800aa2c:	0758      	lsls	r0, r3, #29
 800aa2e:	d512      	bpl.n	800aa56 <__swsetup_r+0x7a>
 800aa30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa32:	b141      	cbz	r1, 800aa46 <__swsetup_r+0x6a>
 800aa34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa38:	4299      	cmp	r1, r3
 800aa3a:	d002      	beq.n	800aa42 <__swsetup_r+0x66>
 800aa3c:	4630      	mov	r0, r6
 800aa3e:	f7fd fc85 	bl	800834c <_free_r>
 800aa42:	2300      	movs	r3, #0
 800aa44:	6363      	str	r3, [r4, #52]	; 0x34
 800aa46:	89a3      	ldrh	r3, [r4, #12]
 800aa48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa4c:	81a3      	strh	r3, [r4, #12]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6063      	str	r3, [r4, #4]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	89a3      	ldrh	r3, [r4, #12]
 800aa58:	f043 0308 	orr.w	r3, r3, #8
 800aa5c:	81a3      	strh	r3, [r4, #12]
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	b94b      	cbnz	r3, 800aa76 <__swsetup_r+0x9a>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa6c:	d003      	beq.n	800aa76 <__swsetup_r+0x9a>
 800aa6e:	4621      	mov	r1, r4
 800aa70:	4630      	mov	r0, r6
 800aa72:	f000 fa05 	bl	800ae80 <__smakebuf_r>
 800aa76:	89a0      	ldrh	r0, [r4, #12]
 800aa78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa7c:	f010 0301 	ands.w	r3, r0, #1
 800aa80:	d00a      	beq.n	800aa98 <__swsetup_r+0xbc>
 800aa82:	2300      	movs	r3, #0
 800aa84:	60a3      	str	r3, [r4, #8]
 800aa86:	6963      	ldr	r3, [r4, #20]
 800aa88:	425b      	negs	r3, r3
 800aa8a:	61a3      	str	r3, [r4, #24]
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	b943      	cbnz	r3, 800aaa2 <__swsetup_r+0xc6>
 800aa90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa94:	d1ba      	bne.n	800aa0c <__swsetup_r+0x30>
 800aa96:	bd70      	pop	{r4, r5, r6, pc}
 800aa98:	0781      	lsls	r1, r0, #30
 800aa9a:	bf58      	it	pl
 800aa9c:	6963      	ldrpl	r3, [r4, #20]
 800aa9e:	60a3      	str	r3, [r4, #8]
 800aaa0:	e7f4      	b.n	800aa8c <__swsetup_r+0xb0>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e7f7      	b.n	800aa96 <__swsetup_r+0xba>
 800aaa6:	bf00      	nop
 800aaa8:	20000738 	.word	0x20000738
 800aaac:	0806e784 	.word	0x0806e784
 800aab0:	0806e7a4 	.word	0x0806e7a4
 800aab4:	0806e764 	.word	0x0806e764

0800aab8 <abort>:
 800aab8:	b508      	push	{r3, lr}
 800aaba:	2006      	movs	r0, #6
 800aabc:	f000 fa48 	bl	800af50 <raise>
 800aac0:	2001      	movs	r0, #1
 800aac2:	f000 fc81 	bl	800b3c8 <_exit>
	...

0800aac8 <__sflush_r>:
 800aac8:	898a      	ldrh	r2, [r1, #12]
 800aaca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aace:	4605      	mov	r5, r0
 800aad0:	0710      	lsls	r0, r2, #28
 800aad2:	460c      	mov	r4, r1
 800aad4:	d458      	bmi.n	800ab88 <__sflush_r+0xc0>
 800aad6:	684b      	ldr	r3, [r1, #4]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	dc05      	bgt.n	800aae8 <__sflush_r+0x20>
 800aadc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aade:	2b00      	cmp	r3, #0
 800aae0:	dc02      	bgt.n	800aae8 <__sflush_r+0x20>
 800aae2:	2000      	movs	r0, #0
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaea:	2e00      	cmp	r6, #0
 800aaec:	d0f9      	beq.n	800aae2 <__sflush_r+0x1a>
 800aaee:	2300      	movs	r3, #0
 800aaf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aaf4:	682f      	ldr	r7, [r5, #0]
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	d032      	beq.n	800ab60 <__sflush_r+0x98>
 800aafa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aafc:	89a3      	ldrh	r3, [r4, #12]
 800aafe:	075a      	lsls	r2, r3, #29
 800ab00:	d505      	bpl.n	800ab0e <__sflush_r+0x46>
 800ab02:	6863      	ldr	r3, [r4, #4]
 800ab04:	1ac0      	subs	r0, r0, r3
 800ab06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ab08:	b10b      	cbz	r3, 800ab0e <__sflush_r+0x46>
 800ab0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ab0c:	1ac0      	subs	r0, r0, r3
 800ab0e:	2300      	movs	r3, #0
 800ab10:	4602      	mov	r2, r0
 800ab12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ab14:	6a21      	ldr	r1, [r4, #32]
 800ab16:	4628      	mov	r0, r5
 800ab18:	47b0      	blx	r6
 800ab1a:	1c43      	adds	r3, r0, #1
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	d106      	bne.n	800ab2e <__sflush_r+0x66>
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	291d      	cmp	r1, #29
 800ab24:	d82c      	bhi.n	800ab80 <__sflush_r+0xb8>
 800ab26:	4a2a      	ldr	r2, [pc, #168]	; (800abd0 <__sflush_r+0x108>)
 800ab28:	40ca      	lsrs	r2, r1
 800ab2a:	07d6      	lsls	r6, r2, #31
 800ab2c:	d528      	bpl.n	800ab80 <__sflush_r+0xb8>
 800ab2e:	2200      	movs	r2, #0
 800ab30:	6062      	str	r2, [r4, #4]
 800ab32:	04d9      	lsls	r1, r3, #19
 800ab34:	6922      	ldr	r2, [r4, #16]
 800ab36:	6022      	str	r2, [r4, #0]
 800ab38:	d504      	bpl.n	800ab44 <__sflush_r+0x7c>
 800ab3a:	1c42      	adds	r2, r0, #1
 800ab3c:	d101      	bne.n	800ab42 <__sflush_r+0x7a>
 800ab3e:	682b      	ldr	r3, [r5, #0]
 800ab40:	b903      	cbnz	r3, 800ab44 <__sflush_r+0x7c>
 800ab42:	6560      	str	r0, [r4, #84]	; 0x54
 800ab44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab46:	602f      	str	r7, [r5, #0]
 800ab48:	2900      	cmp	r1, #0
 800ab4a:	d0ca      	beq.n	800aae2 <__sflush_r+0x1a>
 800ab4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab50:	4299      	cmp	r1, r3
 800ab52:	d002      	beq.n	800ab5a <__sflush_r+0x92>
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7fd fbf9 	bl	800834c <_free_r>
 800ab5a:	2000      	movs	r0, #0
 800ab5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ab5e:	e7c1      	b.n	800aae4 <__sflush_r+0x1c>
 800ab60:	6a21      	ldr	r1, [r4, #32]
 800ab62:	2301      	movs	r3, #1
 800ab64:	4628      	mov	r0, r5
 800ab66:	47b0      	blx	r6
 800ab68:	1c41      	adds	r1, r0, #1
 800ab6a:	d1c7      	bne.n	800aafc <__sflush_r+0x34>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d0c4      	beq.n	800aafc <__sflush_r+0x34>
 800ab72:	2b1d      	cmp	r3, #29
 800ab74:	d001      	beq.n	800ab7a <__sflush_r+0xb2>
 800ab76:	2b16      	cmp	r3, #22
 800ab78:	d101      	bne.n	800ab7e <__sflush_r+0xb6>
 800ab7a:	602f      	str	r7, [r5, #0]
 800ab7c:	e7b1      	b.n	800aae2 <__sflush_r+0x1a>
 800ab7e:	89a3      	ldrh	r3, [r4, #12]
 800ab80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab84:	81a3      	strh	r3, [r4, #12]
 800ab86:	e7ad      	b.n	800aae4 <__sflush_r+0x1c>
 800ab88:	690f      	ldr	r7, [r1, #16]
 800ab8a:	2f00      	cmp	r7, #0
 800ab8c:	d0a9      	beq.n	800aae2 <__sflush_r+0x1a>
 800ab8e:	0793      	lsls	r3, r2, #30
 800ab90:	680e      	ldr	r6, [r1, #0]
 800ab92:	bf08      	it	eq
 800ab94:	694b      	ldreq	r3, [r1, #20]
 800ab96:	600f      	str	r7, [r1, #0]
 800ab98:	bf18      	it	ne
 800ab9a:	2300      	movne	r3, #0
 800ab9c:	eba6 0807 	sub.w	r8, r6, r7
 800aba0:	608b      	str	r3, [r1, #8]
 800aba2:	f1b8 0f00 	cmp.w	r8, #0
 800aba6:	dd9c      	ble.n	800aae2 <__sflush_r+0x1a>
 800aba8:	6a21      	ldr	r1, [r4, #32]
 800abaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abac:	4643      	mov	r3, r8
 800abae:	463a      	mov	r2, r7
 800abb0:	4628      	mov	r0, r5
 800abb2:	47b0      	blx	r6
 800abb4:	2800      	cmp	r0, #0
 800abb6:	dc06      	bgt.n	800abc6 <__sflush_r+0xfe>
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	f04f 30ff 	mov.w	r0, #4294967295
 800abc4:	e78e      	b.n	800aae4 <__sflush_r+0x1c>
 800abc6:	4407      	add	r7, r0
 800abc8:	eba8 0800 	sub.w	r8, r8, r0
 800abcc:	e7e9      	b.n	800aba2 <__sflush_r+0xda>
 800abce:	bf00      	nop
 800abd0:	20400001 	.word	0x20400001

0800abd4 <_fflush_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	690b      	ldr	r3, [r1, #16]
 800abd8:	4605      	mov	r5, r0
 800abda:	460c      	mov	r4, r1
 800abdc:	b913      	cbnz	r3, 800abe4 <_fflush_r+0x10>
 800abde:	2500      	movs	r5, #0
 800abe0:	4628      	mov	r0, r5
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	b118      	cbz	r0, 800abee <_fflush_r+0x1a>
 800abe6:	6983      	ldr	r3, [r0, #24]
 800abe8:	b90b      	cbnz	r3, 800abee <_fflush_r+0x1a>
 800abea:	f000 f887 	bl	800acfc <__sinit>
 800abee:	4b14      	ldr	r3, [pc, #80]	; (800ac40 <_fflush_r+0x6c>)
 800abf0:	429c      	cmp	r4, r3
 800abf2:	d11b      	bne.n	800ac2c <_fflush_r+0x58>
 800abf4:	686c      	ldr	r4, [r5, #4]
 800abf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <_fflush_r+0xa>
 800abfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac00:	07d0      	lsls	r0, r2, #31
 800ac02:	d404      	bmi.n	800ac0e <_fflush_r+0x3a>
 800ac04:	0599      	lsls	r1, r3, #22
 800ac06:	d402      	bmi.n	800ac0e <_fflush_r+0x3a>
 800ac08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac0a:	f7ff fcf8 	bl	800a5fe <__retarget_lock_acquire_recursive>
 800ac0e:	4628      	mov	r0, r5
 800ac10:	4621      	mov	r1, r4
 800ac12:	f7ff ff59 	bl	800aac8 <__sflush_r>
 800ac16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac18:	07da      	lsls	r2, r3, #31
 800ac1a:	4605      	mov	r5, r0
 800ac1c:	d4e0      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	059b      	lsls	r3, r3, #22
 800ac22:	d4dd      	bmi.n	800abe0 <_fflush_r+0xc>
 800ac24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac26:	f7ff fceb 	bl	800a600 <__retarget_lock_release_recursive>
 800ac2a:	e7d9      	b.n	800abe0 <_fflush_r+0xc>
 800ac2c:	4b05      	ldr	r3, [pc, #20]	; (800ac44 <_fflush_r+0x70>)
 800ac2e:	429c      	cmp	r4, r3
 800ac30:	d101      	bne.n	800ac36 <_fflush_r+0x62>
 800ac32:	68ac      	ldr	r4, [r5, #8]
 800ac34:	e7df      	b.n	800abf6 <_fflush_r+0x22>
 800ac36:	4b04      	ldr	r3, [pc, #16]	; (800ac48 <_fflush_r+0x74>)
 800ac38:	429c      	cmp	r4, r3
 800ac3a:	bf08      	it	eq
 800ac3c:	68ec      	ldreq	r4, [r5, #12]
 800ac3e:	e7da      	b.n	800abf6 <_fflush_r+0x22>
 800ac40:	0806e784 	.word	0x0806e784
 800ac44:	0806e7a4 	.word	0x0806e7a4
 800ac48:	0806e764 	.word	0x0806e764

0800ac4c <std>:
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	b510      	push	{r4, lr}
 800ac50:	4604      	mov	r4, r0
 800ac52:	e9c0 3300 	strd	r3, r3, [r0]
 800ac56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac5a:	6083      	str	r3, [r0, #8]
 800ac5c:	8181      	strh	r1, [r0, #12]
 800ac5e:	6643      	str	r3, [r0, #100]	; 0x64
 800ac60:	81c2      	strh	r2, [r0, #14]
 800ac62:	6183      	str	r3, [r0, #24]
 800ac64:	4619      	mov	r1, r3
 800ac66:	2208      	movs	r2, #8
 800ac68:	305c      	adds	r0, #92	; 0x5c
 800ac6a:	f7fd fb67 	bl	800833c <memset>
 800ac6e:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <std+0x38>)
 800ac70:	6263      	str	r3, [r4, #36]	; 0x24
 800ac72:	4b05      	ldr	r3, [pc, #20]	; (800ac88 <std+0x3c>)
 800ac74:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac76:	4b05      	ldr	r3, [pc, #20]	; (800ac8c <std+0x40>)
 800ac78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac7a:	4b05      	ldr	r3, [pc, #20]	; (800ac90 <std+0x44>)
 800ac7c:	6224      	str	r4, [r4, #32]
 800ac7e:	6323      	str	r3, [r4, #48]	; 0x30
 800ac80:	bd10      	pop	{r4, pc}
 800ac82:	bf00      	nop
 800ac84:	0800af89 	.word	0x0800af89
 800ac88:	0800afab 	.word	0x0800afab
 800ac8c:	0800afe3 	.word	0x0800afe3
 800ac90:	0800b007 	.word	0x0800b007

0800ac94 <_cleanup_r>:
 800ac94:	4901      	ldr	r1, [pc, #4]	; (800ac9c <_cleanup_r+0x8>)
 800ac96:	f000 b8af 	b.w	800adf8 <_fwalk_reent>
 800ac9a:	bf00      	nop
 800ac9c:	0800abd5 	.word	0x0800abd5

0800aca0 <__sfmoreglue>:
 800aca0:	b570      	push	{r4, r5, r6, lr}
 800aca2:	2268      	movs	r2, #104	; 0x68
 800aca4:	1e4d      	subs	r5, r1, #1
 800aca6:	4355      	muls	r5, r2
 800aca8:	460e      	mov	r6, r1
 800acaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800acae:	f7fd fbb9 	bl	8008424 <_malloc_r>
 800acb2:	4604      	mov	r4, r0
 800acb4:	b140      	cbz	r0, 800acc8 <__sfmoreglue+0x28>
 800acb6:	2100      	movs	r1, #0
 800acb8:	e9c0 1600 	strd	r1, r6, [r0]
 800acbc:	300c      	adds	r0, #12
 800acbe:	60a0      	str	r0, [r4, #8]
 800acc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800acc4:	f7fd fb3a 	bl	800833c <memset>
 800acc8:	4620      	mov	r0, r4
 800acca:	bd70      	pop	{r4, r5, r6, pc}

0800accc <__sfp_lock_acquire>:
 800accc:	4801      	ldr	r0, [pc, #4]	; (800acd4 <__sfp_lock_acquire+0x8>)
 800acce:	f7ff bc96 	b.w	800a5fe <__retarget_lock_acquire_recursive>
 800acd2:	bf00      	nop
 800acd4:	20003c39 	.word	0x20003c39

0800acd8 <__sfp_lock_release>:
 800acd8:	4801      	ldr	r0, [pc, #4]	; (800ace0 <__sfp_lock_release+0x8>)
 800acda:	f7ff bc91 	b.w	800a600 <__retarget_lock_release_recursive>
 800acde:	bf00      	nop
 800ace0:	20003c39 	.word	0x20003c39

0800ace4 <__sinit_lock_acquire>:
 800ace4:	4801      	ldr	r0, [pc, #4]	; (800acec <__sinit_lock_acquire+0x8>)
 800ace6:	f7ff bc8a 	b.w	800a5fe <__retarget_lock_acquire_recursive>
 800acea:	bf00      	nop
 800acec:	20003c3a 	.word	0x20003c3a

0800acf0 <__sinit_lock_release>:
 800acf0:	4801      	ldr	r0, [pc, #4]	; (800acf8 <__sinit_lock_release+0x8>)
 800acf2:	f7ff bc85 	b.w	800a600 <__retarget_lock_release_recursive>
 800acf6:	bf00      	nop
 800acf8:	20003c3a 	.word	0x20003c3a

0800acfc <__sinit>:
 800acfc:	b510      	push	{r4, lr}
 800acfe:	4604      	mov	r4, r0
 800ad00:	f7ff fff0 	bl	800ace4 <__sinit_lock_acquire>
 800ad04:	69a3      	ldr	r3, [r4, #24]
 800ad06:	b11b      	cbz	r3, 800ad10 <__sinit+0x14>
 800ad08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad0c:	f7ff bff0 	b.w	800acf0 <__sinit_lock_release>
 800ad10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ad14:	6523      	str	r3, [r4, #80]	; 0x50
 800ad16:	4b13      	ldr	r3, [pc, #76]	; (800ad64 <__sinit+0x68>)
 800ad18:	4a13      	ldr	r2, [pc, #76]	; (800ad68 <__sinit+0x6c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	62a2      	str	r2, [r4, #40]	; 0x28
 800ad1e:	42a3      	cmp	r3, r4
 800ad20:	bf04      	itt	eq
 800ad22:	2301      	moveq	r3, #1
 800ad24:	61a3      	streq	r3, [r4, #24]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f820 	bl	800ad6c <__sfp>
 800ad2c:	6060      	str	r0, [r4, #4]
 800ad2e:	4620      	mov	r0, r4
 800ad30:	f000 f81c 	bl	800ad6c <__sfp>
 800ad34:	60a0      	str	r0, [r4, #8]
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 f818 	bl	800ad6c <__sfp>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	60e0      	str	r0, [r4, #12]
 800ad40:	2104      	movs	r1, #4
 800ad42:	6860      	ldr	r0, [r4, #4]
 800ad44:	f7ff ff82 	bl	800ac4c <std>
 800ad48:	68a0      	ldr	r0, [r4, #8]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	2109      	movs	r1, #9
 800ad4e:	f7ff ff7d 	bl	800ac4c <std>
 800ad52:	68e0      	ldr	r0, [r4, #12]
 800ad54:	2202      	movs	r2, #2
 800ad56:	2112      	movs	r1, #18
 800ad58:	f7ff ff78 	bl	800ac4c <std>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	61a3      	str	r3, [r4, #24]
 800ad60:	e7d2      	b.n	800ad08 <__sinit+0xc>
 800ad62:	bf00      	nop
 800ad64:	0806e3e8 	.word	0x0806e3e8
 800ad68:	0800ac95 	.word	0x0800ac95

0800ad6c <__sfp>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	4607      	mov	r7, r0
 800ad70:	f7ff ffac 	bl	800accc <__sfp_lock_acquire>
 800ad74:	4b1e      	ldr	r3, [pc, #120]	; (800adf0 <__sfp+0x84>)
 800ad76:	681e      	ldr	r6, [r3, #0]
 800ad78:	69b3      	ldr	r3, [r6, #24]
 800ad7a:	b913      	cbnz	r3, 800ad82 <__sfp+0x16>
 800ad7c:	4630      	mov	r0, r6
 800ad7e:	f7ff ffbd 	bl	800acfc <__sinit>
 800ad82:	3648      	adds	r6, #72	; 0x48
 800ad84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad88:	3b01      	subs	r3, #1
 800ad8a:	d503      	bpl.n	800ad94 <__sfp+0x28>
 800ad8c:	6833      	ldr	r3, [r6, #0]
 800ad8e:	b30b      	cbz	r3, 800add4 <__sfp+0x68>
 800ad90:	6836      	ldr	r6, [r6, #0]
 800ad92:	e7f7      	b.n	800ad84 <__sfp+0x18>
 800ad94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad98:	b9d5      	cbnz	r5, 800add0 <__sfp+0x64>
 800ad9a:	4b16      	ldr	r3, [pc, #88]	; (800adf4 <__sfp+0x88>)
 800ad9c:	60e3      	str	r3, [r4, #12]
 800ad9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ada2:	6665      	str	r5, [r4, #100]	; 0x64
 800ada4:	f7ff fc2a 	bl	800a5fc <__retarget_lock_init_recursive>
 800ada8:	f7ff ff96 	bl	800acd8 <__sfp_lock_release>
 800adac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800adb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800adb4:	6025      	str	r5, [r4, #0]
 800adb6:	61a5      	str	r5, [r4, #24]
 800adb8:	2208      	movs	r2, #8
 800adba:	4629      	mov	r1, r5
 800adbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800adc0:	f7fd fabc 	bl	800833c <memset>
 800adc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800adc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800adcc:	4620      	mov	r0, r4
 800adce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800add0:	3468      	adds	r4, #104	; 0x68
 800add2:	e7d9      	b.n	800ad88 <__sfp+0x1c>
 800add4:	2104      	movs	r1, #4
 800add6:	4638      	mov	r0, r7
 800add8:	f7ff ff62 	bl	800aca0 <__sfmoreglue>
 800addc:	4604      	mov	r4, r0
 800adde:	6030      	str	r0, [r6, #0]
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d1d5      	bne.n	800ad90 <__sfp+0x24>
 800ade4:	f7ff ff78 	bl	800acd8 <__sfp_lock_release>
 800ade8:	230c      	movs	r3, #12
 800adea:	603b      	str	r3, [r7, #0]
 800adec:	e7ee      	b.n	800adcc <__sfp+0x60>
 800adee:	bf00      	nop
 800adf0:	0806e3e8 	.word	0x0806e3e8
 800adf4:	ffff0001 	.word	0xffff0001

0800adf8 <_fwalk_reent>:
 800adf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adfc:	4606      	mov	r6, r0
 800adfe:	4688      	mov	r8, r1
 800ae00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae04:	2700      	movs	r7, #0
 800ae06:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ae0a:	f1b9 0901 	subs.w	r9, r9, #1
 800ae0e:	d505      	bpl.n	800ae1c <_fwalk_reent+0x24>
 800ae10:	6824      	ldr	r4, [r4, #0]
 800ae12:	2c00      	cmp	r4, #0
 800ae14:	d1f7      	bne.n	800ae06 <_fwalk_reent+0xe>
 800ae16:	4638      	mov	r0, r7
 800ae18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae1c:	89ab      	ldrh	r3, [r5, #12]
 800ae1e:	2b01      	cmp	r3, #1
 800ae20:	d907      	bls.n	800ae32 <_fwalk_reent+0x3a>
 800ae22:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae26:	3301      	adds	r3, #1
 800ae28:	d003      	beq.n	800ae32 <_fwalk_reent+0x3a>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	47c0      	blx	r8
 800ae30:	4307      	orrs	r7, r0
 800ae32:	3568      	adds	r5, #104	; 0x68
 800ae34:	e7e9      	b.n	800ae0a <_fwalk_reent+0x12>

0800ae36 <__swhatbuf_r>:
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	460e      	mov	r6, r1
 800ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	b096      	sub	sp, #88	; 0x58
 800ae42:	4614      	mov	r4, r2
 800ae44:	461d      	mov	r5, r3
 800ae46:	da08      	bge.n	800ae5a <__swhatbuf_r+0x24>
 800ae48:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	602a      	str	r2, [r5, #0]
 800ae50:	061a      	lsls	r2, r3, #24
 800ae52:	d410      	bmi.n	800ae76 <__swhatbuf_r+0x40>
 800ae54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae58:	e00e      	b.n	800ae78 <__swhatbuf_r+0x42>
 800ae5a:	466a      	mov	r2, sp
 800ae5c:	f000 f8fa 	bl	800b054 <_fstat_r>
 800ae60:	2800      	cmp	r0, #0
 800ae62:	dbf1      	blt.n	800ae48 <__swhatbuf_r+0x12>
 800ae64:	9a01      	ldr	r2, [sp, #4]
 800ae66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae6e:	425a      	negs	r2, r3
 800ae70:	415a      	adcs	r2, r3
 800ae72:	602a      	str	r2, [r5, #0]
 800ae74:	e7ee      	b.n	800ae54 <__swhatbuf_r+0x1e>
 800ae76:	2340      	movs	r3, #64	; 0x40
 800ae78:	2000      	movs	r0, #0
 800ae7a:	6023      	str	r3, [r4, #0]
 800ae7c:	b016      	add	sp, #88	; 0x58
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}

0800ae80 <__smakebuf_r>:
 800ae80:	898b      	ldrh	r3, [r1, #12]
 800ae82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae84:	079d      	lsls	r5, r3, #30
 800ae86:	4606      	mov	r6, r0
 800ae88:	460c      	mov	r4, r1
 800ae8a:	d507      	bpl.n	800ae9c <__smakebuf_r+0x1c>
 800ae8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae90:	6023      	str	r3, [r4, #0]
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	2301      	movs	r3, #1
 800ae96:	6163      	str	r3, [r4, #20]
 800ae98:	b002      	add	sp, #8
 800ae9a:	bd70      	pop	{r4, r5, r6, pc}
 800ae9c:	ab01      	add	r3, sp, #4
 800ae9e:	466a      	mov	r2, sp
 800aea0:	f7ff ffc9 	bl	800ae36 <__swhatbuf_r>
 800aea4:	9900      	ldr	r1, [sp, #0]
 800aea6:	4605      	mov	r5, r0
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7fd fabb 	bl	8008424 <_malloc_r>
 800aeae:	b948      	cbnz	r0, 800aec4 <__smakebuf_r+0x44>
 800aeb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb4:	059a      	lsls	r2, r3, #22
 800aeb6:	d4ef      	bmi.n	800ae98 <__smakebuf_r+0x18>
 800aeb8:	f023 0303 	bic.w	r3, r3, #3
 800aebc:	f043 0302 	orr.w	r3, r3, #2
 800aec0:	81a3      	strh	r3, [r4, #12]
 800aec2:	e7e3      	b.n	800ae8c <__smakebuf_r+0xc>
 800aec4:	4b0d      	ldr	r3, [pc, #52]	; (800aefc <__smakebuf_r+0x7c>)
 800aec6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	6020      	str	r0, [r4, #0]
 800aecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aed0:	81a3      	strh	r3, [r4, #12]
 800aed2:	9b00      	ldr	r3, [sp, #0]
 800aed4:	6163      	str	r3, [r4, #20]
 800aed6:	9b01      	ldr	r3, [sp, #4]
 800aed8:	6120      	str	r0, [r4, #16]
 800aeda:	b15b      	cbz	r3, 800aef4 <__smakebuf_r+0x74>
 800aedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee0:	4630      	mov	r0, r6
 800aee2:	f000 f8c9 	bl	800b078 <_isatty_r>
 800aee6:	b128      	cbz	r0, 800aef4 <__smakebuf_r+0x74>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	f023 0303 	bic.w	r3, r3, #3
 800aeee:	f043 0301 	orr.w	r3, r3, #1
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	89a0      	ldrh	r0, [r4, #12]
 800aef6:	4305      	orrs	r5, r0
 800aef8:	81a5      	strh	r5, [r4, #12]
 800aefa:	e7cd      	b.n	800ae98 <__smakebuf_r+0x18>
 800aefc:	0800ac95 	.word	0x0800ac95

0800af00 <_raise_r>:
 800af00:	291f      	cmp	r1, #31
 800af02:	b538      	push	{r3, r4, r5, lr}
 800af04:	4604      	mov	r4, r0
 800af06:	460d      	mov	r5, r1
 800af08:	d904      	bls.n	800af14 <_raise_r+0x14>
 800af0a:	2316      	movs	r3, #22
 800af0c:	6003      	str	r3, [r0, #0]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	bd38      	pop	{r3, r4, r5, pc}
 800af14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800af16:	b112      	cbz	r2, 800af1e <_raise_r+0x1e>
 800af18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af1c:	b94b      	cbnz	r3, 800af32 <_raise_r+0x32>
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 f830 	bl	800af84 <_getpid_r>
 800af24:	462a      	mov	r2, r5
 800af26:	4601      	mov	r1, r0
 800af28:	4620      	mov	r0, r4
 800af2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af2e:	f000 b817 	b.w	800af60 <_kill_r>
 800af32:	2b01      	cmp	r3, #1
 800af34:	d00a      	beq.n	800af4c <_raise_r+0x4c>
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	d103      	bne.n	800af42 <_raise_r+0x42>
 800af3a:	2316      	movs	r3, #22
 800af3c:	6003      	str	r3, [r0, #0]
 800af3e:	2001      	movs	r0, #1
 800af40:	e7e7      	b.n	800af12 <_raise_r+0x12>
 800af42:	2400      	movs	r4, #0
 800af44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af48:	4628      	mov	r0, r5
 800af4a:	4798      	blx	r3
 800af4c:	2000      	movs	r0, #0
 800af4e:	e7e0      	b.n	800af12 <_raise_r+0x12>

0800af50 <raise>:
 800af50:	4b02      	ldr	r3, [pc, #8]	; (800af5c <raise+0xc>)
 800af52:	4601      	mov	r1, r0
 800af54:	6818      	ldr	r0, [r3, #0]
 800af56:	f7ff bfd3 	b.w	800af00 <_raise_r>
 800af5a:	bf00      	nop
 800af5c:	20000738 	.word	0x20000738

0800af60 <_kill_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4d07      	ldr	r5, [pc, #28]	; (800af80 <_kill_r+0x20>)
 800af64:	2300      	movs	r3, #0
 800af66:	4604      	mov	r4, r0
 800af68:	4608      	mov	r0, r1
 800af6a:	4611      	mov	r1, r2
 800af6c:	602b      	str	r3, [r5, #0]
 800af6e:	f000 fa0b 	bl	800b388 <_kill>
 800af72:	1c43      	adds	r3, r0, #1
 800af74:	d102      	bne.n	800af7c <_kill_r+0x1c>
 800af76:	682b      	ldr	r3, [r5, #0]
 800af78:	b103      	cbz	r3, 800af7c <_kill_r+0x1c>
 800af7a:	6023      	str	r3, [r4, #0]
 800af7c:	bd38      	pop	{r3, r4, r5, pc}
 800af7e:	bf00      	nop
 800af80:	20003c34 	.word	0x20003c34

0800af84 <_getpid_r>:
 800af84:	f000 b9f0 	b.w	800b368 <_getpid>

0800af88 <__sread>:
 800af88:	b510      	push	{r4, lr}
 800af8a:	460c      	mov	r4, r1
 800af8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af90:	f000 f894 	bl	800b0bc <_read_r>
 800af94:	2800      	cmp	r0, #0
 800af96:	bfab      	itete	ge
 800af98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af9a:	89a3      	ldrhlt	r3, [r4, #12]
 800af9c:	181b      	addge	r3, r3, r0
 800af9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800afa2:	bfac      	ite	ge
 800afa4:	6563      	strge	r3, [r4, #84]	; 0x54
 800afa6:	81a3      	strhlt	r3, [r4, #12]
 800afa8:	bd10      	pop	{r4, pc}

0800afaa <__swrite>:
 800afaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afae:	461f      	mov	r7, r3
 800afb0:	898b      	ldrh	r3, [r1, #12]
 800afb2:	05db      	lsls	r3, r3, #23
 800afb4:	4605      	mov	r5, r0
 800afb6:	460c      	mov	r4, r1
 800afb8:	4616      	mov	r6, r2
 800afba:	d505      	bpl.n	800afc8 <__swrite+0x1e>
 800afbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afc0:	2302      	movs	r3, #2
 800afc2:	2200      	movs	r2, #0
 800afc4:	f000 f868 	bl	800b098 <_lseek_r>
 800afc8:	89a3      	ldrh	r3, [r4, #12]
 800afca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800afce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afd2:	81a3      	strh	r3, [r4, #12]
 800afd4:	4632      	mov	r2, r6
 800afd6:	463b      	mov	r3, r7
 800afd8:	4628      	mov	r0, r5
 800afda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afde:	f000 b817 	b.w	800b010 <_write_r>

0800afe2 <__sseek>:
 800afe2:	b510      	push	{r4, lr}
 800afe4:	460c      	mov	r4, r1
 800afe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afea:	f000 f855 	bl	800b098 <_lseek_r>
 800afee:	1c43      	adds	r3, r0, #1
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	bf15      	itete	ne
 800aff4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800affa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800affe:	81a3      	strheq	r3, [r4, #12]
 800b000:	bf18      	it	ne
 800b002:	81a3      	strhne	r3, [r4, #12]
 800b004:	bd10      	pop	{r4, pc}

0800b006 <__sclose>:
 800b006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b00a:	f000 b813 	b.w	800b034 <_close_r>
	...

0800b010 <_write_r>:
 800b010:	b538      	push	{r3, r4, r5, lr}
 800b012:	4d07      	ldr	r5, [pc, #28]	; (800b030 <_write_r+0x20>)
 800b014:	4604      	mov	r4, r0
 800b016:	4608      	mov	r0, r1
 800b018:	4611      	mov	r1, r2
 800b01a:	2200      	movs	r2, #0
 800b01c:	602a      	str	r2, [r5, #0]
 800b01e:	461a      	mov	r2, r3
 800b020:	f000 f9ca 	bl	800b3b8 <_write>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d102      	bne.n	800b02e <_write_r+0x1e>
 800b028:	682b      	ldr	r3, [r5, #0]
 800b02a:	b103      	cbz	r3, 800b02e <_write_r+0x1e>
 800b02c:	6023      	str	r3, [r4, #0]
 800b02e:	bd38      	pop	{r3, r4, r5, pc}
 800b030:	20003c34 	.word	0x20003c34

0800b034 <_close_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d06      	ldr	r5, [pc, #24]	; (800b050 <_close_r+0x1c>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	f000 f982 	bl	800b348 <_close>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_close_r+0x1a>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_close_r+0x1a>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	20003c34 	.word	0x20003c34

0800b054 <_fstat_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d07      	ldr	r5, [pc, #28]	; (800b074 <_fstat_r+0x20>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	602b      	str	r3, [r5, #0]
 800b062:	f000 f979 	bl	800b358 <_fstat>
 800b066:	1c43      	adds	r3, r0, #1
 800b068:	d102      	bne.n	800b070 <_fstat_r+0x1c>
 800b06a:	682b      	ldr	r3, [r5, #0]
 800b06c:	b103      	cbz	r3, 800b070 <_fstat_r+0x1c>
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	bd38      	pop	{r3, r4, r5, pc}
 800b072:	bf00      	nop
 800b074:	20003c34 	.word	0x20003c34

0800b078 <_isatty_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d06      	ldr	r5, [pc, #24]	; (800b094 <_isatty_r+0x1c>)
 800b07c:	2300      	movs	r3, #0
 800b07e:	4604      	mov	r4, r0
 800b080:	4608      	mov	r0, r1
 800b082:	602b      	str	r3, [r5, #0]
 800b084:	f000 f978 	bl	800b378 <_isatty>
 800b088:	1c43      	adds	r3, r0, #1
 800b08a:	d102      	bne.n	800b092 <_isatty_r+0x1a>
 800b08c:	682b      	ldr	r3, [r5, #0]
 800b08e:	b103      	cbz	r3, 800b092 <_isatty_r+0x1a>
 800b090:	6023      	str	r3, [r4, #0]
 800b092:	bd38      	pop	{r3, r4, r5, pc}
 800b094:	20003c34 	.word	0x20003c34

0800b098 <_lseek_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4d07      	ldr	r5, [pc, #28]	; (800b0b8 <_lseek_r+0x20>)
 800b09c:	4604      	mov	r4, r0
 800b09e:	4608      	mov	r0, r1
 800b0a0:	4611      	mov	r1, r2
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	602a      	str	r2, [r5, #0]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	f000 f976 	bl	800b398 <_lseek>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_lseek_r+0x1e>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_lseek_r+0x1e>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20003c34 	.word	0x20003c34

0800b0bc <_read_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	; (800b0dc <_read_r+0x20>)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f000 f96c 	bl	800b3a8 <_read>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_read_r+0x1e>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_read_r+0x1e>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20003c34 	.word	0x20003c34

0800b0e0 <expf>:
 800b0e0:	b508      	push	{r3, lr}
 800b0e2:	ed2d 8b02 	vpush	{d8}
 800b0e6:	eef0 8a40 	vmov.f32	s17, s0
 800b0ea:	f000 f82f 	bl	800b14c <__ieee754_expf>
 800b0ee:	eeb0 8a40 	vmov.f32	s16, s0
 800b0f2:	eeb0 0a68 	vmov.f32	s0, s17
 800b0f6:	f000 f919 	bl	800b32c <finitef>
 800b0fa:	b160      	cbz	r0, 800b116 <expf+0x36>
 800b0fc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b13c <expf+0x5c>
 800b100:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	dd0a      	ble.n	800b120 <expf+0x40>
 800b10a:	f7fd f8d7 	bl	80082bc <__errno>
 800b10e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800b140 <expf+0x60>
 800b112:	2322      	movs	r3, #34	; 0x22
 800b114:	6003      	str	r3, [r0, #0]
 800b116:	eeb0 0a48 	vmov.f32	s0, s16
 800b11a:	ecbd 8b02 	vpop	{d8}
 800b11e:	bd08      	pop	{r3, pc}
 800b120:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b144 <expf+0x64>
 800b124:	eef4 8ae7 	vcmpe.f32	s17, s15
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	d5f3      	bpl.n	800b116 <expf+0x36>
 800b12e:	f7fd f8c5 	bl	80082bc <__errno>
 800b132:	2322      	movs	r3, #34	; 0x22
 800b134:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800b148 <expf+0x68>
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	e7ec      	b.n	800b116 <expf+0x36>
 800b13c:	42b17180 	.word	0x42b17180
 800b140:	7f800000 	.word	0x7f800000
 800b144:	c2cff1b5 	.word	0xc2cff1b5
 800b148:	00000000 	.word	0x00000000

0800b14c <__ieee754_expf>:
 800b14c:	ee10 2a10 	vmov	r2, s0
 800b150:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800b154:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b158:	d902      	bls.n	800b160 <__ieee754_expf+0x14>
 800b15a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b15e:	4770      	bx	lr
 800b160:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800b164:	d106      	bne.n	800b174 <__ieee754_expf+0x28>
 800b166:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b2a0 <__ieee754_expf+0x154>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bf18      	it	ne
 800b16e:	eeb0 0a67 	vmovne.f32	s0, s15
 800b172:	4770      	bx	lr
 800b174:	484b      	ldr	r0, [pc, #300]	; (800b2a4 <__ieee754_expf+0x158>)
 800b176:	4282      	cmp	r2, r0
 800b178:	dd02      	ble.n	800b180 <__ieee754_expf+0x34>
 800b17a:	2000      	movs	r0, #0
 800b17c:	f000 b8d0 	b.w	800b320 <__math_oflowf>
 800b180:	2a00      	cmp	r2, #0
 800b182:	da05      	bge.n	800b190 <__ieee754_expf+0x44>
 800b184:	4a48      	ldr	r2, [pc, #288]	; (800b2a8 <__ieee754_expf+0x15c>)
 800b186:	4291      	cmp	r1, r2
 800b188:	d902      	bls.n	800b190 <__ieee754_expf+0x44>
 800b18a:	2000      	movs	r0, #0
 800b18c:	f000 b8c2 	b.w	800b314 <__math_uflowf>
 800b190:	4a46      	ldr	r2, [pc, #280]	; (800b2ac <__ieee754_expf+0x160>)
 800b192:	4291      	cmp	r1, r2
 800b194:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b198:	d952      	bls.n	800b240 <__ieee754_expf+0xf4>
 800b19a:	4a45      	ldr	r2, [pc, #276]	; (800b2b0 <__ieee754_expf+0x164>)
 800b19c:	4291      	cmp	r1, r2
 800b19e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b1a2:	d834      	bhi.n	800b20e <__ieee754_expf+0xc2>
 800b1a4:	4943      	ldr	r1, [pc, #268]	; (800b2b4 <__ieee754_expf+0x168>)
 800b1a6:	4411      	add	r1, r2
 800b1a8:	ed91 7a00 	vldr	s14, [r1]
 800b1ac:	4942      	ldr	r1, [pc, #264]	; (800b2b8 <__ieee754_expf+0x16c>)
 800b1ae:	440a      	add	r2, r1
 800b1b0:	edd2 7a00 	vldr	s15, [r2]
 800b1b4:	ee30 7a47 	vsub.f32	s14, s0, s14
 800b1b8:	f1c3 0201 	rsb	r2, r3, #1
 800b1bc:	1ad2      	subs	r2, r2, r3
 800b1be:	ee37 0a67 	vsub.f32	s0, s14, s15
 800b1c2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800b1c6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800b2bc <__ieee754_expf+0x170>
 800b1ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b2c0 <__ieee754_expf+0x174>
 800b1ce:	eee6 6a05 	vfma.f32	s13, s12, s10
 800b1d2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800b2c4 <__ieee754_expf+0x178>
 800b1d6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1da:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b2c8 <__ieee754_expf+0x17c>
 800b1de:	eee5 6a06 	vfma.f32	s13, s10, s12
 800b1e2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800b2cc <__ieee754_expf+0x180>
 800b1e6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800b1ea:	eef0 6a40 	vmov.f32	s13, s0
 800b1ee:	eee5 6a46 	vfms.f32	s13, s10, s12
 800b1f2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800b1f6:	ee20 5a26 	vmul.f32	s10, s0, s13
 800b1fa:	bb92      	cbnz	r2, 800b262 <__ieee754_expf+0x116>
 800b1fc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800b200:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800b204:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b208:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800b20c:	4770      	bx	lr
 800b20e:	4b30      	ldr	r3, [pc, #192]	; (800b2d0 <__ieee754_expf+0x184>)
 800b210:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800b2d4 <__ieee754_expf+0x188>
 800b214:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b2d8 <__ieee754_expf+0x18c>
 800b218:	4413      	add	r3, r2
 800b21a:	edd3 7a00 	vldr	s15, [r3]
 800b21e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b222:	eeb0 7a40 	vmov.f32	s14, s0
 800b226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b22a:	ee17 2a90 	vmov	r2, s15
 800b22e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b232:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800b236:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b2dc <__ieee754_expf+0x190>
 800b23a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b23e:	e7be      	b.n	800b1be <__ieee754_expf+0x72>
 800b240:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 800b244:	d20b      	bcs.n	800b25e <__ieee754_expf+0x112>
 800b246:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b2e0 <__ieee754_expf+0x194>
 800b24a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800b24e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800b252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b256:	dd02      	ble.n	800b25e <__ieee754_expf+0x112>
 800b258:	ee30 0a25 	vadd.f32	s0, s0, s11
 800b25c:	4770      	bx	lr
 800b25e:	2200      	movs	r2, #0
 800b260:	e7af      	b.n	800b1c2 <__ieee754_expf+0x76>
 800b262:	ee76 6a66 	vsub.f32	s13, s12, s13
 800b266:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800b26a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800b26e:	bfb8      	it	lt
 800b270:	3264      	addlt	r2, #100	; 0x64
 800b272:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b276:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b27a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 800b27e:	ee17 3a90 	vmov	r3, s15
 800b282:	bfab      	itete	ge
 800b284:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800b288:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800b28c:	ee00 3a10 	vmovge	s0, r3
 800b290:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800b2e4 <__ieee754_expf+0x198>
 800b294:	bfbc      	itt	lt
 800b296:	ee00 3a10 	vmovlt	s0, r3
 800b29a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800b29e:	4770      	bx	lr
 800b2a0:	00000000 	.word	0x00000000
 800b2a4:	42b17217 	.word	0x42b17217
 800b2a8:	42cff1b5 	.word	0x42cff1b5
 800b2ac:	3eb17218 	.word	0x3eb17218
 800b2b0:	3f851591 	.word	0x3f851591
 800b2b4:	0806e7cc 	.word	0x0806e7cc
 800b2b8:	0806e7d4 	.word	0x0806e7d4
 800b2bc:	3331bb4c 	.word	0x3331bb4c
 800b2c0:	b5ddea0e 	.word	0xb5ddea0e
 800b2c4:	388ab355 	.word	0x388ab355
 800b2c8:	bb360b61 	.word	0xbb360b61
 800b2cc:	3e2aaaab 	.word	0x3e2aaaab
 800b2d0:	0806e7c4 	.word	0x0806e7c4
 800b2d4:	3fb8aa3b 	.word	0x3fb8aa3b
 800b2d8:	3f317180 	.word	0x3f317180
 800b2dc:	3717f7d1 	.word	0x3717f7d1
 800b2e0:	7149f2ca 	.word	0x7149f2ca
 800b2e4:	0d800000 	.word	0x0d800000

0800b2e8 <with_errnof>:
 800b2e8:	b513      	push	{r0, r1, r4, lr}
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b2f0:	f7fc ffe4 	bl	80082bc <__errno>
 800b2f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b2f8:	6004      	str	r4, [r0, #0]
 800b2fa:	b002      	add	sp, #8
 800b2fc:	bd10      	pop	{r4, pc}

0800b2fe <xflowf>:
 800b2fe:	b130      	cbz	r0, 800b30e <xflowf+0x10>
 800b300:	eef1 7a40 	vneg.f32	s15, s0
 800b304:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b308:	2022      	movs	r0, #34	; 0x22
 800b30a:	f7ff bfed 	b.w	800b2e8 <with_errnof>
 800b30e:	eef0 7a40 	vmov.f32	s15, s0
 800b312:	e7f7      	b.n	800b304 <xflowf+0x6>

0800b314 <__math_uflowf>:
 800b314:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b31c <__math_uflowf+0x8>
 800b318:	f7ff bff1 	b.w	800b2fe <xflowf>
 800b31c:	10000000 	.word	0x10000000

0800b320 <__math_oflowf>:
 800b320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b328 <__math_oflowf+0x8>
 800b324:	f7ff bfeb 	b.w	800b2fe <xflowf>
 800b328:	70000000 	.word	0x70000000

0800b32c <finitef>:
 800b32c:	b082      	sub	sp, #8
 800b32e:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b332:	9801      	ldr	r0, [sp, #4]
 800b334:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800b338:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800b33c:	bfac      	ite	ge
 800b33e:	2000      	movge	r0, #0
 800b340:	2001      	movlt	r0, #1
 800b342:	b002      	add	sp, #8
 800b344:	4770      	bx	lr
	...

0800b348 <_close>:
 800b348:	4b02      	ldr	r3, [pc, #8]	; (800b354 <_close+0xc>)
 800b34a:	2258      	movs	r2, #88	; 0x58
 800b34c:	601a      	str	r2, [r3, #0]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295
 800b352:	4770      	bx	lr
 800b354:	20003c34 	.word	0x20003c34

0800b358 <_fstat>:
 800b358:	4b02      	ldr	r3, [pc, #8]	; (800b364 <_fstat+0xc>)
 800b35a:	2258      	movs	r2, #88	; 0x58
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f04f 30ff 	mov.w	r0, #4294967295
 800b362:	4770      	bx	lr
 800b364:	20003c34 	.word	0x20003c34

0800b368 <_getpid>:
 800b368:	4b02      	ldr	r3, [pc, #8]	; (800b374 <_getpid+0xc>)
 800b36a:	2258      	movs	r2, #88	; 0x58
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	f04f 30ff 	mov.w	r0, #4294967295
 800b372:	4770      	bx	lr
 800b374:	20003c34 	.word	0x20003c34

0800b378 <_isatty>:
 800b378:	4b02      	ldr	r3, [pc, #8]	; (800b384 <_isatty+0xc>)
 800b37a:	2258      	movs	r2, #88	; 0x58
 800b37c:	601a      	str	r2, [r3, #0]
 800b37e:	2000      	movs	r0, #0
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20003c34 	.word	0x20003c34

0800b388 <_kill>:
 800b388:	4b02      	ldr	r3, [pc, #8]	; (800b394 <_kill+0xc>)
 800b38a:	2258      	movs	r2, #88	; 0x58
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	f04f 30ff 	mov.w	r0, #4294967295
 800b392:	4770      	bx	lr
 800b394:	20003c34 	.word	0x20003c34

0800b398 <_lseek>:
 800b398:	4b02      	ldr	r3, [pc, #8]	; (800b3a4 <_lseek+0xc>)
 800b39a:	2258      	movs	r2, #88	; 0x58
 800b39c:	601a      	str	r2, [r3, #0]
 800b39e:	f04f 30ff 	mov.w	r0, #4294967295
 800b3a2:	4770      	bx	lr
 800b3a4:	20003c34 	.word	0x20003c34

0800b3a8 <_read>:
 800b3a8:	4b02      	ldr	r3, [pc, #8]	; (800b3b4 <_read+0xc>)
 800b3aa:	2258      	movs	r2, #88	; 0x58
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b3b2:	4770      	bx	lr
 800b3b4:	20003c34 	.word	0x20003c34

0800b3b8 <_write>:
 800b3b8:	4b02      	ldr	r3, [pc, #8]	; (800b3c4 <_write+0xc>)
 800b3ba:	2258      	movs	r2, #88	; 0x58
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c2:	4770      	bx	lr
 800b3c4:	20003c34 	.word	0x20003c34

0800b3c8 <_exit>:
 800b3c8:	e7fe      	b.n	800b3c8 <_exit>
	...

0800b3cc <_init>:
 800b3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3ce:	bf00      	nop
 800b3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3d2:	bc08      	pop	{r3}
 800b3d4:	469e      	mov	lr, r3
 800b3d6:	4770      	bx	lr

0800b3d8 <_fini>:
 800b3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3da:	bf00      	nop
 800b3dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3de:	bc08      	pop	{r3}
 800b3e0:	469e      	mov	lr, r3
 800b3e2:	4770      	bx	lr
